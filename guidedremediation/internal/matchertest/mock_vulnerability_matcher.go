// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package matchertest provides mock matcher for testing.
package matchertest

import (
	"context"
	"encoding/json"
	"os"
	"testing"

	"github.com/google/osv-scalibr/extractor"
	"github.com/google/osv-scalibr/guidedremediation/internal/vulns"
	"github.com/ossf/osv-schema/bindings/go/osvschema"
	"google.golang.org/protobuf/encoding/protojson"
)

// MockVulnerabilityMatcher is a mock vulnerability matcher for testing.
type MockVulnerabilityMatcher []*osvschema.Vulnerability

// MatchVulnerabilities returns all vulnerabilities in the mockVulnerabilityMatcher that affect each of the Package items.
func (mvc MockVulnerabilityMatcher) MatchVulnerabilities(ctx context.Context, pkgs []*extractor.Package) ([][]*osvschema.Vulnerability, error) {
	result := make([][]*osvschema.Vulnerability, len(pkgs))
	for i, pkg := range pkgs {
		for _, vuln := range mvc {
			if vulns.IsAffected(vuln, pkg) {
				result[i] = append(result[i], vuln)
			}
		}
	}
	return result, nil
}

type mockVulns struct {
	Vulns []*osvschema.Vulnerability `json:"vulns"`
}

// UnmarshalJSON unmarshals the mock vulns. The Vulnerability field is a proto
// message, so it needs to be unmarshaled with protojson.
func (m *mockVulns) UnmarshalJSON(data []byte) error {
	var raw map[string][]json.RawMessage
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	for _, v := range raw["vulns"] {
		var vuln osvschema.Vulnerability
		if err := protojson.Unmarshal(v, &vuln); err != nil {
			return err
		}
		m.Vulns = append(m.Vulns, &vuln)
	}
	return nil
}

// NewMockVulnerabilityMatcher creates a mock vulnerability matcher for testing.
// It loads vulnerability data from a JSON file specified by vulnsJSON.
func NewMockVulnerabilityMatcher(t *testing.T, vulnsJSON string) MockVulnerabilityMatcher {
	t.Helper()
	f, err := os.Open(vulnsJSON)
	if err != nil {
		t.Fatalf("failed opening mock vulns: %v", err)
	}
	defer f.Close()
	var vulns mockVulns
	if err := json.NewDecoder(f).Decode(&vulns); err != nil {
		t.Fatalf("failed decoding mock vulns: %v", err)
	}
	return MockVulnerabilityMatcher(vulns.Vulns)
}