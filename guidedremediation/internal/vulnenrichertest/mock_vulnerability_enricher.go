// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package vulnenrichertest provides mock vulmatch/enricher for testing.
package vulnenrichertest

import (
	"context"
	"encoding/json"
	"os"
	"testing"

	"github.com/google/osv-scalibr/enricher"
	"github.com/google/osv-scalibr/guidedremediation/internal/vulns"
	"github.com/google/osv-scalibr/inventory"
	"github.com/google/osv-scalibr/plugin"
	osvpb "github.com/ossf/osv-schema/bindings/go/osvschema"
	"google.golang.org/protobuf/encoding/protojson"
)

const (
	// Name is the unique name of this Enricher.
	Name    = "vulnmatch/mockvuln"
	version = 0
)

var _ enricher.Enricher = MockVulnerabilityEnricher{}

// MockVulnerabilityEnricher is a mock vulnmatch/enricher for testing.
//
//nolint:plugger // For testing only.
type MockVulnerabilityEnricher []*osvpb.Vulnerability

// NewMockVulnerabilityEnricher creates a mock vulnerability enricher for testing.
// It loads vulnerability data from a JSON file specified by vulnsJSON.
func NewMockVulnerabilityEnricher(t *testing.T, vulnsJSON string) MockVulnerabilityEnricher {
	t.Helper()
	f, err := os.Open(vulnsJSON)
	if err != nil {
		t.Fatalf("failed opening mock vulns: %v", err)
	}
	defer f.Close()
	var vulns mockVulns
	if err := json.NewDecoder(f).Decode(&vulns); err != nil {
		t.Fatalf("failed decoding mock vulns: %v", err)
	}
	return MockVulnerabilityEnricher(vulns.Vulns)
}

// Name of the Enricher.
func (MockVulnerabilityEnricher) Name() string {
	return Name
}

// Version of the Enricher.
func (MockVulnerabilityEnricher) Version() int {
	return version
}

// Requirements of the Enricher.
func (MockVulnerabilityEnricher) Requirements() *plugin.Capabilities {
	return &plugin.Capabilities{}
}

// RequiredPlugins of the Enricher.
func (MockVulnerabilityEnricher) RequiredPlugins() []string {
	return []string{}
}

// Enrich finds vulnerabilities in the inventory from the mock vulnerability list.
func (e MockVulnerabilityEnricher) Enrich(ctx context.Context, _ *enricher.ScanInput, inv *inventory.Inventory) error {
	for _, vuln := range e {
		for _, pkg := range inv.Packages {
			if vulns.IsAffected(vuln, pkg) {
				inv.PackageVulns = append(inv.PackageVulns, &inventory.PackageVuln{
					Package:       pkg,
					Vulnerability: vuln,
				})
			}
		}
	}
	return nil
}

type mockVulns struct {
	Vulns []*osvpb.Vulnerability `json:"vulns"`
}

// UnmarshalJSON unmarshals the mock vulns. The Vulnerability field is a proto
// message, so it needs to be unmarshaled with protojson.
func (m *mockVulns) UnmarshalJSON(data []byte) error {
	var raw map[string][]json.RawMessage
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	for _, v := range raw["vulns"] {
		var vuln osvpb.Vulnerability
		if err := protojson.Unmarshal(v, &vuln); err != nil {
			return err
		}
		m.Vulns = append(m.Vulns, &vuln)
	}
	return nil
}
