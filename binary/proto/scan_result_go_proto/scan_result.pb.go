//
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.12
// source: proto/scan_result.proto

package scan_result_go_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ScanStatus_ScanStatusEnum int32

const (
	ScanStatus_UNSPECIFIED         ScanStatus_ScanStatusEnum = 0
	ScanStatus_SUCCEEDED           ScanStatus_ScanStatusEnum = 1
	ScanStatus_PARTIALLY_SUCCEEDED ScanStatus_ScanStatusEnum = 2
	ScanStatus_FAILED              ScanStatus_ScanStatusEnum = 3
)

// Enum value maps for ScanStatus_ScanStatusEnum.
var (
	ScanStatus_ScanStatusEnum_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "SUCCEEDED",
		2: "PARTIALLY_SUCCEEDED",
		3: "FAILED",
	}
	ScanStatus_ScanStatusEnum_value = map[string]int32{
		"UNSPECIFIED":         0,
		"SUCCEEDED":           1,
		"PARTIALLY_SUCCEEDED": 2,
		"FAILED":              3,
	}
)

func (x ScanStatus_ScanStatusEnum) Enum() *ScanStatus_ScanStatusEnum {
	p := new(ScanStatus_ScanStatusEnum)
	*p = x
	return p
}

func (x ScanStatus_ScanStatusEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScanStatus_ScanStatusEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_scan_result_proto_enumTypes[0].Descriptor()
}

func (ScanStatus_ScanStatusEnum) Type() protoreflect.EnumType {
	return &file_proto_scan_result_proto_enumTypes[0]
}

func (x ScanStatus_ScanStatusEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScanStatus_ScanStatusEnum.Descriptor instead.
func (ScanStatus_ScanStatusEnum) EnumDescriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{1, 0}
}

type Inventory_AnnotationEnum int32

const (
	Inventory_UNSPECIFIED       Inventory_AnnotationEnum = 0
	Inventory_TRANSITIONAL      Inventory_AnnotationEnum = 1
	Inventory_INSIDE_OS_PACKAGE Inventory_AnnotationEnum = 2
	Inventory_INSIDE_CACHE_DIR  Inventory_AnnotationEnum = 3
)

// Enum value maps for Inventory_AnnotationEnum.
var (
	Inventory_AnnotationEnum_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "TRANSITIONAL",
		2: "INSIDE_OS_PACKAGE",
		3: "INSIDE_CACHE_DIR",
	}
	Inventory_AnnotationEnum_value = map[string]int32{
		"UNSPECIFIED":       0,
		"TRANSITIONAL":      1,
		"INSIDE_OS_PACKAGE": 2,
		"INSIDE_CACHE_DIR":  3,
	}
)

func (x Inventory_AnnotationEnum) Enum() *Inventory_AnnotationEnum {
	p := new(Inventory_AnnotationEnum)
	*p = x
	return p
}

func (x Inventory_AnnotationEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Inventory_AnnotationEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_scan_result_proto_enumTypes[1].Descriptor()
}

func (Inventory_AnnotationEnum) Type() protoreflect.EnumType {
	return &file_proto_scan_result_proto_enumTypes[1]
}

func (x Inventory_AnnotationEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Inventory_AnnotationEnum.Descriptor instead.
func (Inventory_AnnotationEnum) EnumDescriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{3, 0}
}

type Advisory_TypeEnum int32

const (
	Advisory_UNKNOWN       Advisory_TypeEnum = 0
	Advisory_VULNERABILITY Advisory_TypeEnum = 1
	Advisory_CIS_FINDING   Advisory_TypeEnum = 2
)

// Enum value maps for Advisory_TypeEnum.
var (
	Advisory_TypeEnum_name = map[int32]string{
		0: "UNKNOWN",
		1: "VULNERABILITY",
		2: "CIS_FINDING",
	}
	Advisory_TypeEnum_value = map[string]int32{
		"UNKNOWN":       0,
		"VULNERABILITY": 1,
		"CIS_FINDING":   2,
	}
)

func (x Advisory_TypeEnum) Enum() *Advisory_TypeEnum {
	p := new(Advisory_TypeEnum)
	*p = x
	return p
}

func (x Advisory_TypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Advisory_TypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_scan_result_proto_enumTypes[2].Descriptor()
}

func (Advisory_TypeEnum) Type() protoreflect.EnumType {
	return &file_proto_scan_result_proto_enumTypes[2]
}

func (x Advisory_TypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Advisory_TypeEnum.Descriptor instead.
func (Advisory_TypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{9, 0}
}

type Severity_SeverityEnum int32

const (
	Severity_UNSPECIFIED Severity_SeverityEnum = 0
	Severity_MINIMAL     Severity_SeverityEnum = 1
	Severity_LOW         Severity_SeverityEnum = 2
	Severity_MEDIUM      Severity_SeverityEnum = 3
	Severity_HIGH        Severity_SeverityEnum = 4
	Severity_CRITICAL    Severity_SeverityEnum = 5
)

// Enum value maps for Severity_SeverityEnum.
var (
	Severity_SeverityEnum_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "MINIMAL",
		2: "LOW",
		3: "MEDIUM",
		4: "HIGH",
		5: "CRITICAL",
	}
	Severity_SeverityEnum_value = map[string]int32{
		"UNSPECIFIED": 0,
		"MINIMAL":     1,
		"LOW":         2,
		"MEDIUM":      3,
		"HIGH":        4,
		"CRITICAL":    5,
	}
)

func (x Severity_SeverityEnum) Enum() *Severity_SeverityEnum {
	p := new(Severity_SeverityEnum)
	*p = x
	return p
}

func (x Severity_SeverityEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Severity_SeverityEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_scan_result_proto_enumTypes[3].Descriptor()
}

func (Severity_SeverityEnum) Type() protoreflect.EnumType {
	return &file_proto_scan_result_proto_enumTypes[3]
}

func (x Severity_SeverityEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Severity_SeverityEnum.Descriptor instead.
func (Severity_SeverityEnum) EnumDescriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{11, 0}
}

// The software inventory and security findings that a scan run found.
type ScanResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Status of the overall scan.
	Status *ScanStatus `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// Status and versions of the inventory+vuln plugins that ran.
	PluginStatus []*PluginStatus `protobuf:"bytes,5,rep,name=plugin_status,json=pluginStatus,proto3" json:"plugin_status,omitempty"`
	Inventories  []*Inventory    `protobuf:"bytes,6,rep,name=inventories,proto3" json:"inventories,omitempty"`
	Findings     []*Finding      `protobuf:"bytes,7,rep,name=findings,proto3" json:"findings,omitempty"`
}

func (x *ScanResult) Reset() {
	*x = ScanResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanResult) ProtoMessage() {}

func (x *ScanResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanResult.ProtoReflect.Descriptor instead.
func (*ScanResult) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{0}
}

func (x *ScanResult) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ScanResult) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ScanResult) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ScanResult) GetStatus() *ScanStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ScanResult) GetPluginStatus() []*PluginStatus {
	if x != nil {
		return x.PluginStatus
	}
	return nil
}

func (x *ScanResult) GetInventories() []*Inventory {
	if x != nil {
		return x.Inventories
	}
	return nil
}

func (x *ScanResult) GetFindings() []*Finding {
	if x != nil {
		return x.Findings
	}
	return nil
}

type ScanStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        ScanStatus_ScanStatusEnum `protobuf:"varint,1,opt,name=status,proto3,enum=scalibr.ScanStatus_ScanStatusEnum" json:"status,omitempty"`
	FailureReason string                    `protobuf:"bytes,2,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
}

func (x *ScanStatus) Reset() {
	*x = ScanStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanStatus) ProtoMessage() {}

func (x *ScanStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanStatus.ProtoReflect.Descriptor instead.
func (*ScanStatus) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{1}
}

func (x *ScanStatus) GetStatus() ScanStatus_ScanStatusEnum {
	if x != nil {
		return x.Status
	}
	return ScanStatus_UNSPECIFIED
}

func (x *ScanStatus) GetFailureReason() string {
	if x != nil {
		return x.FailureReason
	}
	return ""
}

type PluginStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version int32       `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Status  *ScanStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PluginStatus) Reset() {
	*x = PluginStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginStatus) ProtoMessage() {}

func (x *PluginStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginStatus.ProtoReflect.Descriptor instead.
func (*PluginStatus) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{2}
}

func (x *PluginStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PluginStatus) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *PluginStatus) GetStatus() *ScanStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// A software package or library found by an extractor.
// PURL or CPE needs to be set, maybe both.
type Inventory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Human-readable name of the software, to be used for things like logging.
	// For vuln matching, use the name from metadata.
	Name string `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	// Version of the package.
	Version string `protobuf:"bytes,12,opt,name=version,proto3" json:"version,omitempty"`
	// Source code level package identifiers.
	SourceCode *SourceCodeIdentifier `protobuf:"bytes,26,opt,name=source_code,json=sourceCode,proto3" json:"source_code,omitempty"`
	// Package URL of the software.
	Purl *Purl `protobuf:"bytes,1,opt,name=purl,proto3" json:"purl,omitempty"`
	// Ecosystem - For software packages this corresponds to an OSV ecosystem
	// value, e.g. PyPI.
	Ecosystem string `protobuf:"bytes,27,opt,name=ecosystem,proto3" json:"ecosystem,omitempty"`
	// Paths or source of files related to the package.
	Locations []string `protobuf:"bytes,2,rep,name=locations,proto3" json:"locations,omitempty"`
	// The name of the Extractor that found this software. Set by the
	// core library.
	Extractor string `protobuf:"bytes,10,opt,name=extractor,proto3" json:"extractor,omitempty"`
	// The additional data found in the package.
	//
	// Types that are assignable to Metadata:
	//
	//	*Inventory_PythonMetadata
	//	*Inventory_JavascriptMetadata
	//	*Inventory_ApkMetadata
	//	*Inventory_DpkgMetadata
	//	*Inventory_RpmMetadata
	//	*Inventory_CosMetadata
	//	*Inventory_DepsjsonMetadata
	//	*Inventory_SpdxMetadata
	//	*Inventory_JavaArchiveMetadata
	//	*Inventory_JavaLockfileMetadata
	//	*Inventory_PacmanMetadata
	//	*Inventory_NixMetadata
	//	*Inventory_KernelModuleMetadata
	//	*Inventory_VmlinuzMetadata
	//	*Inventory_PortageMetadata
	//	*Inventory_OsvMetadata
	//	*Inventory_PythonRequirementsMetadata
	//	*Inventory_ContainerdContainerMetadata
	//	*Inventory_SnapMetadata
	//	*Inventory_FlatpakMetadata
	//	*Inventory_MacAppsMetadata
	//	*Inventory_ContainerdRuntimeContainerMetadata
	//	*Inventory_CdxMetadata
	//	*Inventory_WindowsOsVersionMetadata
	//	*Inventory_HomebrewMetadata
	Metadata    isInventory_Metadata       `protobuf_oneof:"metadata"`
	Annotations []Inventory_AnnotationEnum `protobuf:"varint,28,rep,packed,name=annotations,proto3,enum=scalibr.Inventory_AnnotationEnum" json:"annotations,omitempty"`
	// Details about the layer a package was found in. This should be set only for
	// container image scanning.
	LayerDetails *LayerDetails `protobuf:"bytes,35,opt,name=layer_details,json=layerDetails,proto3" json:"layer_details,omitempty"`
}

func (x *Inventory) Reset() {
	*x = Inventory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Inventory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inventory) ProtoMessage() {}

func (x *Inventory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inventory.ProtoReflect.Descriptor instead.
func (*Inventory) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{3}
}

func (x *Inventory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Inventory) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Inventory) GetSourceCode() *SourceCodeIdentifier {
	if x != nil {
		return x.SourceCode
	}
	return nil
}

func (x *Inventory) GetPurl() *Purl {
	if x != nil {
		return x.Purl
	}
	return nil
}

func (x *Inventory) GetEcosystem() string {
	if x != nil {
		return x.Ecosystem
	}
	return ""
}

func (x *Inventory) GetLocations() []string {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *Inventory) GetExtractor() string {
	if x != nil {
		return x.Extractor
	}
	return ""
}

func (m *Inventory) GetMetadata() isInventory_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (x *Inventory) GetPythonMetadata() *PythonPackageMetadata {
	if x, ok := x.GetMetadata().(*Inventory_PythonMetadata); ok {
		return x.PythonMetadata
	}
	return nil
}

func (x *Inventory) GetJavascriptMetadata() *JavascriptPackageJSONMetadata {
	if x, ok := x.GetMetadata().(*Inventory_JavascriptMetadata); ok {
		return x.JavascriptMetadata
	}
	return nil
}

func (x *Inventory) GetApkMetadata() *APKPackageMetadata {
	if x, ok := x.GetMetadata().(*Inventory_ApkMetadata); ok {
		return x.ApkMetadata
	}
	return nil
}

func (x *Inventory) GetDpkgMetadata() *DPKGPackageMetadata {
	if x, ok := x.GetMetadata().(*Inventory_DpkgMetadata); ok {
		return x.DpkgMetadata
	}
	return nil
}

func (x *Inventory) GetRpmMetadata() *RPMPackageMetadata {
	if x, ok := x.GetMetadata().(*Inventory_RpmMetadata); ok {
		return x.RpmMetadata
	}
	return nil
}

func (x *Inventory) GetCosMetadata() *COSPackageMetadata {
	if x, ok := x.GetMetadata().(*Inventory_CosMetadata); ok {
		return x.CosMetadata
	}
	return nil
}

func (x *Inventory) GetDepsjsonMetadata() *DEPSJSONMetadata {
	if x, ok := x.GetMetadata().(*Inventory_DepsjsonMetadata); ok {
		return x.DepsjsonMetadata
	}
	return nil
}

func (x *Inventory) GetSpdxMetadata() *SPDXPackageMetadata {
	if x, ok := x.GetMetadata().(*Inventory_SpdxMetadata); ok {
		return x.SpdxMetadata
	}
	return nil
}

func (x *Inventory) GetJavaArchiveMetadata() *JavaArchiveMetadata {
	if x, ok := x.GetMetadata().(*Inventory_JavaArchiveMetadata); ok {
		return x.JavaArchiveMetadata
	}
	return nil
}

func (x *Inventory) GetJavaLockfileMetadata() *JavaLockfileMetadata {
	if x, ok := x.GetMetadata().(*Inventory_JavaLockfileMetadata); ok {
		return x.JavaLockfileMetadata
	}
	return nil
}

func (x *Inventory) GetPacmanMetadata() *PACMANPackageMetadata {
	if x, ok := x.GetMetadata().(*Inventory_PacmanMetadata); ok {
		return x.PacmanMetadata
	}
	return nil
}

func (x *Inventory) GetNixMetadata() *NixPackageMetadata {
	if x, ok := x.GetMetadata().(*Inventory_NixMetadata); ok {
		return x.NixMetadata
	}
	return nil
}

func (x *Inventory) GetKernelModuleMetadata() *KernelModuleMetadata {
	if x, ok := x.GetMetadata().(*Inventory_KernelModuleMetadata); ok {
		return x.KernelModuleMetadata
	}
	return nil
}

func (x *Inventory) GetVmlinuzMetadata() *VmlinuzMetadata {
	if x, ok := x.GetMetadata().(*Inventory_VmlinuzMetadata); ok {
		return x.VmlinuzMetadata
	}
	return nil
}

func (x *Inventory) GetPortageMetadata() *PortagePackageMetadata {
	if x, ok := x.GetMetadata().(*Inventory_PortageMetadata); ok {
		return x.PortageMetadata
	}
	return nil
}

func (x *Inventory) GetOsvMetadata() *OSVPackageMetadata {
	if x, ok := x.GetMetadata().(*Inventory_OsvMetadata); ok {
		return x.OsvMetadata
	}
	return nil
}

func (x *Inventory) GetPythonRequirementsMetadata() *PythonRequirementsMetadata {
	if x, ok := x.GetMetadata().(*Inventory_PythonRequirementsMetadata); ok {
		return x.PythonRequirementsMetadata
	}
	return nil
}

func (x *Inventory) GetContainerdContainerMetadata() *ContainerdContainerMetadata {
	if x, ok := x.GetMetadata().(*Inventory_ContainerdContainerMetadata); ok {
		return x.ContainerdContainerMetadata
	}
	return nil
}

func (x *Inventory) GetSnapMetadata() *SNAPPackageMetadata {
	if x, ok := x.GetMetadata().(*Inventory_SnapMetadata); ok {
		return x.SnapMetadata
	}
	return nil
}

func (x *Inventory) GetFlatpakMetadata() *FlatpakPackageMetadata {
	if x, ok := x.GetMetadata().(*Inventory_FlatpakMetadata); ok {
		return x.FlatpakMetadata
	}
	return nil
}

func (x *Inventory) GetMacAppsMetadata() *MacAppsMetadata {
	if x, ok := x.GetMetadata().(*Inventory_MacAppsMetadata); ok {
		return x.MacAppsMetadata
	}
	return nil
}

func (x *Inventory) GetContainerdRuntimeContainerMetadata() *ContainerdRuntimeContainerMetadata {
	if x, ok := x.GetMetadata().(*Inventory_ContainerdRuntimeContainerMetadata); ok {
		return x.ContainerdRuntimeContainerMetadata
	}
	return nil
}

func (x *Inventory) GetCdxMetadata() *CDXPackageMetadata {
	if x, ok := x.GetMetadata().(*Inventory_CdxMetadata); ok {
		return x.CdxMetadata
	}
	return nil
}

func (x *Inventory) GetWindowsOsVersionMetadata() *WindowsOSVersion {
	if x, ok := x.GetMetadata().(*Inventory_WindowsOsVersionMetadata); ok {
		return x.WindowsOsVersionMetadata
	}
	return nil
}

func (x *Inventory) GetHomebrewMetadata() *HomebrewPackageMetadata {
	if x, ok := x.GetMetadata().(*Inventory_HomebrewMetadata); ok {
		return x.HomebrewMetadata
	}
	return nil
}

func (x *Inventory) GetAnnotations() []Inventory_AnnotationEnum {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *Inventory) GetLayerDetails() *LayerDetails {
	if x != nil {
		return x.LayerDetails
	}
	return nil
}

type isInventory_Metadata interface {
	isInventory_Metadata()
}

type Inventory_PythonMetadata struct {
	PythonMetadata *PythonPackageMetadata `protobuf:"bytes,5,opt,name=python_metadata,json=pythonMetadata,proto3,oneof"`
}

type Inventory_JavascriptMetadata struct {
	JavascriptMetadata *JavascriptPackageJSONMetadata `protobuf:"bytes,6,opt,name=javascript_metadata,json=javascriptMetadata,proto3,oneof"`
}

type Inventory_ApkMetadata struct {
	ApkMetadata *APKPackageMetadata `protobuf:"bytes,7,opt,name=apk_metadata,json=apkMetadata,proto3,oneof"`
}

type Inventory_DpkgMetadata struct {
	DpkgMetadata *DPKGPackageMetadata `protobuf:"bytes,8,opt,name=dpkg_metadata,json=dpkgMetadata,proto3,oneof"`
}

type Inventory_RpmMetadata struct {
	RpmMetadata *RPMPackageMetadata `protobuf:"bytes,9,opt,name=rpm_metadata,json=rpmMetadata,proto3,oneof"`
}

type Inventory_CosMetadata struct {
	CosMetadata *COSPackageMetadata `protobuf:"bytes,13,opt,name=cos_metadata,json=cosMetadata,proto3,oneof"`
}

type Inventory_DepsjsonMetadata struct {
	DepsjsonMetadata *DEPSJSONMetadata `protobuf:"bytes,40,opt,name=depsjson_metadata,json=depsjsonMetadata,proto3,oneof"`
}

type Inventory_SpdxMetadata struct {
	SpdxMetadata *SPDXPackageMetadata `protobuf:"bytes,14,opt,name=spdx_metadata,json=spdxMetadata,proto3,oneof"`
}

type Inventory_JavaArchiveMetadata struct {
	JavaArchiveMetadata *JavaArchiveMetadata `protobuf:"bytes,15,opt,name=java_archive_metadata,json=javaArchiveMetadata,proto3,oneof"`
}

type Inventory_JavaLockfileMetadata struct {
	JavaLockfileMetadata *JavaLockfileMetadata `protobuf:"bytes,31,opt,name=java_lockfile_metadata,json=javaLockfileMetadata,proto3,oneof"`
}

type Inventory_PacmanMetadata struct {
	PacmanMetadata *PACMANPackageMetadata `protobuf:"bytes,36,opt,name=pacman_metadata,json=pacmanMetadata,proto3,oneof"`
}

type Inventory_NixMetadata struct {
	NixMetadata *NixPackageMetadata `protobuf:"bytes,37,opt,name=nix_metadata,json=nixMetadata,proto3,oneof"`
}

type Inventory_KernelModuleMetadata struct {
	KernelModuleMetadata *KernelModuleMetadata `protobuf:"bytes,38,opt,name=kernel_module_metadata,json=kernelModuleMetadata,proto3,oneof"`
}

type Inventory_VmlinuzMetadata struct {
	VmlinuzMetadata *VmlinuzMetadata `protobuf:"bytes,39,opt,name=vmlinuz_metadata,json=vmlinuzMetadata,proto3,oneof"`
}

type Inventory_PortageMetadata struct {
	PortageMetadata *PortagePackageMetadata `protobuf:"bytes,41,opt,name=portage_metadata,json=portageMetadata,proto3,oneof"`
}

type Inventory_OsvMetadata struct {
	OsvMetadata *OSVPackageMetadata `protobuf:"bytes,16,opt,name=osv_metadata,json=osvMetadata,proto3,oneof"`
}

type Inventory_PythonRequirementsMetadata struct {
	PythonRequirementsMetadata *PythonRequirementsMetadata `protobuf:"bytes,21,opt,name=python_requirements_metadata,json=pythonRequirementsMetadata,proto3,oneof"`
}

type Inventory_ContainerdContainerMetadata struct {
	ContainerdContainerMetadata *ContainerdContainerMetadata `protobuf:"bytes,22,opt,name=containerd_container_metadata,json=containerdContainerMetadata,proto3,oneof"`
}

type Inventory_SnapMetadata struct {
	SnapMetadata *SNAPPackageMetadata `protobuf:"bytes,23,opt,name=snap_metadata,json=snapMetadata,proto3,oneof"`
}

type Inventory_FlatpakMetadata struct {
	FlatpakMetadata *FlatpakPackageMetadata `protobuf:"bytes,24,opt,name=flatpak_metadata,json=flatpakMetadata,proto3,oneof"`
}

type Inventory_MacAppsMetadata struct {
	MacAppsMetadata *MacAppsMetadata `protobuf:"bytes,34,opt,name=mac_apps_metadata,json=macAppsMetadata,proto3,oneof"`
}

type Inventory_ContainerdRuntimeContainerMetadata struct {
	ContainerdRuntimeContainerMetadata *ContainerdRuntimeContainerMetadata `protobuf:"bytes,25,opt,name=containerd_runtime_container_metadata,json=containerdRuntimeContainerMetadata,proto3,oneof"`
}

type Inventory_CdxMetadata struct {
	CdxMetadata *CDXPackageMetadata `protobuf:"bytes,30,opt,name=cdx_metadata,json=cdxMetadata,proto3,oneof"`
}

type Inventory_WindowsOsVersionMetadata struct {
	WindowsOsVersionMetadata *WindowsOSVersion `protobuf:"bytes,33,opt,name=windows_os_version_metadata,json=windowsOsVersionMetadata,proto3,oneof"`
}

type Inventory_HomebrewMetadata struct {
	HomebrewMetadata *HomebrewPackageMetadata `protobuf:"bytes,42,opt,name=homebrew_metadata,json=homebrewMetadata,proto3,oneof"`
}

func (*Inventory_PythonMetadata) isInventory_Metadata() {}

func (*Inventory_JavascriptMetadata) isInventory_Metadata() {}

func (*Inventory_ApkMetadata) isInventory_Metadata() {}

func (*Inventory_DpkgMetadata) isInventory_Metadata() {}

func (*Inventory_RpmMetadata) isInventory_Metadata() {}

func (*Inventory_CosMetadata) isInventory_Metadata() {}

func (*Inventory_DepsjsonMetadata) isInventory_Metadata() {}

func (*Inventory_SpdxMetadata) isInventory_Metadata() {}

func (*Inventory_JavaArchiveMetadata) isInventory_Metadata() {}

func (*Inventory_JavaLockfileMetadata) isInventory_Metadata() {}

func (*Inventory_PacmanMetadata) isInventory_Metadata() {}

func (*Inventory_NixMetadata) isInventory_Metadata() {}

func (*Inventory_KernelModuleMetadata) isInventory_Metadata() {}

func (*Inventory_VmlinuzMetadata) isInventory_Metadata() {}

func (*Inventory_PortageMetadata) isInventory_Metadata() {}

func (*Inventory_OsvMetadata) isInventory_Metadata() {}

func (*Inventory_PythonRequirementsMetadata) isInventory_Metadata() {}

func (*Inventory_ContainerdContainerMetadata) isInventory_Metadata() {}

func (*Inventory_SnapMetadata) isInventory_Metadata() {}

func (*Inventory_FlatpakMetadata) isInventory_Metadata() {}

func (*Inventory_MacAppsMetadata) isInventory_Metadata() {}

func (*Inventory_ContainerdRuntimeContainerMetadata) isInventory_Metadata() {}

func (*Inventory_CdxMetadata) isInventory_Metadata() {}

func (*Inventory_WindowsOsVersionMetadata) isInventory_Metadata() {}

func (*Inventory_HomebrewMetadata) isInventory_Metadata() {}

// Additional identifiers for source code software packages (e.g. NPM).
type SourceCodeIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo   string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Commit string `protobuf:"bytes,2,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *SourceCodeIdentifier) Reset() {
	*x = SourceCodeIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceCodeIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceCodeIdentifier) ProtoMessage() {}

func (x *SourceCodeIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceCodeIdentifier.ProtoReflect.Descriptor instead.
func (*SourceCodeIdentifier) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{4}
}

func (x *SourceCodeIdentifier) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *SourceCodeIdentifier) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

// Details about the layer a package was found in.
type LayerDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index       int32  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	DiffId      string `protobuf:"bytes,2,opt,name=diff_id,json=diffId,proto3" json:"diff_id,omitempty"`
	Command     string `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
	InBaseImage bool   `protobuf:"varint,4,opt,name=in_base_image,json=inBaseImage,proto3" json:"in_base_image,omitempty"`
}

func (x *LayerDetails) Reset() {
	*x = LayerDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LayerDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LayerDetails) ProtoMessage() {}

func (x *LayerDetails) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LayerDetails.ProtoReflect.Descriptor instead.
func (*LayerDetails) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{5}
}

func (x *LayerDetails) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *LayerDetails) GetDiffId() string {
	if x != nil {
		return x.DiffId
	}
	return ""
}

func (x *LayerDetails) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *LayerDetails) GetInBaseImage() bool {
	if x != nil {
		return x.InBaseImage
	}
	return false
}

// Package URL, see https://github.com/package-url/purl-spec
type Purl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// String representation.
	Purl string `protobuf:"bytes,1,opt,name=purl,proto3" json:"purl,omitempty"`
	// Package type, e.g. "maven, npm, pypi".
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Package name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Package version.
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// Name prefix such as a Maven groupid, or Docker image owner.
	Namespace string `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Extra qualifying data for a package such as an OS, architecture, etc.
	Qualifiers []*Qualifier `protobuf:"bytes,6,rep,name=qualifiers,proto3" json:"qualifiers,omitempty"`
	// Extra subpath within a package, relative to the package root.
	Subpath string `protobuf:"bytes,7,opt,name=subpath,proto3" json:"subpath,omitempty"`
}

func (x *Purl) Reset() {
	*x = Purl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Purl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Purl) ProtoMessage() {}

func (x *Purl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Purl.ProtoReflect.Descriptor instead.
func (*Purl) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{6}
}

func (x *Purl) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

func (x *Purl) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Purl) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Purl) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Purl) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Purl) GetQualifiers() []*Qualifier {
	if x != nil {
		return x.Qualifiers
	}
	return nil
}

func (x *Purl) GetSubpath() string {
	if x != nil {
		return x.Subpath
	}
	return ""
}

type Qualifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Qualifier) Reset() {
	*x = Qualifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qualifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qualifier) ProtoMessage() {}

func (x *Qualifier) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qualifier.ProtoReflect.Descriptor instead.
func (*Qualifier) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{7}
}

func (x *Qualifier) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Qualifier) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// A security finding found by a detector. It could describe things like a CVE
// or a CIS non-compliance.
type Finding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Info specific to the finding. Should always be the same for the same type
	// of finding.
	Adv *Advisory `protobuf:"bytes,1,opt,name=adv,proto3" json:"adv,omitempty"`
	// Instance-specific info such as location of the vulnerable files.
	Target *TargetDetails `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	// Additional free-text info.
	Extra string `protobuf:"bytes,3,opt,name=extra,proto3" json:"extra,omitempty"`
	// The name of the Detectors that found this finding. Set by the core library.
	Detectors []string `protobuf:"bytes,4,rep,name=detectors,proto3" json:"detectors,omitempty"`
}

func (x *Finding) Reset() {
	*x = Finding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Finding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Finding) ProtoMessage() {}

func (x *Finding) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Finding.ProtoReflect.Descriptor instead.
func (*Finding) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{8}
}

func (x *Finding) GetAdv() *Advisory {
	if x != nil {
		return x.Adv
	}
	return nil
}

func (x *Finding) GetTarget() *TargetDetails {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *Finding) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *Finding) GetDetectors() []string {
	if x != nil {
		return x.Detectors
	}
	return nil
}

type Advisory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique ID for the finding.
	Id          *AdvisoryId       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type        Advisory_TypeEnum `protobuf:"varint,2,opt,name=type,proto3,enum=scalibr.Advisory_TypeEnum" json:"type,omitempty"`
	Title       string            `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description string            `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Remediation instructions, e.g. "update to latest version".
	Recommendation string    `protobuf:"bytes,5,opt,name=recommendation,proto3" json:"recommendation,omitempty"`
	Sev            *Severity `protobuf:"bytes,6,opt,name=sev,proto3" json:"sev,omitempty"`
}

func (x *Advisory) Reset() {
	*x = Advisory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Advisory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Advisory) ProtoMessage() {}

func (x *Advisory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Advisory.ProtoReflect.Descriptor instead.
func (*Advisory) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{9}
}

func (x *Advisory) GetId() *AdvisoryId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Advisory) GetType() Advisory_TypeEnum {
	if x != nil {
		return x.Type
	}
	return Advisory_UNKNOWN
}

func (x *Advisory) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Advisory) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Advisory) GetRecommendation() string {
	if x != nil {
		return x.Recommendation
	}
	return ""
}

func (x *Advisory) GetSev() *Severity {
	if x != nil {
		return x.Sev
	}
	return nil
}

// A unique identifier per advisory.
type AdvisoryId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publisher string `protobuf:"bytes,1,opt,name=publisher,proto3" json:"publisher,omitempty"` // e.g. "CVE".
	Reference string `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"` // e.g. "CVE-2023-1234".
}

func (x *AdvisoryId) Reset() {
	*x = AdvisoryId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvisoryId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvisoryId) ProtoMessage() {}

func (x *AdvisoryId) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvisoryId.ProtoReflect.Descriptor instead.
func (*AdvisoryId) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{10}
}

func (x *AdvisoryId) GetPublisher() string {
	if x != nil {
		return x.Publisher
	}
	return ""
}

func (x *AdvisoryId) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

type Severity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required severity enum. Can be used for e.g. prioritizing filed bugs.
	Severity Severity_SeverityEnum `protobuf:"varint,1,opt,name=severity,proto3,enum=scalibr.Severity_SeverityEnum" json:"severity,omitempty"`
	// Optional CVSS scores, only set for vulns with CVEs.
	CvssV2 *CVSS `protobuf:"bytes,2,opt,name=cvss_v2,json=cvssV2,proto3" json:"cvss_v2,omitempty"`
	CvssV3 *CVSS `protobuf:"bytes,3,opt,name=cvss_v3,json=cvssV3,proto3" json:"cvss_v3,omitempty"`
}

func (x *Severity) Reset() {
	*x = Severity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Severity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Severity) ProtoMessage() {}

func (x *Severity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Severity.ProtoReflect.Descriptor instead.
func (*Severity) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{11}
}

func (x *Severity) GetSeverity() Severity_SeverityEnum {
	if x != nil {
		return x.Severity
	}
	return Severity_UNSPECIFIED
}

func (x *Severity) GetCvssV2() *CVSS {
	if x != nil {
		return x.CvssV2
	}
	return nil
}

func (x *Severity) GetCvssV3() *CVSS {
	if x != nil {
		return x.CvssV3
	}
	return nil
}

type CVSS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseScore          float32 `protobuf:"fixed32,1,opt,name=base_score,json=baseScore,proto3" json:"base_score,omitempty"`
	TemporalScore      float32 `protobuf:"fixed32,2,opt,name=temporal_score,json=temporalScore,proto3" json:"temporal_score,omitempty"`
	EnvironmentalScore float32 `protobuf:"fixed32,3,opt,name=environmental_score,json=environmentalScore,proto3" json:"environmental_score,omitempty"`
}

func (x *CVSS) Reset() {
	*x = CVSS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVSS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVSS) ProtoMessage() {}

func (x *CVSS) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVSS.ProtoReflect.Descriptor instead.
func (*CVSS) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{12}
}

func (x *CVSS) GetBaseScore() float32 {
	if x != nil {
		return x.BaseScore
	}
	return 0
}

func (x *CVSS) GetTemporalScore() float32 {
	if x != nil {
		return x.TemporalScore
	}
	return 0
}

func (x *CVSS) GetEnvironmentalScore() float32 {
	if x != nil {
		return x.EnvironmentalScore
	}
	return 0
}

type TargetDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The software affected by the finding.
	Inventory *Inventory `protobuf:"bytes,1,opt,name=inventory,proto3" json:"inventory,omitempty"`
	// Location of vulnerable files not related to the inventory,
	// e.g. config files with misconfigurations.
	Location []string `protobuf:"bytes,3,rep,name=location,proto3" json:"location,omitempty"`
}

func (x *TargetDetails) Reset() {
	*x = TargetDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetDetails) ProtoMessage() {}

func (x *TargetDetails) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetDetails.ProtoReflect.Descriptor instead.
func (*TargetDetails) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{13}
}

func (x *TargetDetails) GetInventory() *Inventory {
	if x != nil {
		return x.Inventory
	}
	return nil
}

func (x *TargetDetails) GetLocation() []string {
	if x != nil {
		return x.Location
	}
	return nil
}

// The additional data found in python packages.
type PythonPackageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Author      string `protobuf:"bytes,1,opt,name=author,proto3" json:"author,omitempty"`
	AuthorEmail string `protobuf:"bytes,2,opt,name=author_email,json=authorEmail,proto3" json:"author_email,omitempty"`
}

func (x *PythonPackageMetadata) Reset() {
	*x = PythonPackageMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PythonPackageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PythonPackageMetadata) ProtoMessage() {}

func (x *PythonPackageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PythonPackageMetadata.ProtoReflect.Descriptor instead.
func (*PythonPackageMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{14}
}

func (x *PythonPackageMetadata) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *PythonPackageMetadata) GetAuthorEmail() string {
	if x != nil {
		return x.AuthorEmail
	}
	return ""
}

// The additional data found in npm packages.
type JavascriptPackageJSONMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Author       string   `protobuf:"bytes,1,opt,name=author,proto3" json:"author,omitempty"`
	Maintainers  []string `protobuf:"bytes,2,rep,name=maintainers,proto3" json:"maintainers,omitempty"`
	Contributors []string `protobuf:"bytes,3,rep,name=contributors,proto3" json:"contributors,omitempty"`
}

func (x *JavascriptPackageJSONMetadata) Reset() {
	*x = JavascriptPackageJSONMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JavascriptPackageJSONMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JavascriptPackageJSONMetadata) ProtoMessage() {}

func (x *JavascriptPackageJSONMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JavascriptPackageJSONMetadata.ProtoReflect.Descriptor instead.
func (*JavascriptPackageJSONMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{15}
}

func (x *JavascriptPackageJSONMetadata) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *JavascriptPackageJSONMetadata) GetMaintainers() []string {
	if x != nil {
		return x.Maintainers
	}
	return nil
}

func (x *JavascriptPackageJSONMetadata) GetContributors() []string {
	if x != nil {
		return x.Contributors
	}
	return nil
}

// The additional data found in APK packages.
type APKPackageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageName  string `protobuf:"bytes,1,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	OriginName   string `protobuf:"bytes,2,opt,name=origin_name,json=originName,proto3" json:"origin_name,omitempty"`
	OsId         string `protobuf:"bytes,3,opt,name=os_id,json=osId,proto3" json:"os_id,omitempty"`
	OsVersionId  string `protobuf:"bytes,4,opt,name=os_version_id,json=osVersionId,proto3" json:"os_version_id,omitempty"`
	Maintainer   string `protobuf:"bytes,5,opt,name=maintainer,proto3" json:"maintainer,omitempty"`
	Architecture string `protobuf:"bytes,6,opt,name=architecture,proto3" json:"architecture,omitempty"`
	License      string `protobuf:"bytes,7,opt,name=license,proto3" json:"license,omitempty"`
}

func (x *APKPackageMetadata) Reset() {
	*x = APKPackageMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APKPackageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APKPackageMetadata) ProtoMessage() {}

func (x *APKPackageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APKPackageMetadata.ProtoReflect.Descriptor instead.
func (*APKPackageMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{16}
}

func (x *APKPackageMetadata) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *APKPackageMetadata) GetOriginName() string {
	if x != nil {
		return x.OriginName
	}
	return ""
}

func (x *APKPackageMetadata) GetOsId() string {
	if x != nil {
		return x.OsId
	}
	return ""
}

func (x *APKPackageMetadata) GetOsVersionId() string {
	if x != nil {
		return x.OsVersionId
	}
	return ""
}

func (x *APKPackageMetadata) GetMaintainer() string {
	if x != nil {
		return x.Maintainer
	}
	return ""
}

func (x *APKPackageMetadata) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *APKPackageMetadata) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

// The additional data found in DPKG packages.
// Next ID: 11
type DPKGPackageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageName       string `protobuf:"bytes,1,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	SourceName        string `protobuf:"bytes,2,opt,name=source_name,json=sourceName,proto3" json:"source_name,omitempty"`
	SourceVersion     string `protobuf:"bytes,3,opt,name=source_version,json=sourceVersion,proto3" json:"source_version,omitempty"`
	PackageVersion    string `protobuf:"bytes,4,opt,name=package_version,json=packageVersion,proto3" json:"package_version,omitempty"`
	OsId              string `protobuf:"bytes,5,opt,name=os_id,json=osId,proto3" json:"os_id,omitempty"`
	OsVersionCodename string `protobuf:"bytes,6,opt,name=os_version_codename,json=osVersionCodename,proto3" json:"os_version_codename,omitempty"`
	OsVersionId       string `protobuf:"bytes,7,opt,name=os_version_id,json=osVersionId,proto3" json:"os_version_id,omitempty"`
	Maintainer        string `protobuf:"bytes,8,opt,name=maintainer,proto3" json:"maintainer,omitempty"`
	Architecture      string `protobuf:"bytes,9,opt,name=architecture,proto3" json:"architecture,omitempty"`
	Status            string `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DPKGPackageMetadata) Reset() {
	*x = DPKGPackageMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DPKGPackageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DPKGPackageMetadata) ProtoMessage() {}

func (x *DPKGPackageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DPKGPackageMetadata.ProtoReflect.Descriptor instead.
func (*DPKGPackageMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{17}
}

func (x *DPKGPackageMetadata) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *DPKGPackageMetadata) GetSourceName() string {
	if x != nil {
		return x.SourceName
	}
	return ""
}

func (x *DPKGPackageMetadata) GetSourceVersion() string {
	if x != nil {
		return x.SourceVersion
	}
	return ""
}

func (x *DPKGPackageMetadata) GetPackageVersion() string {
	if x != nil {
		return x.PackageVersion
	}
	return ""
}

func (x *DPKGPackageMetadata) GetOsId() string {
	if x != nil {
		return x.OsId
	}
	return ""
}

func (x *DPKGPackageMetadata) GetOsVersionCodename() string {
	if x != nil {
		return x.OsVersionCodename
	}
	return ""
}

func (x *DPKGPackageMetadata) GetOsVersionId() string {
	if x != nil {
		return x.OsVersionId
	}
	return ""
}

func (x *DPKGPackageMetadata) GetMaintainer() string {
	if x != nil {
		return x.Maintainer
	}
	return ""
}

func (x *DPKGPackageMetadata) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *DPKGPackageMetadata) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// The additional data found in RPM packages.
type RPMPackageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageName  string `protobuf:"bytes,1,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	SourceRpm    string `protobuf:"bytes,2,opt,name=source_rpm,json=sourceRpm,proto3" json:"source_rpm,omitempty"`
	Epoch        int32  `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	OsId         string `protobuf:"bytes,4,opt,name=os_id,json=osId,proto3" json:"os_id,omitempty"`
	OsVersionId  string `protobuf:"bytes,5,opt,name=os_version_id,json=osVersionId,proto3" json:"os_version_id,omitempty"`
	OsBuildId    string `protobuf:"bytes,6,opt,name=os_build_id,json=osBuildId,proto3" json:"os_build_id,omitempty"`
	OsName       string `protobuf:"bytes,7,opt,name=os_name,json=osName,proto3" json:"os_name,omitempty"`
	Vendor       string `protobuf:"bytes,8,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Architecture string `protobuf:"bytes,9,opt,name=architecture,proto3" json:"architecture,omitempty"`
	License      string `protobuf:"bytes,10,opt,name=license,proto3" json:"license,omitempty"`
}

func (x *RPMPackageMetadata) Reset() {
	*x = RPMPackageMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RPMPackageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPMPackageMetadata) ProtoMessage() {}

func (x *RPMPackageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPMPackageMetadata.ProtoReflect.Descriptor instead.
func (*RPMPackageMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{18}
}

func (x *RPMPackageMetadata) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *RPMPackageMetadata) GetSourceRpm() string {
	if x != nil {
		return x.SourceRpm
	}
	return ""
}

func (x *RPMPackageMetadata) GetEpoch() int32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *RPMPackageMetadata) GetOsId() string {
	if x != nil {
		return x.OsId
	}
	return ""
}

func (x *RPMPackageMetadata) GetOsVersionId() string {
	if x != nil {
		return x.OsVersionId
	}
	return ""
}

func (x *RPMPackageMetadata) GetOsBuildId() string {
	if x != nil {
		return x.OsBuildId
	}
	return ""
}

func (x *RPMPackageMetadata) GetOsName() string {
	if x != nil {
		return x.OsName
	}
	return ""
}

func (x *RPMPackageMetadata) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *RPMPackageMetadata) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *RPMPackageMetadata) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

// The additional data found in COS packages.
type COSPackageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version     string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Category    string `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	OsVersion   string `protobuf:"bytes,4,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	OsVersionId string `protobuf:"bytes,5,opt,name=os_version_id,json=osVersionId,proto3" json:"os_version_id,omitempty"`
}

func (x *COSPackageMetadata) Reset() {
	*x = COSPackageMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *COSPackageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*COSPackageMetadata) ProtoMessage() {}

func (x *COSPackageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use COSPackageMetadata.ProtoReflect.Descriptor instead.
func (*COSPackageMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{19}
}

func (x *COSPackageMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *COSPackageMetadata) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *COSPackageMetadata) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *COSPackageMetadata) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *COSPackageMetadata) GetOsVersionId() string {
	if x != nil {
		return x.OsVersionId
	}
	return ""
}

// The additional data found in PACMAN packages.
type PACMANPackageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageName         string `protobuf:"bytes,1,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	PackageVersion      string `protobuf:"bytes,2,opt,name=package_version,json=packageVersion,proto3" json:"package_version,omitempty"`
	OsId                string `protobuf:"bytes,3,opt,name=os_id,json=osId,proto3" json:"os_id,omitempty"`
	OsVersionId         string `protobuf:"bytes,4,opt,name=os_version_id,json=osVersionId,proto3" json:"os_version_id,omitempty"`
	PackageDescription  string `protobuf:"bytes,5,opt,name=package_description,json=packageDescription,proto3" json:"package_description,omitempty"`
	PackageDependencies string `protobuf:"bytes,6,opt,name=package_dependencies,json=packageDependencies,proto3" json:"package_dependencies,omitempty"`
}

func (x *PACMANPackageMetadata) Reset() {
	*x = PACMANPackageMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PACMANPackageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PACMANPackageMetadata) ProtoMessage() {}

func (x *PACMANPackageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PACMANPackageMetadata.ProtoReflect.Descriptor instead.
func (*PACMANPackageMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{20}
}

func (x *PACMANPackageMetadata) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *PACMANPackageMetadata) GetPackageVersion() string {
	if x != nil {
		return x.PackageVersion
	}
	return ""
}

func (x *PACMANPackageMetadata) GetOsId() string {
	if x != nil {
		return x.OsId
	}
	return ""
}

func (x *PACMANPackageMetadata) GetOsVersionId() string {
	if x != nil {
		return x.OsVersionId
	}
	return ""
}

func (x *PACMANPackageMetadata) GetPackageDescription() string {
	if x != nil {
		return x.PackageDescription
	}
	return ""
}

func (x *PACMANPackageMetadata) GetPackageDependencies() string {
	if x != nil {
		return x.PackageDependencies
	}
	return ""
}

// The additional data found in Nix packages.
type NixPackageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageName       string `protobuf:"bytes,1,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	PackageVersion    string `protobuf:"bytes,2,opt,name=package_version,json=packageVersion,proto3" json:"package_version,omitempty"`
	PackageHash       string `protobuf:"bytes,3,opt,name=package_hash,json=packageHash,proto3" json:"package_hash,omitempty"`
	PackageOutput     string `protobuf:"bytes,4,opt,name=package_output,json=packageOutput,proto3" json:"package_output,omitempty"`
	OsId              string `protobuf:"bytes,5,opt,name=os_id,json=osId,proto3" json:"os_id,omitempty"`
	OsVersionCodename string `protobuf:"bytes,6,opt,name=os_version_codename,json=osVersionCodename,proto3" json:"os_version_codename,omitempty"`
	OsVersionId       string `protobuf:"bytes,7,opt,name=os_version_id,json=osVersionId,proto3" json:"os_version_id,omitempty"`
}

func (x *NixPackageMetadata) Reset() {
	*x = NixPackageMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NixPackageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NixPackageMetadata) ProtoMessage() {}

func (x *NixPackageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NixPackageMetadata.ProtoReflect.Descriptor instead.
func (*NixPackageMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{21}
}

func (x *NixPackageMetadata) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *NixPackageMetadata) GetPackageVersion() string {
	if x != nil {
		return x.PackageVersion
	}
	return ""
}

func (x *NixPackageMetadata) GetPackageHash() string {
	if x != nil {
		return x.PackageHash
	}
	return ""
}

func (x *NixPackageMetadata) GetPackageOutput() string {
	if x != nil {
		return x.PackageOutput
	}
	return ""
}

func (x *NixPackageMetadata) GetOsId() string {
	if x != nil {
		return x.OsId
	}
	return ""
}

func (x *NixPackageMetadata) GetOsVersionCodename() string {
	if x != nil {
		return x.OsVersionCodename
	}
	return ""
}

func (x *NixPackageMetadata) GetOsVersionId() string {
	if x != nil {
		return x.OsVersionId
	}
	return ""
}

// The additional data found in .NET deps json packages.
type DEPSJSONMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageName    string `protobuf:"bytes,1,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	PackageVersion string `protobuf:"bytes,2,opt,name=package_version,json=packageVersion,proto3" json:"package_version,omitempty"`
	Type           string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *DEPSJSONMetadata) Reset() {
	*x = DEPSJSONMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DEPSJSONMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DEPSJSONMetadata) ProtoMessage() {}

func (x *DEPSJSONMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DEPSJSONMetadata.ProtoReflect.Descriptor instead.
func (*DEPSJSONMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{22}
}

func (x *DEPSJSONMetadata) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *DEPSJSONMetadata) GetPackageVersion() string {
	if x != nil {
		return x.PackageVersion
	}
	return ""
}

func (x *DEPSJSONMetadata) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// The additional data found in SNAP packages.
type SNAPPackageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version           string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Grade             string   `protobuf:"bytes,3,opt,name=grade,proto3" json:"grade,omitempty"`
	Type              string   `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Architectures     []string `protobuf:"bytes,5,rep,name=architectures,proto3" json:"architectures,omitempty"`
	OsId              string   `protobuf:"bytes,6,opt,name=os_id,json=osId,proto3" json:"os_id,omitempty"`
	OsVersionCodename string   `protobuf:"bytes,7,opt,name=os_version_codename,json=osVersionCodename,proto3" json:"os_version_codename,omitempty"`
	OsVersionId       string   `protobuf:"bytes,8,opt,name=os_version_id,json=osVersionId,proto3" json:"os_version_id,omitempty"`
}

func (x *SNAPPackageMetadata) Reset() {
	*x = SNAPPackageMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SNAPPackageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SNAPPackageMetadata) ProtoMessage() {}

func (x *SNAPPackageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SNAPPackageMetadata.ProtoReflect.Descriptor instead.
func (*SNAPPackageMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{23}
}

func (x *SNAPPackageMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SNAPPackageMetadata) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SNAPPackageMetadata) GetGrade() string {
	if x != nil {
		return x.Grade
	}
	return ""
}

func (x *SNAPPackageMetadata) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SNAPPackageMetadata) GetArchitectures() []string {
	if x != nil {
		return x.Architectures
	}
	return nil
}

func (x *SNAPPackageMetadata) GetOsId() string {
	if x != nil {
		return x.OsId
	}
	return ""
}

func (x *SNAPPackageMetadata) GetOsVersionCodename() string {
	if x != nil {
		return x.OsVersionCodename
	}
	return ""
}

func (x *SNAPPackageMetadata) GetOsVersionId() string {
	if x != nil {
		return x.OsVersionId
	}
	return ""
}

// The additional data found in portage packages.
type PortagePackageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageName    string `protobuf:"bytes,1,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	PackageVersion string `protobuf:"bytes,2,opt,name=package_version,json=packageVersion,proto3" json:"package_version,omitempty"`
	OsId           string `protobuf:"bytes,3,opt,name=os_id,json=osId,proto3" json:"os_id,omitempty"`
	OsVersionId    string `protobuf:"bytes,4,opt,name=os_version_id,json=osVersionId,proto3" json:"os_version_id,omitempty"`
}

func (x *PortagePackageMetadata) Reset() {
	*x = PortagePackageMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortagePackageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortagePackageMetadata) ProtoMessage() {}

func (x *PortagePackageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortagePackageMetadata.ProtoReflect.Descriptor instead.
func (*PortagePackageMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{24}
}

func (x *PortagePackageMetadata) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *PortagePackageMetadata) GetPackageVersion() string {
	if x != nil {
		return x.PackageVersion
	}
	return ""
}

func (x *PortagePackageMetadata) GetOsId() string {
	if x != nil {
		return x.OsId
	}
	return ""
}

func (x *PortagePackageMetadata) GetOsVersionId() string {
	if x != nil {
		return x.OsVersionId
	}
	return ""
}

// The additional data found in Flatpak packages.
type FlatpakPackageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageName    string `protobuf:"bytes,1,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	PackageId      string `protobuf:"bytes,2,opt,name=package_id,json=packageId,proto3" json:"package_id,omitempty"`
	PackageVersion string `protobuf:"bytes,3,opt,name=package_version,json=packageVersion,proto3" json:"package_version,omitempty"`
	ReleaseDate    string `protobuf:"bytes,4,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	OsName         string `protobuf:"bytes,5,opt,name=os_name,json=osName,proto3" json:"os_name,omitempty"`
	OsId           string `protobuf:"bytes,6,opt,name=os_id,json=osId,proto3" json:"os_id,omitempty"`
	OsVersionId    string `protobuf:"bytes,7,opt,name=os_version_id,json=osVersionId,proto3" json:"os_version_id,omitempty"`
	OsBuildId      string `protobuf:"bytes,8,opt,name=os_build_id,json=osBuildId,proto3" json:"os_build_id,omitempty"`
	Developer      string `protobuf:"bytes,9,opt,name=developer,proto3" json:"developer,omitempty"`
}

func (x *FlatpakPackageMetadata) Reset() {
	*x = FlatpakPackageMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlatpakPackageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlatpakPackageMetadata) ProtoMessage() {}

func (x *FlatpakPackageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlatpakPackageMetadata.ProtoReflect.Descriptor instead.
func (*FlatpakPackageMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{25}
}

func (x *FlatpakPackageMetadata) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *FlatpakPackageMetadata) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

func (x *FlatpakPackageMetadata) GetPackageVersion() string {
	if x != nil {
		return x.PackageVersion
	}
	return ""
}

func (x *FlatpakPackageMetadata) GetReleaseDate() string {
	if x != nil {
		return x.ReleaseDate
	}
	return ""
}

func (x *FlatpakPackageMetadata) GetOsName() string {
	if x != nil {
		return x.OsName
	}
	return ""
}

func (x *FlatpakPackageMetadata) GetOsId() string {
	if x != nil {
		return x.OsId
	}
	return ""
}

func (x *FlatpakPackageMetadata) GetOsVersionId() string {
	if x != nil {
		return x.OsVersionId
	}
	return ""
}

func (x *FlatpakPackageMetadata) GetOsBuildId() string {
	if x != nil {
		return x.OsBuildId
	}
	return ""
}

func (x *FlatpakPackageMetadata) GetDeveloper() string {
	if x != nil {
		return x.Developer
	}
	return ""
}

// The additional data found in MODULE packages.
type KernelModuleMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageName                    string `protobuf:"bytes,1,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	PackageVersion                 string `protobuf:"bytes,2,opt,name=package_version,json=packageVersion,proto3" json:"package_version,omitempty"`
	PackageVermagic                string `protobuf:"bytes,3,opt,name=package_vermagic,json=packageVermagic,proto3" json:"package_vermagic,omitempty"`
	PackageSourceVersionIdentifier string `protobuf:"bytes,4,opt,name=package_source_version_identifier,json=packageSourceVersionIdentifier,proto3" json:"package_source_version_identifier,omitempty"`
	OsId                           string `protobuf:"bytes,5,opt,name=os_id,json=osId,proto3" json:"os_id,omitempty"`
	OsVersionCodename              string `protobuf:"bytes,6,opt,name=os_version_codename,json=osVersionCodename,proto3" json:"os_version_codename,omitempty"`
	OsVersionId                    string `protobuf:"bytes,7,opt,name=os_version_id,json=osVersionId,proto3" json:"os_version_id,omitempty"`
	PackageAuthor                  string `protobuf:"bytes,8,opt,name=package_author,json=packageAuthor,proto3" json:"package_author,omitempty"`
}

func (x *KernelModuleMetadata) Reset() {
	*x = KernelModuleMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KernelModuleMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KernelModuleMetadata) ProtoMessage() {}

func (x *KernelModuleMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KernelModuleMetadata.ProtoReflect.Descriptor instead.
func (*KernelModuleMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{26}
}

func (x *KernelModuleMetadata) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *KernelModuleMetadata) GetPackageVersion() string {
	if x != nil {
		return x.PackageVersion
	}
	return ""
}

func (x *KernelModuleMetadata) GetPackageVermagic() string {
	if x != nil {
		return x.PackageVermagic
	}
	return ""
}

func (x *KernelModuleMetadata) GetPackageSourceVersionIdentifier() string {
	if x != nil {
		return x.PackageSourceVersionIdentifier
	}
	return ""
}

func (x *KernelModuleMetadata) GetOsId() string {
	if x != nil {
		return x.OsId
	}
	return ""
}

func (x *KernelModuleMetadata) GetOsVersionCodename() string {
	if x != nil {
		return x.OsVersionCodename
	}
	return ""
}

func (x *KernelModuleMetadata) GetOsVersionId() string {
	if x != nil {
		return x.OsVersionId
	}
	return ""
}

func (x *KernelModuleMetadata) GetPackageAuthor() string {
	if x != nil {
		return x.PackageAuthor
	}
	return ""
}

// The additional data found in Vmlinuz packages.
type VmlinuzMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version           string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Architecture      string `protobuf:"bytes,3,opt,name=architecture,proto3" json:"architecture,omitempty"`
	ExtendedVersion   string `protobuf:"bytes,4,opt,name=extended_version,json=extendedVersion,proto3" json:"extended_version,omitempty"`
	Format            string `protobuf:"bytes,5,opt,name=format,proto3" json:"format,omitempty"`
	SwapDevice        int32  `protobuf:"varint,6,opt,name=swap_device,json=swapDevice,proto3" json:"swap_device,omitempty"`
	RootDevice        int32  `protobuf:"varint,7,opt,name=root_device,json=rootDevice,proto3" json:"root_device,omitempty"`
	VideoMode         string `protobuf:"bytes,8,opt,name=video_mode,json=videoMode,proto3" json:"video_mode,omitempty"`
	OsId              string `protobuf:"bytes,9,opt,name=os_id,json=osId,proto3" json:"os_id,omitempty"`
	OsVersionCodename string `protobuf:"bytes,10,opt,name=os_version_codename,json=osVersionCodename,proto3" json:"os_version_codename,omitempty"`
	OsVersionId       string `protobuf:"bytes,11,opt,name=os_version_id,json=osVersionId,proto3" json:"os_version_id,omitempty"`
	RwRootFs          bool   `protobuf:"varint,12,opt,name=rw_root_fs,json=rwRootFs,proto3" json:"rw_root_fs,omitempty"`
}

func (x *VmlinuzMetadata) Reset() {
	*x = VmlinuzMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VmlinuzMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VmlinuzMetadata) ProtoMessage() {}

func (x *VmlinuzMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VmlinuzMetadata.ProtoReflect.Descriptor instead.
func (*VmlinuzMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{27}
}

func (x *VmlinuzMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VmlinuzMetadata) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *VmlinuzMetadata) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *VmlinuzMetadata) GetExtendedVersion() string {
	if x != nil {
		return x.ExtendedVersion
	}
	return ""
}

func (x *VmlinuzMetadata) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *VmlinuzMetadata) GetSwapDevice() int32 {
	if x != nil {
		return x.SwapDevice
	}
	return 0
}

func (x *VmlinuzMetadata) GetRootDevice() int32 {
	if x != nil {
		return x.RootDevice
	}
	return 0
}

func (x *VmlinuzMetadata) GetVideoMode() string {
	if x != nil {
		return x.VideoMode
	}
	return ""
}

func (x *VmlinuzMetadata) GetOsId() string {
	if x != nil {
		return x.OsId
	}
	return ""
}

func (x *VmlinuzMetadata) GetOsVersionCodename() string {
	if x != nil {
		return x.OsVersionCodename
	}
	return ""
}

func (x *VmlinuzMetadata) GetOsVersionId() string {
	if x != nil {
		return x.OsVersionId
	}
	return ""
}

func (x *VmlinuzMetadata) GetRwRootFs() bool {
	if x != nil {
		return x.RwRootFs
	}
	return false
}

// The additional data found in Mac Applications.
type MacAppsMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BundleDisplayName        string `protobuf:"bytes,1,opt,name=bundle_display_name,json=bundleDisplayName,proto3" json:"bundle_display_name,omitempty"`
	BundleIdentifier         string `protobuf:"bytes,2,opt,name=bundle_identifier,json=bundleIdentifier,proto3" json:"bundle_identifier,omitempty"`
	BundleShortVersionString string `protobuf:"bytes,3,opt,name=bundle_short_version_string,json=bundleShortVersionString,proto3" json:"bundle_short_version_string,omitempty"`
	BundleExecutable         string `protobuf:"bytes,4,opt,name=bundle_executable,json=bundleExecutable,proto3" json:"bundle_executable,omitempty"`
	BundleName               string `protobuf:"bytes,5,opt,name=bundle_name,json=bundleName,proto3" json:"bundle_name,omitempty"`
	BundlePackageType        string `protobuf:"bytes,6,opt,name=bundle_package_type,json=bundlePackageType,proto3" json:"bundle_package_type,omitempty"`
	BundleSignature          string `protobuf:"bytes,7,opt,name=bundle_signature,json=bundleSignature,proto3" json:"bundle_signature,omitempty"`
	BundleVersion            string `protobuf:"bytes,8,opt,name=bundle_version,json=bundleVersion,proto3" json:"bundle_version,omitempty"`
	ProductId                string `protobuf:"bytes,9,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	UpdateUrl                string `protobuf:"bytes,10,opt,name=update_url,json=updateUrl,proto3" json:"update_url,omitempty"`
}

func (x *MacAppsMetadata) Reset() {
	*x = MacAppsMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacAppsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacAppsMetadata) ProtoMessage() {}

func (x *MacAppsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacAppsMetadata.ProtoReflect.Descriptor instead.
func (*MacAppsMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{28}
}

func (x *MacAppsMetadata) GetBundleDisplayName() string {
	if x != nil {
		return x.BundleDisplayName
	}
	return ""
}

func (x *MacAppsMetadata) GetBundleIdentifier() string {
	if x != nil {
		return x.BundleIdentifier
	}
	return ""
}

func (x *MacAppsMetadata) GetBundleShortVersionString() string {
	if x != nil {
		return x.BundleShortVersionString
	}
	return ""
}

func (x *MacAppsMetadata) GetBundleExecutable() string {
	if x != nil {
		return x.BundleExecutable
	}
	return ""
}

func (x *MacAppsMetadata) GetBundleName() string {
	if x != nil {
		return x.BundleName
	}
	return ""
}

func (x *MacAppsMetadata) GetBundlePackageType() string {
	if x != nil {
		return x.BundlePackageType
	}
	return ""
}

func (x *MacAppsMetadata) GetBundleSignature() string {
	if x != nil {
		return x.BundleSignature
	}
	return ""
}

func (x *MacAppsMetadata) GetBundleVersion() string {
	if x != nil {
		return x.BundleVersion
	}
	return ""
}

func (x *MacAppsMetadata) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *MacAppsMetadata) GetUpdateUrl() string {
	if x != nil {
		return x.UpdateUrl
	}
	return ""
}

// The additional data for packages extracted from SPDX files.
type SPDXPackageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Purl *Purl    `protobuf:"bytes,1,opt,name=purl,proto3" json:"purl,omitempty"`
	Cpes []string `protobuf:"bytes,2,rep,name=cpes,proto3" json:"cpes,omitempty"`
}

func (x *SPDXPackageMetadata) Reset() {
	*x = SPDXPackageMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SPDXPackageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SPDXPackageMetadata) ProtoMessage() {}

func (x *SPDXPackageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SPDXPackageMetadata.ProtoReflect.Descriptor instead.
func (*SPDXPackageMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{29}
}

func (x *SPDXPackageMetadata) GetPurl() *Purl {
	if x != nil {
		return x.Purl
	}
	return nil
}

func (x *SPDXPackageMetadata) GetCpes() []string {
	if x != nil {
		return x.Cpes
	}
	return nil
}

// The additional data for packages extracted from CDX files.
type CDXPackageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Purl *Purl    `protobuf:"bytes,1,opt,name=purl,proto3" json:"purl,omitempty"`
	Cpes []string `protobuf:"bytes,2,rep,name=cpes,proto3" json:"cpes,omitempty"`
}

func (x *CDXPackageMetadata) Reset() {
	*x = CDXPackageMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDXPackageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDXPackageMetadata) ProtoMessage() {}

func (x *CDXPackageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDXPackageMetadata.ProtoReflect.Descriptor instead.
func (*CDXPackageMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{30}
}

func (x *CDXPackageMetadata) GetPurl() *Purl {
	if x != nil {
		return x.Purl
	}
	return nil
}

func (x *CDXPackageMetadata) GetCpes() []string {
	if x != nil {
		return x.Cpes
	}
	return nil
}

// The additional data found in Java JAR packages.
type JavaArchiveMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArtifactId string `protobuf:"bytes,2,opt,name=artifact_id,json=artifactId,proto3" json:"artifact_id,omitempty"`
	GroupId    string `protobuf:"bytes,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Sha1       string `protobuf:"bytes,4,opt,name=sha1,proto3" json:"sha1,omitempty"`
}

func (x *JavaArchiveMetadata) Reset() {
	*x = JavaArchiveMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JavaArchiveMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JavaArchiveMetadata) ProtoMessage() {}

func (x *JavaArchiveMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JavaArchiveMetadata.ProtoReflect.Descriptor instead.
func (*JavaArchiveMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{31}
}

func (x *JavaArchiveMetadata) GetArtifactId() string {
	if x != nil {
		return x.ArtifactId
	}
	return ""
}

func (x *JavaArchiveMetadata) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *JavaArchiveMetadata) GetSha1() string {
	if x != nil {
		return x.Sha1
	}
	return ""
}

// The additional data found in Java lockfiles.
type JavaLockfileMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArtifactId   string   `protobuf:"bytes,1,opt,name=artifact_id,json=artifactId,proto3" json:"artifact_id,omitempty"`
	GroupId      string   `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	DepGroupVals []string `protobuf:"bytes,3,rep,name=dep_group_vals,json=depGroupVals,proto3" json:"dep_group_vals,omitempty"`
}

func (x *JavaLockfileMetadata) Reset() {
	*x = JavaLockfileMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JavaLockfileMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JavaLockfileMetadata) ProtoMessage() {}

func (x *JavaLockfileMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JavaLockfileMetadata.ProtoReflect.Descriptor instead.
func (*JavaLockfileMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{32}
}

func (x *JavaLockfileMetadata) GetArtifactId() string {
	if x != nil {
		return x.ArtifactId
	}
	return ""
}

func (x *JavaLockfileMetadata) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *JavaLockfileMetadata) GetDepGroupVals() []string {
	if x != nil {
		return x.DepGroupVals
	}
	return nil
}

// The additional data for packages extracted by an OSV extractor wrapper.
type OSVPackageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PurlType  string `protobuf:"bytes,1,opt,name=purl_type,json=purlType,proto3" json:"purl_type,omitempty"`
	Commit    string `protobuf:"bytes,2,opt,name=commit,proto3" json:"commit,omitempty"`
	Ecosystem string `protobuf:"bytes,3,opt,name=ecosystem,proto3" json:"ecosystem,omitempty"`
	CompareAs string `protobuf:"bytes,4,opt,name=compare_as,json=compareAs,proto3" json:"compare_as,omitempty"`
}

func (x *OSVPackageMetadata) Reset() {
	*x = OSVPackageMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OSVPackageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSVPackageMetadata) ProtoMessage() {}

func (x *OSVPackageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSVPackageMetadata.ProtoReflect.Descriptor instead.
func (*OSVPackageMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{33}
}

func (x *OSVPackageMetadata) GetPurlType() string {
	if x != nil {
		return x.PurlType
	}
	return ""
}

func (x *OSVPackageMetadata) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *OSVPackageMetadata) GetEcosystem() string {
	if x != nil {
		return x.Ecosystem
	}
	return ""
}

func (x *OSVPackageMetadata) GetCompareAs() string {
	if x != nil {
		return x.CompareAs
	}
	return ""
}

type PythonRequirementsMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HashCheckingModeValues []string `protobuf:"bytes,1,rep,name=hash_checking_mode_values,json=hashCheckingModeValues,proto3" json:"hash_checking_mode_values,omitempty"`
	VersionComparator      string   `protobuf:"bytes,2,opt,name=version_comparator,json=versionComparator,proto3" json:"version_comparator,omitempty"`
}

func (x *PythonRequirementsMetadata) Reset() {
	*x = PythonRequirementsMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PythonRequirementsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PythonRequirementsMetadata) ProtoMessage() {}

func (x *PythonRequirementsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PythonRequirementsMetadata.ProtoReflect.Descriptor instead.
func (*PythonRequirementsMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{34}
}

func (x *PythonRequirementsMetadata) GetHashCheckingModeValues() []string {
	if x != nil {
		return x.HashCheckingModeValues
	}
	return nil
}

func (x *PythonRequirementsMetadata) GetVersionComparator() string {
	if x != nil {
		return x.VersionComparator
	}
	return ""
}

type ContainerdContainerMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceName string `protobuf:"bytes,1,opt,name=namespace_name,json=namespaceName,proto3" json:"namespace_name,omitempty"`
	ImageName     string `protobuf:"bytes,2,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	ImageDigest   string `protobuf:"bytes,3,opt,name=image_digest,json=imageDigest,proto3" json:"image_digest,omitempty"`
	Runtime       string `protobuf:"bytes,4,opt,name=runtime,proto3" json:"runtime,omitempty"`
	Pid           int32  `protobuf:"varint,5,opt,name=pid,proto3" json:"pid,omitempty"`
	Snapshotter   string `protobuf:"bytes,6,opt,name=snapshotter,proto3" json:"snapshotter,omitempty"`
	SnapshotKey   string `protobuf:"bytes,7,opt,name=snapshot_key,json=snapshotKey,proto3" json:"snapshot_key,omitempty"`
	LowerDir      string `protobuf:"bytes,8,opt,name=lower_dir,json=lowerDir,proto3" json:"lower_dir,omitempty"`
	UpperDir      string `protobuf:"bytes,9,opt,name=upper_dir,json=upperDir,proto3" json:"upper_dir,omitempty"`
	WorkDir       string `protobuf:"bytes,10,opt,name=work_dir,json=workDir,proto3" json:"work_dir,omitempty"`
	Id            string `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ContainerdContainerMetadata) Reset() {
	*x = ContainerdContainerMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerdContainerMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerdContainerMetadata) ProtoMessage() {}

func (x *ContainerdContainerMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerdContainerMetadata.ProtoReflect.Descriptor instead.
func (*ContainerdContainerMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{35}
}

func (x *ContainerdContainerMetadata) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *ContainerdContainerMetadata) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *ContainerdContainerMetadata) GetImageDigest() string {
	if x != nil {
		return x.ImageDigest
	}
	return ""
}

func (x *ContainerdContainerMetadata) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *ContainerdContainerMetadata) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ContainerdContainerMetadata) GetSnapshotter() string {
	if x != nil {
		return x.Snapshotter
	}
	return ""
}

func (x *ContainerdContainerMetadata) GetSnapshotKey() string {
	if x != nil {
		return x.SnapshotKey
	}
	return ""
}

func (x *ContainerdContainerMetadata) GetLowerDir() string {
	if x != nil {
		return x.LowerDir
	}
	return ""
}

func (x *ContainerdContainerMetadata) GetUpperDir() string {
	if x != nil {
		return x.UpperDir
	}
	return ""
}

func (x *ContainerdContainerMetadata) GetWorkDir() string {
	if x != nil {
		return x.WorkDir
	}
	return ""
}

func (x *ContainerdContainerMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ContainerdRuntimeContainerMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceName string `protobuf:"bytes,1,opt,name=namespace_name,json=namespaceName,proto3" json:"namespace_name,omitempty"`
	ImageName     string `protobuf:"bytes,2,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	ImageDigest   string `protobuf:"bytes,3,opt,name=image_digest,json=imageDigest,proto3" json:"image_digest,omitempty"`
	Runtime       string `protobuf:"bytes,4,opt,name=runtime,proto3" json:"runtime,omitempty"`
	Id            string `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	Pid           int32  `protobuf:"varint,6,opt,name=pid,proto3" json:"pid,omitempty"`
	RootfsPath    string `protobuf:"bytes,7,opt,name=rootfs_path,json=rootfsPath,proto3" json:"rootfs_path,omitempty"`
}

func (x *ContainerdRuntimeContainerMetadata) Reset() {
	*x = ContainerdRuntimeContainerMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerdRuntimeContainerMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerdRuntimeContainerMetadata) ProtoMessage() {}

func (x *ContainerdRuntimeContainerMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerdRuntimeContainerMetadata.ProtoReflect.Descriptor instead.
func (*ContainerdRuntimeContainerMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{36}
}

func (x *ContainerdRuntimeContainerMetadata) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *ContainerdRuntimeContainerMetadata) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *ContainerdRuntimeContainerMetadata) GetImageDigest() string {
	if x != nil {
		return x.ImageDigest
	}
	return ""
}

func (x *ContainerdRuntimeContainerMetadata) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *ContainerdRuntimeContainerMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ContainerdRuntimeContainerMetadata) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ContainerdRuntimeContainerMetadata) GetRootfsPath() string {
	if x != nil {
		return x.RootfsPath
	}
	return ""
}

type WindowsOSVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Product     string `protobuf:"bytes,1,opt,name=product,proto3" json:"product,omitempty"`
	FullVersion string `protobuf:"bytes,2,opt,name=full_version,json=fullVersion,proto3" json:"full_version,omitempty"`
}

func (x *WindowsOSVersion) Reset() {
	*x = WindowsOSVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowsOSVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowsOSVersion) ProtoMessage() {}

func (x *WindowsOSVersion) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowsOSVersion.ProtoReflect.Descriptor instead.
func (*WindowsOSVersion) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{37}
}

func (x *WindowsOSVersion) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *WindowsOSVersion) GetFullVersion() string {
	if x != nil {
		return x.FullVersion
	}
	return ""
}

// The additional data found in Homebrew packages.
type HomebrewPackageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HomebrewPackageMetadata) Reset() {
	*x = HomebrewPackageMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_scan_result_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomebrewPackageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomebrewPackageMetadata) ProtoMessage() {}

func (x *HomebrewPackageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomebrewPackageMetadata.ProtoReflect.Descriptor instead.
func (*HomebrewPackageMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{38}
}

var File_proto_scan_result_proto protoreflect.FileDescriptor

var file_proto_scan_result_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x63, 0x61, 0x6c, 0x69,
	0x62, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xe5, 0x02, 0x0a, 0x0a, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x0b, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x08, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x0a,
	0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x55, 0x0a,
	0x0e, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x03, 0x22, 0x69, 0x0a, 0x0c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x63, 0x61,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xb9, 0x13, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0b, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x70,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x63, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x2e, 0x50, 0x75, 0x72, 0x6c, 0x52, 0x04, 0x70, 0x75, 0x72, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x49, 0x0a, 0x0f, 0x70, 0x79, 0x74, 0x68,
	0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x50, 0x79, 0x74, 0x68,
	0x6f, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x59, 0x0a, 0x13, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x4a, 0x61, 0x76, 0x61, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4a, 0x53, 0x4f, 0x4e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x12, 0x6a, 0x61, 0x76, 0x61,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40,
	0x0a, 0x0c, 0x61, 0x70, 0x6b, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x41,
	0x50, 0x4b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x70, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x43, 0x0a, 0x0d, 0x64, 0x70, 0x6b, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x2e, 0x44, 0x50, 0x4b, 0x47, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x70, 0x6b, 0x67, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0c, 0x72, 0x70, 0x6d, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x52, 0x50, 0x4d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x70, 0x6d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x6f, 0x73, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x43, 0x4f, 0x53, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f,
	0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x11, 0x64, 0x65, 0x70,
	0x73, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x44,
	0x45, 0x50, 0x53, 0x4a, 0x53, 0x4f, 0x4e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x10, 0x64, 0x65, 0x70, 0x73, 0x6a, 0x73, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0d, 0x73, 0x70, 0x64, 0x78, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x50, 0x44, 0x58, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x70, 0x64, 0x78,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x15, 0x6a, 0x61, 0x76, 0x61,
	0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x2e, 0x4a, 0x61, 0x76, 0x61, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x13, 0x6a, 0x61, 0x76, 0x61, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x55, 0x0a, 0x16,
	0x6a, 0x61, 0x76, 0x61, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x4a, 0x61, 0x76, 0x61, 0x4c, 0x6f, 0x63, 0x6b, 0x66,
	0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x14, 0x6a,
	0x61, 0x76, 0x61, 0x4c, 0x6f, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x0f, 0x70, 0x61, 0x63, 0x6d, 0x61, 0x6e, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x50, 0x41, 0x43, 0x4d, 0x41, 0x4e, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0e,
	0x70, 0x61, 0x63, 0x6d, 0x61, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40,
	0x0a, 0x0c, 0x6e, 0x69, 0x78, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x4e,
	0x69, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x69, 0x78, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x55, 0x0a, 0x16, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x14, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x10, 0x76, 0x6d, 0x6c, 0x69, 0x6e,
	0x75, 0x7a, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x56, 0x6d, 0x6c, 0x69,
	0x6e, 0x75, 0x7a, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0f, 0x76,
	0x6d, 0x6c, 0x69, 0x6e, 0x75, 0x7a, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4c,
	0x0a, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69,
	0x62, 0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x67, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x6f, 0x72,
	0x74, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0c,
	0x6f, 0x73, 0x76, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x4f, 0x53, 0x56,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x0b, 0x6f, 0x73, 0x76, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x67,
	0x0a, 0x1c, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x50,
	0x79, 0x74, 0x68, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x1a, 0x70, 0x79, 0x74,
	0x68, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x6a, 0x0a, 0x1d, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x4e, 0x41, 0x50, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a, 0x10, 0x66, 0x6c, 0x61, 0x74,
	0x70, 0x61, 0x6b, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x46, 0x6c, 0x61,
	0x74, 0x70, 0x61, 0x6b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x6c, 0x61, 0x74, 0x70, 0x61, 0x6b, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x11, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x70,
	0x70, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x4d, 0x61, 0x63, 0x41,
	0x70, 0x70, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0f, 0x6d,
	0x61, 0x63, 0x41, 0x70, 0x70, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x80,
	0x01, 0x0a, 0x25, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x5f, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x64, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x22, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x64, 0x78, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x2e, 0x43, 0x44, 0x58, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x64, 0x78, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x5a, 0x0a, 0x1b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x5f, 0x6f,
	0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69,
	0x62, 0x72, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x4f, 0x53, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x18, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x4f, 0x73,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x4f, 0x0a, 0x11, 0x68, 0x6f, 0x6d, 0x65, 0x62, 0x72, 0x65, 0x77, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x62, 0x72, 0x65, 0x77, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x10,
	0x68, 0x6f, 0x6d, 0x65, 0x62, 0x72, 0x65, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x43, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x1c, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x22, 0x60, 0x0a, 0x0e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x53, 0x49, 0x44, 0x45,
	0x5f, 0x4f, 0x53, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x49, 0x4e, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x44, 0x49,
	0x52, 0x10, 0x03, 0x42, 0x0a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4a,
	0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x42, 0x0a, 0x14, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22,
	0x7b, 0x0a, 0x0c, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x66, 0x66, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x22, 0xc8, 0x01, 0x0a,
	0x04, 0x50, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0a, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x70, 0x61, 0x74, 0x68, 0x22, 0x33, 0x0a, 0x09, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x92, 0x01, 0x0a,
	0x07, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x03, 0x61, 0x64, 0x76, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e,
	0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x52, 0x03, 0x61, 0x64, 0x76, 0x12, 0x2e, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x22, 0xa1, 0x02, 0x0a, 0x08, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x12, 0x23,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x2e, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x41, 0x64, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x03, 0x73, 0x65, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x03, 0x73, 0x65, 0x76, 0x22, 0x3b, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x49, 0x53, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x22, 0x48, 0x0a, 0x0a, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22,
	0xf1, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x07, 0x63, 0x76, 0x73, 0x73,
	0x5f, 0x76, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x63, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x2e, 0x43, 0x56, 0x53, 0x53, 0x52, 0x06, 0x63, 0x76, 0x73, 0x73, 0x56, 0x32,
	0x12, 0x26, 0x0a, 0x07, 0x63, 0x76, 0x73, 0x73, 0x5f, 0x76, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x43, 0x56, 0x53, 0x53,
	0x52, 0x06, 0x63, 0x76, 0x73, 0x73, 0x56, 0x33, 0x22, 0x59, 0x0a, 0x0c, 0x53, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x49, 0x4e,
	0x49, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x48,
	0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x10, 0x05, 0x22, 0x7d, 0x0a, 0x04, 0x43, 0x56, 0x53, 0x53, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x62, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x2f, 0x0a, 0x13, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x22, 0x5d, 0x0a, 0x0d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x52, 0x0a, 0x15, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x7d, 0x0a, 0x1d, 0x4a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x73, 0x22, 0xef, 0x01, 0x0a, 0x12, 0x41, 0x50, 0x4b, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x13, 0x0a, 0x05, 0x6f, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6f, 0x73, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x73, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x69, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61,
	0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x22, 0xee, 0x02, 0x0a, 0x13, 0x44, 0x50, 0x4b, 0x47, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x6f, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6f, 0x73, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x73, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x73, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb4, 0x02, 0x0a, 0x12, 0x52, 0x50, 0x4d, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x70, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x70, 0x6d,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x13, 0x0a, 0x05, 0x6f, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x73, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6f,
	0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0b, 0x6f, 0x73, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x22, 0xa1,
	0x01, 0x0a, 0x12, 0x43, 0x4f, 0x53, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x0a, 0x0d, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x80, 0x02, 0x0a, 0x15, 0x50, 0x41, 0x43, 0x4d, 0x41, 0x4e, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x6f, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x73, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x22, 0x93, 0x02, 0x0a, 0x12, 0x4e, 0x69, 0x78, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x6f, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6f, 0x73, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x73, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x73, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x10, 0x44,
	0x45, 0x50, 0x53, 0x4a, 0x53, 0x4f, 0x4e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xfc, 0x01, 0x0a, 0x13, 0x53, 0x4e, 0x41, 0x50, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x6f, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x73, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x73,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x73,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x9d,
	0x01, 0x0a, 0x16, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x67, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x6f, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x73, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x73,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xb6,
	0x02, 0x0a, 0x16, 0x46, 0x6c, 0x61, 0x74, 0x70, 0x61, 0x6b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x13, 0x0a, 0x05, 0x6f, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6f, 0x73, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x73,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x73, 0x5f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6f, 0x73, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x22, 0xe8, 0x02, 0x0a, 0x14, 0x4b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x6d, 0x61, 0x67, 0x69, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x56,
	0x65, 0x72, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x12, 0x49, 0x0a, 0x21, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x13, 0x0a, 0x05, 0x6f, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6f, 0x73, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x73, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x73, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x22, 0x8e, 0x03, 0x0a, 0x0f, 0x56, 0x6d, 0x6c, 0x69, 0x6e, 0x75, 0x7a, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x77, 0x61, 0x70, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x73, 0x77, 0x61, 0x70, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x72, 0x6f, 0x6f, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x13, 0x0a, 0x05,
	0x6f, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x73, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x72, 0x77, 0x5f, 0x72, 0x6f, 0x6f, 0x74,
	0x5f, 0x66, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x77, 0x52, 0x6f, 0x6f,
	0x74, 0x46, 0x73, 0x22, 0xbb, 0x03, 0x0a, 0x0f, 0x4d, 0x61, 0x63, 0x41, 0x70, 0x70, 0x73, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x1b, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x72,
	0x6c, 0x22, 0x4c, 0x0a, 0x13, 0x53, 0x50, 0x44, 0x58, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x04, 0x70, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x2e, 0x50, 0x75, 0x72, 0x6c, 0x52, 0x04, 0x70, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x63, 0x70, 0x65, 0x73, 0x22,
	0x4b, 0x0a, 0x12, 0x43, 0x44, 0x58, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x04, 0x70, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x50, 0x75,
	0x72, 0x6c, 0x52, 0x04, 0x70, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x70, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x63, 0x70, 0x65, 0x73, 0x22, 0x65, 0x0a, 0x13,
	0x4a, 0x61, 0x76, 0x61, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x68, 0x61, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x68, 0x61, 0x31, 0x22, 0x78, 0x0a, 0x14, 0x4a, 0x61, 0x76, 0x61, 0x4c, 0x6f, 0x63, 0x6b, 0x66,
	0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x64, 0x65, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x61, 0x6c, 0x73, 0x22, 0x86, 0x01,
	0x0a, 0x12, 0x4f, 0x53, 0x56, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x72, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x72, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x63, 0x6f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x63,
	0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x65, 0x5f, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x41, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x1a, 0x50, 0x79, 0x74, 0x68, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x19, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x68, 0x61, 0x73, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x2d, 0x0a, 0x12, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22,
	0xdc, 0x02, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x70, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x44, 0x69, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f,
	0x64, 0x69, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x70, 0x65, 0x72,
	0x44, 0x69, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x69, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x69, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xea,
	0x01, 0x0a, 0x22, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f,
	0x6f, 0x74, 0x66, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x6f, 0x6f, 0x74, 0x66, 0x73, 0x50, 0x61, 0x74, 0x68, 0x22, 0x4f, 0x0a, 0x10, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x4f, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x75, 0x6c,
	0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x66, 0x75, 0x6c, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x19, 0x0a, 0x17,
	0x48, 0x6f, 0x6d, 0x65, 0x62, 0x72, 0x65, 0x77, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x3f, 0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_scan_result_proto_rawDescOnce sync.Once
	file_proto_scan_result_proto_rawDescData = file_proto_scan_result_proto_rawDesc
)

func file_proto_scan_result_proto_rawDescGZIP() []byte {
	file_proto_scan_result_proto_rawDescOnce.Do(func() {
		file_proto_scan_result_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_scan_result_proto_rawDescData)
	})
	return file_proto_scan_result_proto_rawDescData
}

var file_proto_scan_result_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_proto_scan_result_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_proto_scan_result_proto_goTypes = []interface{}{
	(ScanStatus_ScanStatusEnum)(0),             // 0: scalibr.ScanStatus.ScanStatusEnum
	(Inventory_AnnotationEnum)(0),              // 1: scalibr.Inventory.AnnotationEnum
	(Advisory_TypeEnum)(0),                     // 2: scalibr.Advisory.TypeEnum
	(Severity_SeverityEnum)(0),                 // 3: scalibr.Severity.SeverityEnum
	(*ScanResult)(nil),                         // 4: scalibr.ScanResult
	(*ScanStatus)(nil),                         // 5: scalibr.ScanStatus
	(*PluginStatus)(nil),                       // 6: scalibr.PluginStatus
	(*Inventory)(nil),                          // 7: scalibr.Inventory
	(*SourceCodeIdentifier)(nil),               // 8: scalibr.SourceCodeIdentifier
	(*LayerDetails)(nil),                       // 9: scalibr.LayerDetails
	(*Purl)(nil),                               // 10: scalibr.Purl
	(*Qualifier)(nil),                          // 11: scalibr.Qualifier
	(*Finding)(nil),                            // 12: scalibr.Finding
	(*Advisory)(nil),                           // 13: scalibr.Advisory
	(*AdvisoryId)(nil),                         // 14: scalibr.AdvisoryId
	(*Severity)(nil),                           // 15: scalibr.Severity
	(*CVSS)(nil),                               // 16: scalibr.CVSS
	(*TargetDetails)(nil),                      // 17: scalibr.TargetDetails
	(*PythonPackageMetadata)(nil),              // 18: scalibr.PythonPackageMetadata
	(*JavascriptPackageJSONMetadata)(nil),      // 19: scalibr.JavascriptPackageJSONMetadata
	(*APKPackageMetadata)(nil),                 // 20: scalibr.APKPackageMetadata
	(*DPKGPackageMetadata)(nil),                // 21: scalibr.DPKGPackageMetadata
	(*RPMPackageMetadata)(nil),                 // 22: scalibr.RPMPackageMetadata
	(*COSPackageMetadata)(nil),                 // 23: scalibr.COSPackageMetadata
	(*PACMANPackageMetadata)(nil),              // 24: scalibr.PACMANPackageMetadata
	(*NixPackageMetadata)(nil),                 // 25: scalibr.NixPackageMetadata
	(*DEPSJSONMetadata)(nil),                   // 26: scalibr.DEPSJSONMetadata
	(*SNAPPackageMetadata)(nil),                // 27: scalibr.SNAPPackageMetadata
	(*PortagePackageMetadata)(nil),             // 28: scalibr.PortagePackageMetadata
	(*FlatpakPackageMetadata)(nil),             // 29: scalibr.FlatpakPackageMetadata
	(*KernelModuleMetadata)(nil),               // 30: scalibr.KernelModuleMetadata
	(*VmlinuzMetadata)(nil),                    // 31: scalibr.VmlinuzMetadata
	(*MacAppsMetadata)(nil),                    // 32: scalibr.MacAppsMetadata
	(*SPDXPackageMetadata)(nil),                // 33: scalibr.SPDXPackageMetadata
	(*CDXPackageMetadata)(nil),                 // 34: scalibr.CDXPackageMetadata
	(*JavaArchiveMetadata)(nil),                // 35: scalibr.JavaArchiveMetadata
	(*JavaLockfileMetadata)(nil),               // 36: scalibr.JavaLockfileMetadata
	(*OSVPackageMetadata)(nil),                 // 37: scalibr.OSVPackageMetadata
	(*PythonRequirementsMetadata)(nil),         // 38: scalibr.PythonRequirementsMetadata
	(*ContainerdContainerMetadata)(nil),        // 39: scalibr.ContainerdContainerMetadata
	(*ContainerdRuntimeContainerMetadata)(nil), // 40: scalibr.ContainerdRuntimeContainerMetadata
	(*WindowsOSVersion)(nil),                   // 41: scalibr.WindowsOSVersion
	(*HomebrewPackageMetadata)(nil),            // 42: scalibr.HomebrewPackageMetadata
	(*timestamppb.Timestamp)(nil),              // 43: google.protobuf.Timestamp
}
var file_proto_scan_result_proto_depIdxs = []int32{
	43, // 0: scalibr.ScanResult.start_time:type_name -> google.protobuf.Timestamp
	43, // 1: scalibr.ScanResult.end_time:type_name -> google.protobuf.Timestamp
	5,  // 2: scalibr.ScanResult.status:type_name -> scalibr.ScanStatus
	6,  // 3: scalibr.ScanResult.plugin_status:type_name -> scalibr.PluginStatus
	7,  // 4: scalibr.ScanResult.inventories:type_name -> scalibr.Inventory
	12, // 5: scalibr.ScanResult.findings:type_name -> scalibr.Finding
	0,  // 6: scalibr.ScanStatus.status:type_name -> scalibr.ScanStatus.ScanStatusEnum
	5,  // 7: scalibr.PluginStatus.status:type_name -> scalibr.ScanStatus
	8,  // 8: scalibr.Inventory.source_code:type_name -> scalibr.SourceCodeIdentifier
	10, // 9: scalibr.Inventory.purl:type_name -> scalibr.Purl
	18, // 10: scalibr.Inventory.python_metadata:type_name -> scalibr.PythonPackageMetadata
	19, // 11: scalibr.Inventory.javascript_metadata:type_name -> scalibr.JavascriptPackageJSONMetadata
	20, // 12: scalibr.Inventory.apk_metadata:type_name -> scalibr.APKPackageMetadata
	21, // 13: scalibr.Inventory.dpkg_metadata:type_name -> scalibr.DPKGPackageMetadata
	22, // 14: scalibr.Inventory.rpm_metadata:type_name -> scalibr.RPMPackageMetadata
	23, // 15: scalibr.Inventory.cos_metadata:type_name -> scalibr.COSPackageMetadata
	26, // 16: scalibr.Inventory.depsjson_metadata:type_name -> scalibr.DEPSJSONMetadata
	33, // 17: scalibr.Inventory.spdx_metadata:type_name -> scalibr.SPDXPackageMetadata
	35, // 18: scalibr.Inventory.java_archive_metadata:type_name -> scalibr.JavaArchiveMetadata
	36, // 19: scalibr.Inventory.java_lockfile_metadata:type_name -> scalibr.JavaLockfileMetadata
	24, // 20: scalibr.Inventory.pacman_metadata:type_name -> scalibr.PACMANPackageMetadata
	25, // 21: scalibr.Inventory.nix_metadata:type_name -> scalibr.NixPackageMetadata
	30, // 22: scalibr.Inventory.kernel_module_metadata:type_name -> scalibr.KernelModuleMetadata
	31, // 23: scalibr.Inventory.vmlinuz_metadata:type_name -> scalibr.VmlinuzMetadata
	28, // 24: scalibr.Inventory.portage_metadata:type_name -> scalibr.PortagePackageMetadata
	37, // 25: scalibr.Inventory.osv_metadata:type_name -> scalibr.OSVPackageMetadata
	38, // 26: scalibr.Inventory.python_requirements_metadata:type_name -> scalibr.PythonRequirementsMetadata
	39, // 27: scalibr.Inventory.containerd_container_metadata:type_name -> scalibr.ContainerdContainerMetadata
	27, // 28: scalibr.Inventory.snap_metadata:type_name -> scalibr.SNAPPackageMetadata
	29, // 29: scalibr.Inventory.flatpak_metadata:type_name -> scalibr.FlatpakPackageMetadata
	32, // 30: scalibr.Inventory.mac_apps_metadata:type_name -> scalibr.MacAppsMetadata
	40, // 31: scalibr.Inventory.containerd_runtime_container_metadata:type_name -> scalibr.ContainerdRuntimeContainerMetadata
	34, // 32: scalibr.Inventory.cdx_metadata:type_name -> scalibr.CDXPackageMetadata
	41, // 33: scalibr.Inventory.windows_os_version_metadata:type_name -> scalibr.WindowsOSVersion
	42, // 34: scalibr.Inventory.homebrew_metadata:type_name -> scalibr.HomebrewPackageMetadata
	1,  // 35: scalibr.Inventory.annotations:type_name -> scalibr.Inventory.AnnotationEnum
	9,  // 36: scalibr.Inventory.layer_details:type_name -> scalibr.LayerDetails
	11, // 37: scalibr.Purl.qualifiers:type_name -> scalibr.Qualifier
	13, // 38: scalibr.Finding.adv:type_name -> scalibr.Advisory
	17, // 39: scalibr.Finding.target:type_name -> scalibr.TargetDetails
	14, // 40: scalibr.Advisory.id:type_name -> scalibr.AdvisoryId
	2,  // 41: scalibr.Advisory.type:type_name -> scalibr.Advisory.TypeEnum
	15, // 42: scalibr.Advisory.sev:type_name -> scalibr.Severity
	3,  // 43: scalibr.Severity.severity:type_name -> scalibr.Severity.SeverityEnum
	16, // 44: scalibr.Severity.cvss_v2:type_name -> scalibr.CVSS
	16, // 45: scalibr.Severity.cvss_v3:type_name -> scalibr.CVSS
	7,  // 46: scalibr.TargetDetails.inventory:type_name -> scalibr.Inventory
	10, // 47: scalibr.SPDXPackageMetadata.purl:type_name -> scalibr.Purl
	10, // 48: scalibr.CDXPackageMetadata.purl:type_name -> scalibr.Purl
	49, // [49:49] is the sub-list for method output_type
	49, // [49:49] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_proto_scan_result_proto_init() }
func file_proto_scan_result_proto_init() {
	if File_proto_scan_result_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_scan_result_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Inventory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceCodeIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LayerDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Purl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qualifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Finding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Advisory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvisoryId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Severity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVSS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PythonPackageMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JavascriptPackageJSONMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APKPackageMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DPKGPackageMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RPMPackageMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*COSPackageMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PACMANPackageMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NixPackageMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DEPSJSONMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SNAPPackageMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortagePackageMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlatpakPackageMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KernelModuleMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VmlinuzMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacAppsMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SPDXPackageMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDXPackageMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JavaArchiveMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JavaLockfileMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OSVPackageMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PythonRequirementsMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerdContainerMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerdRuntimeContainerMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowsOSVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_scan_result_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomebrewPackageMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_scan_result_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Inventory_PythonMetadata)(nil),
		(*Inventory_JavascriptMetadata)(nil),
		(*Inventory_ApkMetadata)(nil),
		(*Inventory_DpkgMetadata)(nil),
		(*Inventory_RpmMetadata)(nil),
		(*Inventory_CosMetadata)(nil),
		(*Inventory_DepsjsonMetadata)(nil),
		(*Inventory_SpdxMetadata)(nil),
		(*Inventory_JavaArchiveMetadata)(nil),
		(*Inventory_JavaLockfileMetadata)(nil),
		(*Inventory_PacmanMetadata)(nil),
		(*Inventory_NixMetadata)(nil),
		(*Inventory_KernelModuleMetadata)(nil),
		(*Inventory_VmlinuzMetadata)(nil),
		(*Inventory_PortageMetadata)(nil),
		(*Inventory_OsvMetadata)(nil),
		(*Inventory_PythonRequirementsMetadata)(nil),
		(*Inventory_ContainerdContainerMetadata)(nil),
		(*Inventory_SnapMetadata)(nil),
		(*Inventory_FlatpakMetadata)(nil),
		(*Inventory_MacAppsMetadata)(nil),
		(*Inventory_ContainerdRuntimeContainerMetadata)(nil),
		(*Inventory_CdxMetadata)(nil),
		(*Inventory_WindowsOsVersionMetadata)(nil),
		(*Inventory_HomebrewMetadata)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_scan_result_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_scan_result_proto_goTypes,
		DependencyIndexes: file_proto_scan_result_proto_depIdxs,
		EnumInfos:         file_proto_scan_result_proto_enumTypes,
		MessageInfos:      file_proto_scan_result_proto_msgTypes,
	}.Build()
	File_proto_scan_result_proto = out.File
	file_proto_scan_result_proto_rawDesc = nil
	file_proto_scan_result_proto_goTypes = nil
	file_proto_scan_result_proto_depIdxs = nil
}
