//
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v6.32.1
// source: proto/scan_result.proto

package scan_result_go_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Vuln exclusion reasons - Mirrors the format from the official VEX
// documentation
// (https://www.cisa.gov/sites/default/files/publications/VEX_Status_Justification_Jun22.pdf)
type VexJustification int32

const (
	VexJustification_VEX_JUSTIFICATION_UNSPECIFIED VexJustification = 0
	// The vulnerable component is not used in the affected artifact.
	VexJustification_COMPONENT_NOT_PRESENT VexJustification = 1
	// The component is used but vulnerable code was removed or not included.
	VexJustification_VULNERABLE_CODE_NOT_PRESENT VexJustification = 2
	// Vulnerable code is included but is not executed.
	VexJustification_VULNERABLE_CODE_NOT_IN_EXECUTE_PATH VexJustification = 3
	// Vulnerable code is executed but can't be exploited due to program logic.
	VexJustification_VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY VexJustification = 4
	// Code can be executed but additional mitigations prevent exploitation.
	VexJustification_INLINE_MITIGATION_ALREADY_EXISTS VexJustification = 5
)

// Enum value maps for VexJustification.
var (
	VexJustification_name = map[int32]string{
		0: "VEX_JUSTIFICATION_UNSPECIFIED",
		1: "COMPONENT_NOT_PRESENT",
		2: "VULNERABLE_CODE_NOT_PRESENT",
		3: "VULNERABLE_CODE_NOT_IN_EXECUTE_PATH",
		4: "VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY",
		5: "INLINE_MITIGATION_ALREADY_EXISTS",
	}
	VexJustification_value = map[string]int32{
		"VEX_JUSTIFICATION_UNSPECIFIED":                     0,
		"COMPONENT_NOT_PRESENT":                             1,
		"VULNERABLE_CODE_NOT_PRESENT":                       2,
		"VULNERABLE_CODE_NOT_IN_EXECUTE_PATH":               3,
		"VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY": 4,
		"INLINE_MITIGATION_ALREADY_EXISTS":                  5,
	}
)

func (x VexJustification) Enum() *VexJustification {
	p := new(VexJustification)
	*p = x
	return p
}

func (x VexJustification) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VexJustification) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_scan_result_proto_enumTypes[0].Descriptor()
}

func (VexJustification) Type() protoreflect.EnumType {
	return &file_proto_scan_result_proto_enumTypes[0]
}

func (x VexJustification) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VexJustification.Descriptor instead.
func (VexJustification) EnumDescriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{0}
}

type SeverityEnum int32

const (
	SeverityEnum_SEVERITY_UNSPECIFIED SeverityEnum = 0
	SeverityEnum_MINIMAL              SeverityEnum = 1
	SeverityEnum_LOW                  SeverityEnum = 2
	SeverityEnum_MEDIUM               SeverityEnum = 3
	SeverityEnum_HIGH                 SeverityEnum = 4
	SeverityEnum_CRITICAL             SeverityEnum = 5
)

// Enum value maps for SeverityEnum.
var (
	SeverityEnum_name = map[int32]string{
		0: "SEVERITY_UNSPECIFIED",
		1: "MINIMAL",
		2: "LOW",
		3: "MEDIUM",
		4: "HIGH",
		5: "CRITICAL",
	}
	SeverityEnum_value = map[string]int32{
		"SEVERITY_UNSPECIFIED": 0,
		"MINIMAL":              1,
		"LOW":                  2,
		"MEDIUM":               3,
		"HIGH":                 4,
		"CRITICAL":             5,
	}
)

func (x SeverityEnum) Enum() *SeverityEnum {
	p := new(SeverityEnum)
	*p = x
	return p
}

func (x SeverityEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SeverityEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_scan_result_proto_enumTypes[1].Descriptor()
}

func (SeverityEnum) Type() protoreflect.EnumType {
	return &file_proto_scan_result_proto_enumTypes[1]
}

func (x SeverityEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SeverityEnum.Descriptor instead.
func (SeverityEnum) EnumDescriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{1}
}

// The source of the package.
type PackageSource int32

const (
	PackageSource_UNKNOWN PackageSource = 0
	// PUBLIC_REGISTRY is the public NPM registry.
	PackageSource_PUBLIC_REGISTRY PackageSource = 1
	// OTHER is any other remote or private source (e.g. Github).
	// This is used for packages that are not found in the public NPM registry.
	PackageSource_OTHER PackageSource = 2
	// LOCAL is the local filesystem that stores the package versions.
	// This is used for when the package is locally-developed or -installed.
	PackageSource_LOCAL PackageSource = 3
)

// Enum value maps for PackageSource.
var (
	PackageSource_name = map[int32]string{
		0: "UNKNOWN",
		1: "PUBLIC_REGISTRY",
		2: "OTHER",
		3: "LOCAL",
	}
	PackageSource_value = map[string]int32{
		"UNKNOWN":         0,
		"PUBLIC_REGISTRY": 1,
		"OTHER":           2,
		"LOCAL":           3,
	}
)

func (x PackageSource) Enum() *PackageSource {
	p := new(PackageSource)
	*p = x
	return p
}

func (x PackageSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PackageSource) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_scan_result_proto_enumTypes[2].Descriptor()
}

func (PackageSource) Type() protoreflect.EnumType {
	return &file_proto_scan_result_proto_enumTypes[2]
}

func (x PackageSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PackageSource.Descriptor instead.
func (PackageSource) EnumDescriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{2}
}

type ScanStatus_ScanStatusEnum int32

const (
	ScanStatus_UNSPECIFIED         ScanStatus_ScanStatusEnum = 0
	ScanStatus_SUCCEEDED           ScanStatus_ScanStatusEnum = 1
	ScanStatus_PARTIALLY_SUCCEEDED ScanStatus_ScanStatusEnum = 2
	ScanStatus_FAILED              ScanStatus_ScanStatusEnum = 3
)

// Enum value maps for ScanStatus_ScanStatusEnum.
var (
	ScanStatus_ScanStatusEnum_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "SUCCEEDED",
		2: "PARTIALLY_SUCCEEDED",
		3: "FAILED",
	}
	ScanStatus_ScanStatusEnum_value = map[string]int32{
		"UNSPECIFIED":         0,
		"SUCCEEDED":           1,
		"PARTIALLY_SUCCEEDED": 2,
		"FAILED":              3,
	}
)

func (x ScanStatus_ScanStatusEnum) Enum() *ScanStatus_ScanStatusEnum {
	p := new(ScanStatus_ScanStatusEnum)
	*p = x
	return p
}

func (x ScanStatus_ScanStatusEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScanStatus_ScanStatusEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_scan_result_proto_enumTypes[3].Descriptor()
}

func (ScanStatus_ScanStatusEnum) Type() protoreflect.EnumType {
	return &file_proto_scan_result_proto_enumTypes[3]
}

func (x ScanStatus_ScanStatusEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScanStatus_ScanStatusEnum.Descriptor instead.
func (ScanStatus_ScanStatusEnum) EnumDescriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{2, 0}
}

type Package_AnnotationEnum int32

const (
	Package_UNSPECIFIED       Package_AnnotationEnum = 0
	Package_TRANSITIONAL      Package_AnnotationEnum = 1
	Package_INSIDE_OS_PACKAGE Package_AnnotationEnum = 2
	Package_INSIDE_CACHE_DIR  Package_AnnotationEnum = 3
)

// Enum value maps for Package_AnnotationEnum.
var (
	Package_AnnotationEnum_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "TRANSITIONAL",
		2: "INSIDE_OS_PACKAGE",
		3: "INSIDE_CACHE_DIR",
	}
	Package_AnnotationEnum_value = map[string]int32{
		"UNSPECIFIED":       0,
		"TRANSITIONAL":      1,
		"INSIDE_OS_PACKAGE": 2,
		"INSIDE_CACHE_DIR":  3,
	}
)

func (x Package_AnnotationEnum) Enum() *Package_AnnotationEnum {
	p := new(Package_AnnotationEnum)
	*p = x
	return p
}

func (x Package_AnnotationEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Package_AnnotationEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_scan_result_proto_enumTypes[4].Descriptor()
}

func (Package_AnnotationEnum) Type() protoreflect.EnumType {
	return &file_proto_scan_result_proto_enumTypes[4]
}

func (x Package_AnnotationEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Package_AnnotationEnum.Descriptor instead.
func (Package_AnnotationEnum) EnumDescriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{4, 0}
}

type SecretStatus_SecretStatusEnum int32

const (
	// The default value for SecretStatusEnum. Set when no validation was
	// attempted.
	SecretStatus_UNSPECIFIED SecretStatus_SecretStatusEnum = 0
	// Deprecated. Use UNSPECIFIED instead.
	//
	// Deprecated: Marked as deprecated in proto/scan_result.proto.
	SecretStatus_UNKNOWN SecretStatus_SecretStatusEnum = 1
	// The secret is confirmed to be invalid.
	SecretStatus_INVALID SecretStatus_SecretStatusEnum = 2
	// The secret is confirmed to be valid.
	SecretStatus_VALID SecretStatus_SecretStatusEnum = 3
	// Validating the secret is not supported by the scanner.
	SecretStatus_UNSUPPORTED SecretStatus_SecretStatusEnum = 4
	// Validation is supported but the validation failed.
	SecretStatus_FAILED SecretStatus_SecretStatusEnum = 5
)

// Enum value maps for SecretStatus_SecretStatusEnum.
var (
	SecretStatus_SecretStatusEnum_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "UNKNOWN",
		2: "INVALID",
		3: "VALID",
		4: "UNSUPPORTED",
		5: "FAILED",
	}
	SecretStatus_SecretStatusEnum_value = map[string]int32{
		"UNSPECIFIED": 0,
		"UNKNOWN":     1,
		"INVALID":     2,
		"VALID":       3,
		"UNSUPPORTED": 4,
		"FAILED":      5,
	}
)

func (x SecretStatus_SecretStatusEnum) Enum() *SecretStatus_SecretStatusEnum {
	p := new(SecretStatus_SecretStatusEnum)
	*p = x
	return p
}

func (x SecretStatus_SecretStatusEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecretStatus_SecretStatusEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_scan_result_proto_enumTypes[5].Descriptor()
}

func (SecretStatus_SecretStatusEnum) Type() protoreflect.EnumType {
	return &file_proto_scan_result_proto_enumTypes[5]
}

func (x SecretStatus_SecretStatusEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecretStatus_SecretStatusEnum.Descriptor instead.
func (SecretStatus_SecretStatusEnum) EnumDescriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{56, 0}
}

// The results of a scan incl. scan status and artifacts found.
type ScanResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Status of the overall scan.
	Status *ScanStatus `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// Status and versions of the plugins that ran.
	PluginStatus []*PluginStatus `protobuf:"bytes,5,rep,name=plugin_status,json=pluginStatus,proto3" json:"plugin_status,omitempty"`
	// TODO(b/400910349): Remove once integrators stop using these fields.
	//
	// Deprecated: Marked as deprecated in proto/scan_result.proto.
	InventoriesDeprecated []*Package `protobuf:"bytes,6,rep,name=inventories_deprecated,json=inventoriesDeprecated,proto3" json:"inventories_deprecated,omitempty"`
	// Deprecated: Marked as deprecated in proto/scan_result.proto.
	FindingsDeprecated []*GenericFinding `protobuf:"bytes,7,rep,name=findings_deprecated,json=findingsDeprecated,proto3" json:"findings_deprecated,omitempty"`
	Inventory          *Inventory        `protobuf:"bytes,8,opt,name=inventory,proto3" json:"inventory,omitempty"`
}

func (x *ScanResult) Reset() {
	*x = ScanResult{}
	mi := &file_proto_scan_result_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScanResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanResult) ProtoMessage() {}

func (x *ScanResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanResult.ProtoReflect.Descriptor instead.
func (*ScanResult) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{0}
}

func (x *ScanResult) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ScanResult) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ScanResult) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ScanResult) GetStatus() *ScanStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ScanResult) GetPluginStatus() []*PluginStatus {
	if x != nil {
		return x.PluginStatus
	}
	return nil
}

// Deprecated: Marked as deprecated in proto/scan_result.proto.
func (x *ScanResult) GetInventoriesDeprecated() []*Package {
	if x != nil {
		return x.InventoriesDeprecated
	}
	return nil
}

// Deprecated: Marked as deprecated in proto/scan_result.proto.
func (x *ScanResult) GetFindingsDeprecated() []*GenericFinding {
	if x != nil {
		return x.FindingsDeprecated
	}
	return nil
}

func (x *ScanResult) GetInventory() *Inventory {
	if x != nil {
		return x.Inventory
	}
	return nil
}

// The artifacts (e.g. software inventory, security findings) that a scan found.
type Inventory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packages               []*Package                `protobuf:"bytes,1,rep,name=packages,proto3" json:"packages,omitempty"`
	GenericFindings        []*GenericFinding         `protobuf:"bytes,2,rep,name=generic_findings,json=genericFindings,proto3" json:"generic_findings,omitempty"`
	Secrets                []*Secret                 `protobuf:"bytes,3,rep,name=secrets,proto3" json:"secrets,omitempty"`
	ContainerImageMetadata []*ContainerImageMetadata `protobuf:"bytes,5,rep,name=container_image_metadata,json=containerImageMetadata,proto3" json:"container_image_metadata,omitempty"`
}

func (x *Inventory) Reset() {
	*x = Inventory{}
	mi := &file_proto_scan_result_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Inventory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inventory) ProtoMessage() {}

func (x *Inventory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inventory.ProtoReflect.Descriptor instead.
func (*Inventory) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{1}
}

func (x *Inventory) GetPackages() []*Package {
	if x != nil {
		return x.Packages
	}
	return nil
}

func (x *Inventory) GetGenericFindings() []*GenericFinding {
	if x != nil {
		return x.GenericFindings
	}
	return nil
}

func (x *Inventory) GetSecrets() []*Secret {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *Inventory) GetContainerImageMetadata() []*ContainerImageMetadata {
	if x != nil {
		return x.ContainerImageMetadata
	}
	return nil
}

type ScanStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        ScanStatus_ScanStatusEnum `protobuf:"varint,1,opt,name=status,proto3,enum=scalibr.ScanStatus_ScanStatusEnum" json:"status,omitempty"`
	FailureReason string                    `protobuf:"bytes,2,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
}

func (x *ScanStatus) Reset() {
	*x = ScanStatus{}
	mi := &file_proto_scan_result_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScanStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanStatus) ProtoMessage() {}

func (x *ScanStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanStatus.ProtoReflect.Descriptor instead.
func (*ScanStatus) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{2}
}

func (x *ScanStatus) GetStatus() ScanStatus_ScanStatusEnum {
	if x != nil {
		return x.Status
	}
	return ScanStatus_UNSPECIFIED
}

func (x *ScanStatus) GetFailureReason() string {
	if x != nil {
		return x.FailureReason
	}
	return ""
}

type PluginStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version int32       `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Status  *ScanStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PluginStatus) Reset() {
	*x = PluginStatus{}
	mi := &file_proto_scan_result_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginStatus) ProtoMessage() {}

func (x *PluginStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginStatus.ProtoReflect.Descriptor instead.
func (*PluginStatus) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{3}
}

func (x *PluginStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PluginStatus) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *PluginStatus) GetStatus() *ScanStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// A software package or library found by an extractor.
// PURL or CPE needs to be set, maybe both.
type Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Human-readable name of the software, to be used for things like logging.
	// For vuln matching, use the name from metadata.
	Name string `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	// Version of the package.
	Version string `protobuf:"bytes,12,opt,name=version,proto3" json:"version,omitempty"`
	// Source code level package identifiers.
	SourceCode *SourceCodeIdentifier `protobuf:"bytes,26,opt,name=source_code,json=sourceCode,proto3" json:"source_code,omitempty"`
	// Package URL of the software.
	Purl *Purl `protobuf:"bytes,1,opt,name=purl,proto3" json:"purl,omitempty"`
	// Ecosystem - For software packages this corresponds to an OSV ecosystem
	// value, e.g. PyPI.
	Ecosystem string `protobuf:"bytes,27,opt,name=ecosystem,proto3" json:"ecosystem,omitempty"`
	// Paths or source of files related to the package.
	Locations []string `protobuf:"bytes,2,rep,name=locations,proto3" json:"locations,omitempty"`
	// TODO(b/400910349): Remove once integrators stop using these fields.
	//
	// Deprecated: Marked as deprecated in proto/scan_result.proto.
	ExtractorDeprecated string `protobuf:"bytes,10,opt,name=extractor_deprecated,json=extractorDeprecated,proto3" json:"extractor_deprecated,omitempty"`
	// The names of the plugins that found this software. Set by the
	// core library.
	Plugins []string `protobuf:"bytes,49,rep,name=plugins,proto3" json:"plugins,omitempty"`
	// The additional data found in the package.
	// LINT.IfChange
	//
	// Types that are assignable to Metadata:
	//
	//	*Package_PythonMetadata
	//	*Package_JavascriptMetadata
	//	*Package_ApkMetadata
	//	*Package_DpkgMetadata
	//	*Package_RpmMetadata
	//	*Package_CosMetadata
	//	*Package_DepsjsonMetadata
	//	*Package_SpdxMetadata
	//	*Package_JavaArchiveMetadata
	//	*Package_JavaLockfileMetadata
	//	*Package_PacmanMetadata
	//	*Package_NixMetadata
	//	*Package_KernelModuleMetadata
	//	*Package_VmlinuzMetadata
	//	*Package_PortageMetadata
	//	*Package_OsvMetadata
	//	*Package_NetportsMetadata
	//	*Package_PythonRequirementsMetadata
	//	*Package_PythonSetupMetadata
	//	*Package_ContainerdContainerMetadata
	//	*Package_SnapMetadata
	//	*Package_FlatpakMetadata
	//	*Package_MacAppsMetadata
	//	*Package_ContainerdRuntimeContainerMetadata
	//	*Package_CdxMetadata
	//	*Package_WindowsOsVersionMetadata
	//	*Package_HomebrewMetadata
	//	*Package_ChromeExtensionsMetadata
	//	*Package_VscodeExtensionsMetadata
	//	*Package_PodmanMetadata
	//	*Package_DockerContainersMetadata
	//	*Package_MacportsMetadata
	//	*Package_WingetMetadata
	//	*Package_AsdfMetadata
	//	*Package_NvmMetadata
	//	*Package_NodeversionMetadata
	Metadata isPackage_Metadata `protobuf_oneof:"metadata"`
	// Deprecated - use exploitability_signals instead
	// TODO(b/400910349): Remove once integrators stop using this.
	//
	// Deprecated: Marked as deprecated in proto/scan_result.proto.
	AnnotationsDeprecated []Package_AnnotationEnum `protobuf:"varint,28,rep,packed,name=annotations_deprecated,json=annotationsDeprecated,proto3,enum=scalibr.Package_AnnotationEnum" json:"annotations_deprecated,omitempty"`
	// Signals to indicate that specific vulnerabilities are not applicable to
	// this package.
	ExploitabilitySignals []*PackageExploitabilitySignal `protobuf:"bytes,51,rep,name=exploitability_signals,json=exploitabilitySignals,proto3" json:"exploitability_signals,omitempty"`
	// Software licenses information
	Licenses                      []string                               `protobuf:"bytes,52,rep,name=licenses,proto3" json:"licenses,omitempty"`
	ContainerImageMetadataIndexes *Package_ContainerImageMetadataIndexes `protobuf:"bytes,57,opt,name=container_image_metadata_indexes,json=containerImageMetadataIndexes,proto3,oneof" json:"container_image_metadata_indexes,omitempty"`
}

func (x *Package) Reset() {
	*x = Package{}
	mi := &file_proto_scan_result_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package) ProtoMessage() {}

func (x *Package) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package.ProtoReflect.Descriptor instead.
func (*Package) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{4}
}

func (x *Package) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Package) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Package) GetSourceCode() *SourceCodeIdentifier {
	if x != nil {
		return x.SourceCode
	}
	return nil
}

func (x *Package) GetPurl() *Purl {
	if x != nil {
		return x.Purl
	}
	return nil
}

func (x *Package) GetEcosystem() string {
	if x != nil {
		return x.Ecosystem
	}
	return ""
}

func (x *Package) GetLocations() []string {
	if x != nil {
		return x.Locations
	}
	return nil
}

// Deprecated: Marked as deprecated in proto/scan_result.proto.
func (x *Package) GetExtractorDeprecated() string {
	if x != nil {
		return x.ExtractorDeprecated
	}
	return ""
}

func (x *Package) GetPlugins() []string {
	if x != nil {
		return x.Plugins
	}
	return nil
}

func (m *Package) GetMetadata() isPackage_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (x *Package) GetPythonMetadata() *PythonPackageMetadata {
	if x, ok := x.GetMetadata().(*Package_PythonMetadata); ok {
		return x.PythonMetadata
	}
	return nil
}

func (x *Package) GetJavascriptMetadata() *JavascriptPackageJSONMetadata {
	if x, ok := x.GetMetadata().(*Package_JavascriptMetadata); ok {
		return x.JavascriptMetadata
	}
	return nil
}

func (x *Package) GetApkMetadata() *APKPackageMetadata {
	if x, ok := x.GetMetadata().(*Package_ApkMetadata); ok {
		return x.ApkMetadata
	}
	return nil
}

func (x *Package) GetDpkgMetadata() *DPKGPackageMetadata {
	if x, ok := x.GetMetadata().(*Package_DpkgMetadata); ok {
		return x.DpkgMetadata
	}
	return nil
}

func (x *Package) GetRpmMetadata() *RPMPackageMetadata {
	if x, ok := x.GetMetadata().(*Package_RpmMetadata); ok {
		return x.RpmMetadata
	}
	return nil
}

func (x *Package) GetCosMetadata() *COSPackageMetadata {
	if x, ok := x.GetMetadata().(*Package_CosMetadata); ok {
		return x.CosMetadata
	}
	return nil
}

func (x *Package) GetDepsjsonMetadata() *DEPSJSONMetadata {
	if x, ok := x.GetMetadata().(*Package_DepsjsonMetadata); ok {
		return x.DepsjsonMetadata
	}
	return nil
}

func (x *Package) GetSpdxMetadata() *SPDXPackageMetadata {
	if x, ok := x.GetMetadata().(*Package_SpdxMetadata); ok {
		return x.SpdxMetadata
	}
	return nil
}

func (x *Package) GetJavaArchiveMetadata() *JavaArchiveMetadata {
	if x, ok := x.GetMetadata().(*Package_JavaArchiveMetadata); ok {
		return x.JavaArchiveMetadata
	}
	return nil
}

func (x *Package) GetJavaLockfileMetadata() *JavaLockfileMetadata {
	if x, ok := x.GetMetadata().(*Package_JavaLockfileMetadata); ok {
		return x.JavaLockfileMetadata
	}
	return nil
}

func (x *Package) GetPacmanMetadata() *PACMANPackageMetadata {
	if x, ok := x.GetMetadata().(*Package_PacmanMetadata); ok {
		return x.PacmanMetadata
	}
	return nil
}

func (x *Package) GetNixMetadata() *NixPackageMetadata {
	if x, ok := x.GetMetadata().(*Package_NixMetadata); ok {
		return x.NixMetadata
	}
	return nil
}

func (x *Package) GetKernelModuleMetadata() *KernelModuleMetadata {
	if x, ok := x.GetMetadata().(*Package_KernelModuleMetadata); ok {
		return x.KernelModuleMetadata
	}
	return nil
}

func (x *Package) GetVmlinuzMetadata() *VmlinuzMetadata {
	if x, ok := x.GetMetadata().(*Package_VmlinuzMetadata); ok {
		return x.VmlinuzMetadata
	}
	return nil
}

func (x *Package) GetPortageMetadata() *PortagePackageMetadata {
	if x, ok := x.GetMetadata().(*Package_PortageMetadata); ok {
		return x.PortageMetadata
	}
	return nil
}

func (x *Package) GetOsvMetadata() *OSVPackageMetadata {
	if x, ok := x.GetMetadata().(*Package_OsvMetadata); ok {
		return x.OsvMetadata
	}
	return nil
}

func (x *Package) GetNetportsMetadata() *NetportsMetadata {
	if x, ok := x.GetMetadata().(*Package_NetportsMetadata); ok {
		return x.NetportsMetadata
	}
	return nil
}

func (x *Package) GetPythonRequirementsMetadata() *PythonRequirementsMetadata {
	if x, ok := x.GetMetadata().(*Package_PythonRequirementsMetadata); ok {
		return x.PythonRequirementsMetadata
	}
	return nil
}

func (x *Package) GetPythonSetupMetadata() *PythonSetupMetadata {
	if x, ok := x.GetMetadata().(*Package_PythonSetupMetadata); ok {
		return x.PythonSetupMetadata
	}
	return nil
}

func (x *Package) GetContainerdContainerMetadata() *ContainerdContainerMetadata {
	if x, ok := x.GetMetadata().(*Package_ContainerdContainerMetadata); ok {
		return x.ContainerdContainerMetadata
	}
	return nil
}

func (x *Package) GetSnapMetadata() *SNAPPackageMetadata {
	if x, ok := x.GetMetadata().(*Package_SnapMetadata); ok {
		return x.SnapMetadata
	}
	return nil
}

func (x *Package) GetFlatpakMetadata() *FlatpakPackageMetadata {
	if x, ok := x.GetMetadata().(*Package_FlatpakMetadata); ok {
		return x.FlatpakMetadata
	}
	return nil
}

func (x *Package) GetMacAppsMetadata() *MacAppsMetadata {
	if x, ok := x.GetMetadata().(*Package_MacAppsMetadata); ok {
		return x.MacAppsMetadata
	}
	return nil
}

func (x *Package) GetContainerdRuntimeContainerMetadata() *ContainerdRuntimeContainerMetadata {
	if x, ok := x.GetMetadata().(*Package_ContainerdRuntimeContainerMetadata); ok {
		return x.ContainerdRuntimeContainerMetadata
	}
	return nil
}

func (x *Package) GetCdxMetadata() *CDXPackageMetadata {
	if x, ok := x.GetMetadata().(*Package_CdxMetadata); ok {
		return x.CdxMetadata
	}
	return nil
}

func (x *Package) GetWindowsOsVersionMetadata() *WindowsOSVersion {
	if x, ok := x.GetMetadata().(*Package_WindowsOsVersionMetadata); ok {
		return x.WindowsOsVersionMetadata
	}
	return nil
}

func (x *Package) GetHomebrewMetadata() *HomebrewPackageMetadata {
	if x, ok := x.GetMetadata().(*Package_HomebrewMetadata); ok {
		return x.HomebrewMetadata
	}
	return nil
}

func (x *Package) GetChromeExtensionsMetadata() *ChromeExtensionsMetadata {
	if x, ok := x.GetMetadata().(*Package_ChromeExtensionsMetadata); ok {
		return x.ChromeExtensionsMetadata
	}
	return nil
}

func (x *Package) GetVscodeExtensionsMetadata() *VSCodeExtensionsMetadata {
	if x, ok := x.GetMetadata().(*Package_VscodeExtensionsMetadata); ok {
		return x.VscodeExtensionsMetadata
	}
	return nil
}

func (x *Package) GetPodmanMetadata() *PodmanMetadata {
	if x, ok := x.GetMetadata().(*Package_PodmanMetadata); ok {
		return x.PodmanMetadata
	}
	return nil
}

func (x *Package) GetDockerContainersMetadata() *DockerContainersMetadata {
	if x, ok := x.GetMetadata().(*Package_DockerContainersMetadata); ok {
		return x.DockerContainersMetadata
	}
	return nil
}

func (x *Package) GetMacportsMetadata() *MacportsPackageMetadata {
	if x, ok := x.GetMetadata().(*Package_MacportsMetadata); ok {
		return x.MacportsMetadata
	}
	return nil
}

func (x *Package) GetWingetMetadata() *WingetPackageMetadata {
	if x, ok := x.GetMetadata().(*Package_WingetMetadata); ok {
		return x.WingetMetadata
	}
	return nil
}

func (x *Package) GetAsdfMetadata() *AsdfMetadata {
	if x, ok := x.GetMetadata().(*Package_AsdfMetadata); ok {
		return x.AsdfMetadata
	}
	return nil
}

func (x *Package) GetNvmMetadata() *NvmMetadata {
	if x, ok := x.GetMetadata().(*Package_NvmMetadata); ok {
		return x.NvmMetadata
	}
	return nil
}

func (x *Package) GetNodeversionMetadata() *NodeVersionMetadata {
	if x, ok := x.GetMetadata().(*Package_NodeversionMetadata); ok {
		return x.NodeversionMetadata
	}
	return nil
}

// Deprecated: Marked as deprecated in proto/scan_result.proto.
func (x *Package) GetAnnotationsDeprecated() []Package_AnnotationEnum {
	if x != nil {
		return x.AnnotationsDeprecated
	}
	return nil
}

func (x *Package) GetExploitabilitySignals() []*PackageExploitabilitySignal {
	if x != nil {
		return x.ExploitabilitySignals
	}
	return nil
}

func (x *Package) GetLicenses() []string {
	if x != nil {
		return x.Licenses
	}
	return nil
}

func (x *Package) GetContainerImageMetadataIndexes() *Package_ContainerImageMetadataIndexes {
	if x != nil {
		return x.ContainerImageMetadataIndexes
	}
	return nil
}

type isPackage_Metadata interface {
	isPackage_Metadata()
}

type Package_PythonMetadata struct {
	PythonMetadata *PythonPackageMetadata `protobuf:"bytes,5,opt,name=python_metadata,json=pythonMetadata,proto3,oneof"`
}

type Package_JavascriptMetadata struct {
	JavascriptMetadata *JavascriptPackageJSONMetadata `protobuf:"bytes,6,opt,name=javascript_metadata,json=javascriptMetadata,proto3,oneof"`
}

type Package_ApkMetadata struct {
	ApkMetadata *APKPackageMetadata `protobuf:"bytes,7,opt,name=apk_metadata,json=apkMetadata,proto3,oneof"`
}

type Package_DpkgMetadata struct {
	DpkgMetadata *DPKGPackageMetadata `protobuf:"bytes,8,opt,name=dpkg_metadata,json=dpkgMetadata,proto3,oneof"`
}

type Package_RpmMetadata struct {
	RpmMetadata *RPMPackageMetadata `protobuf:"bytes,9,opt,name=rpm_metadata,json=rpmMetadata,proto3,oneof"`
}

type Package_CosMetadata struct {
	CosMetadata *COSPackageMetadata `protobuf:"bytes,13,opt,name=cos_metadata,json=cosMetadata,proto3,oneof"`
}

type Package_DepsjsonMetadata struct {
	DepsjsonMetadata *DEPSJSONMetadata `protobuf:"bytes,40,opt,name=depsjson_metadata,json=depsjsonMetadata,proto3,oneof"`
}

type Package_SpdxMetadata struct {
	SpdxMetadata *SPDXPackageMetadata `protobuf:"bytes,14,opt,name=spdx_metadata,json=spdxMetadata,proto3,oneof"`
}

type Package_JavaArchiveMetadata struct {
	JavaArchiveMetadata *JavaArchiveMetadata `protobuf:"bytes,15,opt,name=java_archive_metadata,json=javaArchiveMetadata,proto3,oneof"`
}

type Package_JavaLockfileMetadata struct {
	JavaLockfileMetadata *JavaLockfileMetadata `protobuf:"bytes,31,opt,name=java_lockfile_metadata,json=javaLockfileMetadata,proto3,oneof"`
}

type Package_PacmanMetadata struct {
	PacmanMetadata *PACMANPackageMetadata `protobuf:"bytes,36,opt,name=pacman_metadata,json=pacmanMetadata,proto3,oneof"`
}

type Package_NixMetadata struct {
	NixMetadata *NixPackageMetadata `protobuf:"bytes,37,opt,name=nix_metadata,json=nixMetadata,proto3,oneof"`
}

type Package_KernelModuleMetadata struct {
	KernelModuleMetadata *KernelModuleMetadata `protobuf:"bytes,38,opt,name=kernel_module_metadata,json=kernelModuleMetadata,proto3,oneof"`
}

type Package_VmlinuzMetadata struct {
	VmlinuzMetadata *VmlinuzMetadata `protobuf:"bytes,39,opt,name=vmlinuz_metadata,json=vmlinuzMetadata,proto3,oneof"`
}

type Package_PortageMetadata struct {
	PortageMetadata *PortagePackageMetadata `protobuf:"bytes,41,opt,name=portage_metadata,json=portageMetadata,proto3,oneof"`
}

type Package_OsvMetadata struct {
	OsvMetadata *OSVPackageMetadata `protobuf:"bytes,16,opt,name=osv_metadata,json=osvMetadata,proto3,oneof"`
}

type Package_NetportsMetadata struct {
	NetportsMetadata *NetportsMetadata `protobuf:"bytes,45,opt,name=netports_metadata,json=netportsMetadata,proto3,oneof"`
}

type Package_PythonRequirementsMetadata struct {
	PythonRequirementsMetadata *PythonRequirementsMetadata `protobuf:"bytes,21,opt,name=python_requirements_metadata,json=pythonRequirementsMetadata,proto3,oneof"`
}

type Package_PythonSetupMetadata struct {
	PythonSetupMetadata *PythonSetupMetadata `protobuf:"bytes,44,opt,name=python_setup_metadata,json=pythonSetupMetadata,proto3,oneof"`
}

type Package_ContainerdContainerMetadata struct {
	ContainerdContainerMetadata *ContainerdContainerMetadata `protobuf:"bytes,22,opt,name=containerd_container_metadata,json=containerdContainerMetadata,proto3,oneof"`
}

type Package_SnapMetadata struct {
	SnapMetadata *SNAPPackageMetadata `protobuf:"bytes,23,opt,name=snap_metadata,json=snapMetadata,proto3,oneof"`
}

type Package_FlatpakMetadata struct {
	FlatpakMetadata *FlatpakPackageMetadata `protobuf:"bytes,24,opt,name=flatpak_metadata,json=flatpakMetadata,proto3,oneof"`
}

type Package_MacAppsMetadata struct {
	MacAppsMetadata *MacAppsMetadata `protobuf:"bytes,34,opt,name=mac_apps_metadata,json=macAppsMetadata,proto3,oneof"`
}

type Package_ContainerdRuntimeContainerMetadata struct {
	ContainerdRuntimeContainerMetadata *ContainerdRuntimeContainerMetadata `protobuf:"bytes,25,opt,name=containerd_runtime_container_metadata,json=containerdRuntimeContainerMetadata,proto3,oneof"`
}

type Package_CdxMetadata struct {
	CdxMetadata *CDXPackageMetadata `protobuf:"bytes,30,opt,name=cdx_metadata,json=cdxMetadata,proto3,oneof"`
}

type Package_WindowsOsVersionMetadata struct {
	WindowsOsVersionMetadata *WindowsOSVersion `protobuf:"bytes,33,opt,name=windows_os_version_metadata,json=windowsOsVersionMetadata,proto3,oneof"`
}

type Package_HomebrewMetadata struct {
	HomebrewMetadata *HomebrewPackageMetadata `protobuf:"bytes,42,opt,name=homebrew_metadata,json=homebrewMetadata,proto3,oneof"`
}

type Package_ChromeExtensionsMetadata struct {
	ChromeExtensionsMetadata *ChromeExtensionsMetadata `protobuf:"bytes,47,opt,name=chrome_extensions_metadata,json=chromeExtensionsMetadata,proto3,oneof"`
}

type Package_VscodeExtensionsMetadata struct {
	VscodeExtensionsMetadata *VSCodeExtensionsMetadata `protobuf:"bytes,46,opt,name=vscode_extensions_metadata,json=vscodeExtensionsMetadata,proto3,oneof"`
}

type Package_PodmanMetadata struct {
	PodmanMetadata *PodmanMetadata `protobuf:"bytes,50,opt,name=podman_metadata,json=podmanMetadata,proto3,oneof"`
}

type Package_DockerContainersMetadata struct {
	DockerContainersMetadata *DockerContainersMetadata `protobuf:"bytes,48,opt,name=docker_containers_metadata,json=dockerContainersMetadata,proto3,oneof"`
}

type Package_MacportsMetadata struct {
	MacportsMetadata *MacportsPackageMetadata `protobuf:"bytes,53,opt,name=macports_metadata,json=macportsMetadata,proto3,oneof"`
}

type Package_WingetMetadata struct {
	WingetMetadata *WingetPackageMetadata `protobuf:"bytes,54,opt,name=winget_metadata,json=wingetMetadata,proto3,oneof"`
}

type Package_AsdfMetadata struct {
	AsdfMetadata *AsdfMetadata `protobuf:"bytes,55,opt,name=asdf_metadata,json=asdfMetadata,proto3,oneof"`
}

type Package_NvmMetadata struct {
	NvmMetadata *NvmMetadata `protobuf:"bytes,56,opt,name=nvm_metadata,json=nvmMetadata,proto3,oneof"`
}

type Package_NodeversionMetadata struct {
	NodeversionMetadata *NodeVersionMetadata `protobuf:"bytes,58,opt,name=nodeversion_metadata,json=nodeversionMetadata,proto3,oneof"`
}

func (*Package_PythonMetadata) isPackage_Metadata() {}

func (*Package_JavascriptMetadata) isPackage_Metadata() {}

func (*Package_ApkMetadata) isPackage_Metadata() {}

func (*Package_DpkgMetadata) isPackage_Metadata() {}

func (*Package_RpmMetadata) isPackage_Metadata() {}

func (*Package_CosMetadata) isPackage_Metadata() {}

func (*Package_DepsjsonMetadata) isPackage_Metadata() {}

func (*Package_SpdxMetadata) isPackage_Metadata() {}

func (*Package_JavaArchiveMetadata) isPackage_Metadata() {}

func (*Package_JavaLockfileMetadata) isPackage_Metadata() {}

func (*Package_PacmanMetadata) isPackage_Metadata() {}

func (*Package_NixMetadata) isPackage_Metadata() {}

func (*Package_KernelModuleMetadata) isPackage_Metadata() {}

func (*Package_VmlinuzMetadata) isPackage_Metadata() {}

func (*Package_PortageMetadata) isPackage_Metadata() {}

func (*Package_OsvMetadata) isPackage_Metadata() {}

func (*Package_NetportsMetadata) isPackage_Metadata() {}

func (*Package_PythonRequirementsMetadata) isPackage_Metadata() {}

func (*Package_PythonSetupMetadata) isPackage_Metadata() {}

func (*Package_ContainerdContainerMetadata) isPackage_Metadata() {}

func (*Package_SnapMetadata) isPackage_Metadata() {}

func (*Package_FlatpakMetadata) isPackage_Metadata() {}

func (*Package_MacAppsMetadata) isPackage_Metadata() {}

func (*Package_ContainerdRuntimeContainerMetadata) isPackage_Metadata() {}

func (*Package_CdxMetadata) isPackage_Metadata() {}

func (*Package_WindowsOsVersionMetadata) isPackage_Metadata() {}

func (*Package_HomebrewMetadata) isPackage_Metadata() {}

func (*Package_ChromeExtensionsMetadata) isPackage_Metadata() {}

func (*Package_VscodeExtensionsMetadata) isPackage_Metadata() {}

func (*Package_PodmanMetadata) isPackage_Metadata() {}

func (*Package_DockerContainersMetadata) isPackage_Metadata() {}

func (*Package_MacportsMetadata) isPackage_Metadata() {}

func (*Package_WingetMetadata) isPackage_Metadata() {}

func (*Package_AsdfMetadata) isPackage_Metadata() {}

func (*Package_NvmMetadata) isPackage_Metadata() {}

func (*Package_NodeversionMetadata) isPackage_Metadata() {}

// Additional identifiers for source code software packages (e.g. NPM).
type SourceCodeIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo   string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Commit string `protobuf:"bytes,2,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *SourceCodeIdentifier) Reset() {
	*x = SourceCodeIdentifier{}
	mi := &file_proto_scan_result_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceCodeIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceCodeIdentifier) ProtoMessage() {}

func (x *SourceCodeIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceCodeIdentifier.ProtoReflect.Descriptor instead.
func (*SourceCodeIdentifier) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{5}
}

func (x *SourceCodeIdentifier) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *SourceCodeIdentifier) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

// Details about the layer a package was found in.
type LayerDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The index of the layer in the container image.
	Index int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// The diff ID (typically a sha256 hash) of the layer in the container image.
	DiffId string `protobuf:"bytes,2,opt,name=diff_id,json=diffId,proto3" json:"diff_id,omitempty"`
	// The layer chain ID (sha256 hash) of the layer in the container image.
	// https://github.com/opencontainers/image-spec/blob/main/config.md#layer-chainid
	ChainId string `protobuf:"bytes,5,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// The layer build command that was used to build the layer. This may not be
	// found in all layers depending on how the container image is built.
	Command string `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
	// Denotes whether the layer is in the base image.
	InBaseImage bool `protobuf:"varint,4,opt,name=in_base_image,json=inBaseImage,proto3" json:"in_base_image,omitempty"`
}

func (x *LayerDetails) Reset() {
	*x = LayerDetails{}
	mi := &file_proto_scan_result_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LayerDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LayerDetails) ProtoMessage() {}

func (x *LayerDetails) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LayerDetails.ProtoReflect.Descriptor instead.
func (*LayerDetails) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{6}
}

func (x *LayerDetails) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *LayerDetails) GetDiffId() string {
	if x != nil {
		return x.DiffId
	}
	return ""
}

func (x *LayerDetails) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *LayerDetails) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *LayerDetails) GetInBaseImage() bool {
	if x != nil {
		return x.InBaseImage
	}
	return false
}

// PackageExploitabilitySignal is used to indicate that specific vulnerabilities
// are not applicable to a given package.
type PackageExploitabilitySignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the plugin (e.g. Annotator) that added this signal.
	Plugin string `protobuf:"bytes,1,opt,name=plugin,proto3" json:"plugin,omitempty"`
	// Reason for exclusion.
	Justification VexJustification `protobuf:"varint,2,opt,name=justification,proto3,enum=scalibr.VexJustification" json:"justification,omitempty"`
	// Types that are assignable to VulnFilter:
	//
	//	*PackageExploitabilitySignal_VulnIdentifiers
	//	*PackageExploitabilitySignal_MatchesAllVulns
	VulnFilter isPackageExploitabilitySignal_VulnFilter `protobuf_oneof:"vuln_filter"`
}

func (x *PackageExploitabilitySignal) Reset() {
	*x = PackageExploitabilitySignal{}
	mi := &file_proto_scan_result_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PackageExploitabilitySignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageExploitabilitySignal) ProtoMessage() {}

func (x *PackageExploitabilitySignal) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageExploitabilitySignal.ProtoReflect.Descriptor instead.
func (*PackageExploitabilitySignal) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{7}
}

func (x *PackageExploitabilitySignal) GetPlugin() string {
	if x != nil {
		return x.Plugin
	}
	return ""
}

func (x *PackageExploitabilitySignal) GetJustification() VexJustification {
	if x != nil {
		return x.Justification
	}
	return VexJustification_VEX_JUSTIFICATION_UNSPECIFIED
}

func (m *PackageExploitabilitySignal) GetVulnFilter() isPackageExploitabilitySignal_VulnFilter {
	if m != nil {
		return m.VulnFilter
	}
	return nil
}

func (x *PackageExploitabilitySignal) GetVulnIdentifiers() *VulnIdentifiers {
	if x, ok := x.GetVulnFilter().(*PackageExploitabilitySignal_VulnIdentifiers); ok {
		return x.VulnIdentifiers
	}
	return nil
}

func (x *PackageExploitabilitySignal) GetMatchesAllVulns() bool {
	if x, ok := x.GetVulnFilter().(*PackageExploitabilitySignal_MatchesAllVulns); ok {
		return x.MatchesAllVulns
	}
	return false
}

type isPackageExploitabilitySignal_VulnFilter interface {
	isPackageExploitabilitySignal_VulnFilter()
}

type PackageExploitabilitySignal_VulnIdentifiers struct {
	// Advisory Identifier (CVE, GHSA, ...) and aliases of the vulns that are
	// not applicable to this package.
	VulnIdentifiers *VulnIdentifiers `protobuf:"bytes,3,opt,name=vuln_identifiers,json=vulnIdentifiers,proto3,oneof"`
}

type PackageExploitabilitySignal_MatchesAllVulns struct {
	// Indicates that all vulnerabilities associated with the package are
	// irrelevant.
	MatchesAllVulns bool `protobuf:"varint,4,opt,name=matches_all_vulns,json=matchesAllVulns,proto3,oneof"`
}

func (*PackageExploitabilitySignal_VulnIdentifiers) isPackageExploitabilitySignal_VulnFilter() {}

func (*PackageExploitabilitySignal_MatchesAllVulns) isPackageExploitabilitySignal_VulnFilter() {}

type VulnIdentifiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifiers []string `protobuf:"bytes,1,rep,name=identifiers,proto3" json:"identifiers,omitempty"`
}

func (x *VulnIdentifiers) Reset() {
	*x = VulnIdentifiers{}
	mi := &file_proto_scan_result_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VulnIdentifiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnIdentifiers) ProtoMessage() {}

func (x *VulnIdentifiers) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnIdentifiers.ProtoReflect.Descriptor instead.
func (*VulnIdentifiers) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{8}
}

func (x *VulnIdentifiers) GetIdentifiers() []string {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

// FindingExploitabilitySignal is used to indicate that a finding is not
// exploitable.
type FindingExploitabilitySignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the plugin (e.g. Annotator) that added this signal.
	Plugin string `protobuf:"bytes,1,opt,name=plugin,proto3" json:"plugin,omitempty"`
	// Reason for exclusion.
	Justification VexJustification `protobuf:"varint,2,opt,name=justification,proto3,enum=scalibr.VexJustification" json:"justification,omitempty"`
}

func (x *FindingExploitabilitySignal) Reset() {
	*x = FindingExploitabilitySignal{}
	mi := &file_proto_scan_result_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindingExploitabilitySignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindingExploitabilitySignal) ProtoMessage() {}

func (x *FindingExploitabilitySignal) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindingExploitabilitySignal.ProtoReflect.Descriptor instead.
func (*FindingExploitabilitySignal) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{9}
}

func (x *FindingExploitabilitySignal) GetPlugin() string {
	if x != nil {
		return x.Plugin
	}
	return ""
}

func (x *FindingExploitabilitySignal) GetJustification() VexJustification {
	if x != nil {
		return x.Justification
	}
	return VexJustification_VEX_JUSTIFICATION_UNSPECIFIED
}

// Package URL, see https://github.com/package-url/purl-spec
type Purl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// String representation.
	Purl string `protobuf:"bytes,1,opt,name=purl,proto3" json:"purl,omitempty"`
	// Package type, e.g. "maven, npm, pypi".
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Package name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Package version.
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// Name prefix such as a Maven groupid, or Docker image owner.
	Namespace string `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Extra qualifying data for a package such as an OS, architecture, etc.
	Qualifiers []*Qualifier `protobuf:"bytes,6,rep,name=qualifiers,proto3" json:"qualifiers,omitempty"`
	// Extra subpath within a package, relative to the package root.
	Subpath string `protobuf:"bytes,7,opt,name=subpath,proto3" json:"subpath,omitempty"`
}

func (x *Purl) Reset() {
	*x = Purl{}
	mi := &file_proto_scan_result_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Purl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Purl) ProtoMessage() {}

func (x *Purl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Purl.ProtoReflect.Descriptor instead.
func (*Purl) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{10}
}

func (x *Purl) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

func (x *Purl) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Purl) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Purl) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Purl) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Purl) GetQualifiers() []*Qualifier {
	if x != nil {
		return x.Qualifiers
	}
	return nil
}

func (x *Purl) GetSubpath() string {
	if x != nil {
		return x.Subpath
	}
	return ""
}

type Qualifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Qualifier) Reset() {
	*x = Qualifier{}
	mi := &file_proto_scan_result_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Qualifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qualifier) ProtoMessage() {}

func (x *Qualifier) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qualifier.ProtoReflect.Descriptor instead.
func (*Qualifier) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{11}
}

func (x *Qualifier) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Qualifier) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Describes generic security findings not associated with any
// specific package, e.g. weak credentials.
type GenericFinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Info specific to the finding. Should always be the same for the same type
	// of finding.
	Adv *GenericFindingAdvisory `protobuf:"bytes,1,opt,name=adv,proto3" json:"adv,omitempty"`
	// Instance-specific info such as location of the vulnerable files.
	Target *GenericFindingTargetDetails `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	// The plugins (e.g. Detectors, Enrichers) that found this vuln.
	Plugins []string `protobuf:"bytes,4,rep,name=plugins,proto3" json:"plugins,omitempty"`
	// Signals that indicate this finding is not exploitable.
	ExploitabilitySignals []*FindingExploitabilitySignal `protobuf:"bytes,5,rep,name=exploitability_signals,json=exploitabilitySignals,proto3" json:"exploitability_signals,omitempty"`
}

func (x *GenericFinding) Reset() {
	*x = GenericFinding{}
	mi := &file_proto_scan_result_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenericFinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericFinding) ProtoMessage() {}

func (x *GenericFinding) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericFinding.ProtoReflect.Descriptor instead.
func (*GenericFinding) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{12}
}

func (x *GenericFinding) GetAdv() *GenericFindingAdvisory {
	if x != nil {
		return x.Adv
	}
	return nil
}

func (x *GenericFinding) GetTarget() *GenericFindingTargetDetails {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *GenericFinding) GetPlugins() []string {
	if x != nil {
		return x.Plugins
	}
	return nil
}

func (x *GenericFinding) GetExploitabilitySignals() []*FindingExploitabilitySignal {
	if x != nil {
		return x.ExploitabilitySignals
	}
	return nil
}

// Describes a security finding and how to remediate it. It should not
// contain any information specific to the target (e.g. which files were
// found vulnerable).
type GenericFindingAdvisory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique ID for the finding.
	Id          *AdvisoryId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string      `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description string      `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Remediation instructions, e.g. "update to latest version".
	Recommendation string       `protobuf:"bytes,5,opt,name=recommendation,proto3" json:"recommendation,omitempty"`
	Sev            SeverityEnum `protobuf:"varint,7,opt,name=sev,proto3,enum=scalibr.SeverityEnum" json:"sev,omitempty"`
}

func (x *GenericFindingAdvisory) Reset() {
	*x = GenericFindingAdvisory{}
	mi := &file_proto_scan_result_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenericFindingAdvisory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericFindingAdvisory) ProtoMessage() {}

func (x *GenericFindingAdvisory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericFindingAdvisory.ProtoReflect.Descriptor instead.
func (*GenericFindingAdvisory) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{13}
}

func (x *GenericFindingAdvisory) GetId() *AdvisoryId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GenericFindingAdvisory) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GenericFindingAdvisory) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GenericFindingAdvisory) GetRecommendation() string {
	if x != nil {
		return x.Recommendation
	}
	return ""
}

func (x *GenericFindingAdvisory) GetSev() SeverityEnum {
	if x != nil {
		return x.Sev
	}
	return SeverityEnum_SEVERITY_UNSPECIFIED
}

// A unique identifier per advisory.
type AdvisoryId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publisher string `protobuf:"bytes,1,opt,name=publisher,proto3" json:"publisher,omitempty"` // e.g. "CVE".
	Reference string `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"` // e.g. "CVE-2023-1234".
}

func (x *AdvisoryId) Reset() {
	*x = AdvisoryId{}
	mi := &file_proto_scan_result_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdvisoryId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvisoryId) ProtoMessage() {}

func (x *AdvisoryId) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvisoryId.ProtoReflect.Descriptor instead.
func (*AdvisoryId) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{14}
}

func (x *AdvisoryId) GetPublisher() string {
	if x != nil {
		return x.Publisher
	}
	return ""
}

func (x *AdvisoryId) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

// Instance-specific details about the generic security finding.
type GenericFindingTargetDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Free-text info.
	Extra string `protobuf:"bytes,4,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *GenericFindingTargetDetails) Reset() {
	*x = GenericFindingTargetDetails{}
	mi := &file_proto_scan_result_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenericFindingTargetDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericFindingTargetDetails) ProtoMessage() {}

func (x *GenericFindingTargetDetails) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericFindingTargetDetails.ProtoReflect.Descriptor instead.
func (*GenericFindingTargetDetails) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{15}
}

func (x *GenericFindingTargetDetails) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

// The additional data found in python packages.
type PythonPackageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Author      string `protobuf:"bytes,1,opt,name=author,proto3" json:"author,omitempty"`
	AuthorEmail string `protobuf:"bytes,2,opt,name=author_email,json=authorEmail,proto3" json:"author_email,omitempty"`
}

func (x *PythonPackageMetadata) Reset() {
	*x = PythonPackageMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PythonPackageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PythonPackageMetadata) ProtoMessage() {}

func (x *PythonPackageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PythonPackageMetadata.ProtoReflect.Descriptor instead.
func (*PythonPackageMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{16}
}

func (x *PythonPackageMetadata) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *PythonPackageMetadata) GetAuthorEmail() string {
	if x != nil {
		return x.AuthorEmail
	}
	return ""
}

// The additional data found in npm packages.
type JavascriptPackageJSONMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Author       string        `protobuf:"bytes,1,opt,name=author,proto3" json:"author,omitempty"`
	Maintainers  []string      `protobuf:"bytes,2,rep,name=maintainers,proto3" json:"maintainers,omitempty"`
	Contributors []string      `protobuf:"bytes,3,rep,name=contributors,proto3" json:"contributors,omitempty"`
	Source       PackageSource `protobuf:"varint,5,opt,name=source,proto3,enum=scalibr.PackageSource" json:"source,omitempty"`
}

func (x *JavascriptPackageJSONMetadata) Reset() {
	*x = JavascriptPackageJSONMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JavascriptPackageJSONMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JavascriptPackageJSONMetadata) ProtoMessage() {}

func (x *JavascriptPackageJSONMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JavascriptPackageJSONMetadata.ProtoReflect.Descriptor instead.
func (*JavascriptPackageJSONMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{17}
}

func (x *JavascriptPackageJSONMetadata) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *JavascriptPackageJSONMetadata) GetMaintainers() []string {
	if x != nil {
		return x.Maintainers
	}
	return nil
}

func (x *JavascriptPackageJSONMetadata) GetContributors() []string {
	if x != nil {
		return x.Contributors
	}
	return nil
}

func (x *JavascriptPackageJSONMetadata) GetSource() PackageSource {
	if x != nil {
		return x.Source
	}
	return PackageSource_UNKNOWN
}

// The additional data found in APK packages.
type APKPackageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageName  string `protobuf:"bytes,1,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	OriginName   string `protobuf:"bytes,2,opt,name=origin_name,json=originName,proto3" json:"origin_name,omitempty"`
	OsId         string `protobuf:"bytes,3,opt,name=os_id,json=osId,proto3" json:"os_id,omitempty"`
	OsVersionId  string `protobuf:"bytes,4,opt,name=os_version_id,json=osVersionId,proto3" json:"os_version_id,omitempty"`
	Maintainer   string `protobuf:"bytes,5,opt,name=maintainer,proto3" json:"maintainer,omitempty"`
	Architecture string `protobuf:"bytes,6,opt,name=architecture,proto3" json:"architecture,omitempty"`
}

func (x *APKPackageMetadata) Reset() {
	*x = APKPackageMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APKPackageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APKPackageMetadata) ProtoMessage() {}

func (x *APKPackageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APKPackageMetadata.ProtoReflect.Descriptor instead.
func (*APKPackageMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{18}
}

func (x *APKPackageMetadata) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *APKPackageMetadata) GetOriginName() string {
	if x != nil {
		return x.OriginName
	}
	return ""
}

func (x *APKPackageMetadata) GetOsId() string {
	if x != nil {
		return x.OsId
	}
	return ""
}

func (x *APKPackageMetadata) GetOsVersionId() string {
	if x != nil {
		return x.OsVersionId
	}
	return ""
}

func (x *APKPackageMetadata) GetMaintainer() string {
	if x != nil {
		return x.Maintainer
	}
	return ""
}

func (x *APKPackageMetadata) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

// The additional data found in DPKG packages.
// Next ID: 11
type DPKGPackageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageName       string `protobuf:"bytes,1,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	SourceName        string `protobuf:"bytes,2,opt,name=source_name,json=sourceName,proto3" json:"source_name,omitempty"`
	SourceVersion     string `protobuf:"bytes,3,opt,name=source_version,json=sourceVersion,proto3" json:"source_version,omitempty"`
	PackageVersion    string `protobuf:"bytes,4,opt,name=package_version,json=packageVersion,proto3" json:"package_version,omitempty"`
	OsId              string `protobuf:"bytes,5,opt,name=os_id,json=osId,proto3" json:"os_id,omitempty"`
	OsVersionCodename string `protobuf:"bytes,6,opt,name=os_version_codename,json=osVersionCodename,proto3" json:"os_version_codename,omitempty"`
	OsVersionId       string `protobuf:"bytes,7,opt,name=os_version_id,json=osVersionId,proto3" json:"os_version_id,omitempty"`
	Maintainer        string `protobuf:"bytes,8,opt,name=maintainer,proto3" json:"maintainer,omitempty"`
	Architecture      string `protobuf:"bytes,9,opt,name=architecture,proto3" json:"architecture,omitempty"`
	Status            string `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DPKGPackageMetadata) Reset() {
	*x = DPKGPackageMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DPKGPackageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DPKGPackageMetadata) ProtoMessage() {}

func (x *DPKGPackageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DPKGPackageMetadata.ProtoReflect.Descriptor instead.
func (*DPKGPackageMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{19}
}

func (x *DPKGPackageMetadata) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *DPKGPackageMetadata) GetSourceName() string {
	if x != nil {
		return x.SourceName
	}
	return ""
}

func (x *DPKGPackageMetadata) GetSourceVersion() string {
	if x != nil {
		return x.SourceVersion
	}
	return ""
}

func (x *DPKGPackageMetadata) GetPackageVersion() string {
	if x != nil {
		return x.PackageVersion
	}
	return ""
}

func (x *DPKGPackageMetadata) GetOsId() string {
	if x != nil {
		return x.OsId
	}
	return ""
}

func (x *DPKGPackageMetadata) GetOsVersionCodename() string {
	if x != nil {
		return x.OsVersionCodename
	}
	return ""
}

func (x *DPKGPackageMetadata) GetOsVersionId() string {
	if x != nil {
		return x.OsVersionId
	}
	return ""
}

func (x *DPKGPackageMetadata) GetMaintainer() string {
	if x != nil {
		return x.Maintainer
	}
	return ""
}

func (x *DPKGPackageMetadata) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *DPKGPackageMetadata) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// The additional data found in RPM packages.
type RPMPackageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageName  string `protobuf:"bytes,1,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	SourceRpm    string `protobuf:"bytes,2,opt,name=source_rpm,json=sourceRpm,proto3" json:"source_rpm,omitempty"`
	Epoch        int32  `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	OsId         string `protobuf:"bytes,4,opt,name=os_id,json=osId,proto3" json:"os_id,omitempty"`
	OsVersionId  string `protobuf:"bytes,5,opt,name=os_version_id,json=osVersionId,proto3" json:"os_version_id,omitempty"`
	OsBuildId    string `protobuf:"bytes,6,opt,name=os_build_id,json=osBuildId,proto3" json:"os_build_id,omitempty"`
	OsName       string `protobuf:"bytes,7,opt,name=os_name,json=osName,proto3" json:"os_name,omitempty"`
	Vendor       string `protobuf:"bytes,8,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Architecture string `protobuf:"bytes,9,opt,name=architecture,proto3" json:"architecture,omitempty"`
	OsPrettyName string `protobuf:"bytes,11,opt,name=os_pretty_name,json=osPrettyName,proto3" json:"os_pretty_name,omitempty"`
}

func (x *RPMPackageMetadata) Reset() {
	*x = RPMPackageMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RPMPackageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPMPackageMetadata) ProtoMessage() {}

func (x *RPMPackageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPMPackageMetadata.ProtoReflect.Descriptor instead.
func (*RPMPackageMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{20}
}

func (x *RPMPackageMetadata) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *RPMPackageMetadata) GetSourceRpm() string {
	if x != nil {
		return x.SourceRpm
	}
	return ""
}

func (x *RPMPackageMetadata) GetEpoch() int32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *RPMPackageMetadata) GetOsId() string {
	if x != nil {
		return x.OsId
	}
	return ""
}

func (x *RPMPackageMetadata) GetOsVersionId() string {
	if x != nil {
		return x.OsVersionId
	}
	return ""
}

func (x *RPMPackageMetadata) GetOsBuildId() string {
	if x != nil {
		return x.OsBuildId
	}
	return ""
}

func (x *RPMPackageMetadata) GetOsName() string {
	if x != nil {
		return x.OsName
	}
	return ""
}

func (x *RPMPackageMetadata) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *RPMPackageMetadata) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *RPMPackageMetadata) GetOsPrettyName() string {
	if x != nil {
		return x.OsPrettyName
	}
	return ""
}

// The additional data found in COS packages.
type COSPackageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version       string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Category      string `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	OsVersion     string `protobuf:"bytes,4,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	OsVersionId   string `protobuf:"bytes,5,opt,name=os_version_id,json=osVersionId,proto3" json:"os_version_id,omitempty"`
	EbuildVersion string `protobuf:"bytes,6,opt,name=ebuild_version,json=ebuildVersion,proto3" json:"ebuild_version,omitempty"`
}

func (x *COSPackageMetadata) Reset() {
	*x = COSPackageMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *COSPackageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*COSPackageMetadata) ProtoMessage() {}

func (x *COSPackageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use COSPackageMetadata.ProtoReflect.Descriptor instead.
func (*COSPackageMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{21}
}

func (x *COSPackageMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *COSPackageMetadata) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *COSPackageMetadata) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *COSPackageMetadata) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *COSPackageMetadata) GetOsVersionId() string {
	if x != nil {
		return x.OsVersionId
	}
	return ""
}

func (x *COSPackageMetadata) GetEbuildVersion() string {
	if x != nil {
		return x.EbuildVersion
	}
	return ""
}

// The additional data found in PACMAN packages.
type PACMANPackageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageName         string `protobuf:"bytes,1,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	PackageVersion      string `protobuf:"bytes,2,opt,name=package_version,json=packageVersion,proto3" json:"package_version,omitempty"`
	OsId                string `protobuf:"bytes,3,opt,name=os_id,json=osId,proto3" json:"os_id,omitempty"`
	OsVersionId         string `protobuf:"bytes,4,opt,name=os_version_id,json=osVersionId,proto3" json:"os_version_id,omitempty"`
	PackageDescription  string `protobuf:"bytes,5,opt,name=package_description,json=packageDescription,proto3" json:"package_description,omitempty"`
	PackageDependencies string `protobuf:"bytes,6,opt,name=package_dependencies,json=packageDependencies,proto3" json:"package_dependencies,omitempty"`
}

func (x *PACMANPackageMetadata) Reset() {
	*x = PACMANPackageMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PACMANPackageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PACMANPackageMetadata) ProtoMessage() {}

func (x *PACMANPackageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PACMANPackageMetadata.ProtoReflect.Descriptor instead.
func (*PACMANPackageMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{22}
}

func (x *PACMANPackageMetadata) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *PACMANPackageMetadata) GetPackageVersion() string {
	if x != nil {
		return x.PackageVersion
	}
	return ""
}

func (x *PACMANPackageMetadata) GetOsId() string {
	if x != nil {
		return x.OsId
	}
	return ""
}

func (x *PACMANPackageMetadata) GetOsVersionId() string {
	if x != nil {
		return x.OsVersionId
	}
	return ""
}

func (x *PACMANPackageMetadata) GetPackageDescription() string {
	if x != nil {
		return x.PackageDescription
	}
	return ""
}

func (x *PACMANPackageMetadata) GetPackageDependencies() string {
	if x != nil {
		return x.PackageDependencies
	}
	return ""
}

// The additional data found in Nix packages.
type NixPackageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageName       string `protobuf:"bytes,1,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	PackageVersion    string `protobuf:"bytes,2,opt,name=package_version,json=packageVersion,proto3" json:"package_version,omitempty"`
	PackageHash       string `protobuf:"bytes,3,opt,name=package_hash,json=packageHash,proto3" json:"package_hash,omitempty"`
	PackageOutput     string `protobuf:"bytes,4,opt,name=package_output,json=packageOutput,proto3" json:"package_output,omitempty"`
	OsId              string `protobuf:"bytes,5,opt,name=os_id,json=osId,proto3" json:"os_id,omitempty"`
	OsVersionCodename string `protobuf:"bytes,6,opt,name=os_version_codename,json=osVersionCodename,proto3" json:"os_version_codename,omitempty"`
	OsVersionId       string `protobuf:"bytes,7,opt,name=os_version_id,json=osVersionId,proto3" json:"os_version_id,omitempty"`
}

func (x *NixPackageMetadata) Reset() {
	*x = NixPackageMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NixPackageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NixPackageMetadata) ProtoMessage() {}

func (x *NixPackageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NixPackageMetadata.ProtoReflect.Descriptor instead.
func (*NixPackageMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{23}
}

func (x *NixPackageMetadata) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *NixPackageMetadata) GetPackageVersion() string {
	if x != nil {
		return x.PackageVersion
	}
	return ""
}

func (x *NixPackageMetadata) GetPackageHash() string {
	if x != nil {
		return x.PackageHash
	}
	return ""
}

func (x *NixPackageMetadata) GetPackageOutput() string {
	if x != nil {
		return x.PackageOutput
	}
	return ""
}

func (x *NixPackageMetadata) GetOsId() string {
	if x != nil {
		return x.OsId
	}
	return ""
}

func (x *NixPackageMetadata) GetOsVersionCodename() string {
	if x != nil {
		return x.OsVersionCodename
	}
	return ""
}

func (x *NixPackageMetadata) GetOsVersionId() string {
	if x != nil {
		return x.OsVersionId
	}
	return ""
}

// The additional data found in .NET deps json packages.
type DEPSJSONMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageName    string `protobuf:"bytes,1,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	PackageVersion string `protobuf:"bytes,2,opt,name=package_version,json=packageVersion,proto3" json:"package_version,omitempty"`
	Type           string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *DEPSJSONMetadata) Reset() {
	*x = DEPSJSONMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DEPSJSONMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DEPSJSONMetadata) ProtoMessage() {}

func (x *DEPSJSONMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DEPSJSONMetadata.ProtoReflect.Descriptor instead.
func (*DEPSJSONMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{24}
}

func (x *DEPSJSONMetadata) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *DEPSJSONMetadata) GetPackageVersion() string {
	if x != nil {
		return x.PackageVersion
	}
	return ""
}

func (x *DEPSJSONMetadata) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// The additional data found in SNAP packages.
type SNAPPackageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version           string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Grade             string   `protobuf:"bytes,3,opt,name=grade,proto3" json:"grade,omitempty"`
	Type              string   `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Architectures     []string `protobuf:"bytes,5,rep,name=architectures,proto3" json:"architectures,omitempty"`
	OsId              string   `protobuf:"bytes,6,opt,name=os_id,json=osId,proto3" json:"os_id,omitempty"`
	OsVersionCodename string   `protobuf:"bytes,7,opt,name=os_version_codename,json=osVersionCodename,proto3" json:"os_version_codename,omitempty"`
	OsVersionId       string   `protobuf:"bytes,8,opt,name=os_version_id,json=osVersionId,proto3" json:"os_version_id,omitempty"`
}

func (x *SNAPPackageMetadata) Reset() {
	*x = SNAPPackageMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SNAPPackageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SNAPPackageMetadata) ProtoMessage() {}

func (x *SNAPPackageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SNAPPackageMetadata.ProtoReflect.Descriptor instead.
func (*SNAPPackageMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{25}
}

func (x *SNAPPackageMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SNAPPackageMetadata) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SNAPPackageMetadata) GetGrade() string {
	if x != nil {
		return x.Grade
	}
	return ""
}

func (x *SNAPPackageMetadata) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SNAPPackageMetadata) GetArchitectures() []string {
	if x != nil {
		return x.Architectures
	}
	return nil
}

func (x *SNAPPackageMetadata) GetOsId() string {
	if x != nil {
		return x.OsId
	}
	return ""
}

func (x *SNAPPackageMetadata) GetOsVersionCodename() string {
	if x != nil {
		return x.OsVersionCodename
	}
	return ""
}

func (x *SNAPPackageMetadata) GetOsVersionId() string {
	if x != nil {
		return x.OsVersionId
	}
	return ""
}

// The additional data found in portage packages.
type PortagePackageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageName    string `protobuf:"bytes,1,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	PackageVersion string `protobuf:"bytes,2,opt,name=package_version,json=packageVersion,proto3" json:"package_version,omitempty"`
	OsId           string `protobuf:"bytes,3,opt,name=os_id,json=osId,proto3" json:"os_id,omitempty"`
	OsVersionId    string `protobuf:"bytes,4,opt,name=os_version_id,json=osVersionId,proto3" json:"os_version_id,omitempty"`
}

func (x *PortagePackageMetadata) Reset() {
	*x = PortagePackageMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortagePackageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortagePackageMetadata) ProtoMessage() {}

func (x *PortagePackageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortagePackageMetadata.ProtoReflect.Descriptor instead.
func (*PortagePackageMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{26}
}

func (x *PortagePackageMetadata) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *PortagePackageMetadata) GetPackageVersion() string {
	if x != nil {
		return x.PackageVersion
	}
	return ""
}

func (x *PortagePackageMetadata) GetOsId() string {
	if x != nil {
		return x.OsId
	}
	return ""
}

func (x *PortagePackageMetadata) GetOsVersionId() string {
	if x != nil {
		return x.OsVersionId
	}
	return ""
}

// The additional data found in Flatpak packages.
type FlatpakPackageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageName    string `protobuf:"bytes,1,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	PackageId      string `protobuf:"bytes,2,opt,name=package_id,json=packageId,proto3" json:"package_id,omitempty"`
	PackageVersion string `protobuf:"bytes,3,opt,name=package_version,json=packageVersion,proto3" json:"package_version,omitempty"`
	ReleaseDate    string `protobuf:"bytes,4,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	OsName         string `protobuf:"bytes,5,opt,name=os_name,json=osName,proto3" json:"os_name,omitempty"`
	OsId           string `protobuf:"bytes,6,opt,name=os_id,json=osId,proto3" json:"os_id,omitempty"`
	OsVersionId    string `protobuf:"bytes,7,opt,name=os_version_id,json=osVersionId,proto3" json:"os_version_id,omitempty"`
	OsBuildId      string `protobuf:"bytes,8,opt,name=os_build_id,json=osBuildId,proto3" json:"os_build_id,omitempty"`
	Developer      string `protobuf:"bytes,9,opt,name=developer,proto3" json:"developer,omitempty"`
}

func (x *FlatpakPackageMetadata) Reset() {
	*x = FlatpakPackageMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlatpakPackageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlatpakPackageMetadata) ProtoMessage() {}

func (x *FlatpakPackageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlatpakPackageMetadata.ProtoReflect.Descriptor instead.
func (*FlatpakPackageMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{27}
}

func (x *FlatpakPackageMetadata) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *FlatpakPackageMetadata) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

func (x *FlatpakPackageMetadata) GetPackageVersion() string {
	if x != nil {
		return x.PackageVersion
	}
	return ""
}

func (x *FlatpakPackageMetadata) GetReleaseDate() string {
	if x != nil {
		return x.ReleaseDate
	}
	return ""
}

func (x *FlatpakPackageMetadata) GetOsName() string {
	if x != nil {
		return x.OsName
	}
	return ""
}

func (x *FlatpakPackageMetadata) GetOsId() string {
	if x != nil {
		return x.OsId
	}
	return ""
}

func (x *FlatpakPackageMetadata) GetOsVersionId() string {
	if x != nil {
		return x.OsVersionId
	}
	return ""
}

func (x *FlatpakPackageMetadata) GetOsBuildId() string {
	if x != nil {
		return x.OsBuildId
	}
	return ""
}

func (x *FlatpakPackageMetadata) GetDeveloper() string {
	if x != nil {
		return x.Developer
	}
	return ""
}

// The additional data found in MODULE packages.
type KernelModuleMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageName                    string `protobuf:"bytes,1,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	PackageVersion                 string `protobuf:"bytes,2,opt,name=package_version,json=packageVersion,proto3" json:"package_version,omitempty"`
	PackageVermagic                string `protobuf:"bytes,3,opt,name=package_vermagic,json=packageVermagic,proto3" json:"package_vermagic,omitempty"`
	PackageSourceVersionIdentifier string `protobuf:"bytes,4,opt,name=package_source_version_identifier,json=packageSourceVersionIdentifier,proto3" json:"package_source_version_identifier,omitempty"`
	OsId                           string `protobuf:"bytes,5,opt,name=os_id,json=osId,proto3" json:"os_id,omitempty"`
	OsVersionCodename              string `protobuf:"bytes,6,opt,name=os_version_codename,json=osVersionCodename,proto3" json:"os_version_codename,omitempty"`
	OsVersionId                    string `protobuf:"bytes,7,opt,name=os_version_id,json=osVersionId,proto3" json:"os_version_id,omitempty"`
	PackageAuthor                  string `protobuf:"bytes,8,opt,name=package_author,json=packageAuthor,proto3" json:"package_author,omitempty"`
}

func (x *KernelModuleMetadata) Reset() {
	*x = KernelModuleMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KernelModuleMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KernelModuleMetadata) ProtoMessage() {}

func (x *KernelModuleMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KernelModuleMetadata.ProtoReflect.Descriptor instead.
func (*KernelModuleMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{28}
}

func (x *KernelModuleMetadata) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *KernelModuleMetadata) GetPackageVersion() string {
	if x != nil {
		return x.PackageVersion
	}
	return ""
}

func (x *KernelModuleMetadata) GetPackageVermagic() string {
	if x != nil {
		return x.PackageVermagic
	}
	return ""
}

func (x *KernelModuleMetadata) GetPackageSourceVersionIdentifier() string {
	if x != nil {
		return x.PackageSourceVersionIdentifier
	}
	return ""
}

func (x *KernelModuleMetadata) GetOsId() string {
	if x != nil {
		return x.OsId
	}
	return ""
}

func (x *KernelModuleMetadata) GetOsVersionCodename() string {
	if x != nil {
		return x.OsVersionCodename
	}
	return ""
}

func (x *KernelModuleMetadata) GetOsVersionId() string {
	if x != nil {
		return x.OsVersionId
	}
	return ""
}

func (x *KernelModuleMetadata) GetPackageAuthor() string {
	if x != nil {
		return x.PackageAuthor
	}
	return ""
}

// The additional data found in Vmlinuz packages.
type VmlinuzMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version           string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Architecture      string `protobuf:"bytes,3,opt,name=architecture,proto3" json:"architecture,omitempty"`
	ExtendedVersion   string `protobuf:"bytes,4,opt,name=extended_version,json=extendedVersion,proto3" json:"extended_version,omitempty"`
	Format            string `protobuf:"bytes,5,opt,name=format,proto3" json:"format,omitempty"`
	SwapDevice        int32  `protobuf:"varint,6,opt,name=swap_device,json=swapDevice,proto3" json:"swap_device,omitempty"`
	RootDevice        int32  `protobuf:"varint,7,opt,name=root_device,json=rootDevice,proto3" json:"root_device,omitempty"`
	VideoMode         string `protobuf:"bytes,8,opt,name=video_mode,json=videoMode,proto3" json:"video_mode,omitempty"`
	OsId              string `protobuf:"bytes,9,opt,name=os_id,json=osId,proto3" json:"os_id,omitempty"`
	OsVersionCodename string `protobuf:"bytes,10,opt,name=os_version_codename,json=osVersionCodename,proto3" json:"os_version_codename,omitempty"`
	OsVersionId       string `protobuf:"bytes,11,opt,name=os_version_id,json=osVersionId,proto3" json:"os_version_id,omitempty"`
	RwRootFs          bool   `protobuf:"varint,12,opt,name=rw_root_fs,json=rwRootFs,proto3" json:"rw_root_fs,omitempty"`
}

func (x *VmlinuzMetadata) Reset() {
	*x = VmlinuzMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VmlinuzMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VmlinuzMetadata) ProtoMessage() {}

func (x *VmlinuzMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VmlinuzMetadata.ProtoReflect.Descriptor instead.
func (*VmlinuzMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{29}
}

func (x *VmlinuzMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VmlinuzMetadata) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *VmlinuzMetadata) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *VmlinuzMetadata) GetExtendedVersion() string {
	if x != nil {
		return x.ExtendedVersion
	}
	return ""
}

func (x *VmlinuzMetadata) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *VmlinuzMetadata) GetSwapDevice() int32 {
	if x != nil {
		return x.SwapDevice
	}
	return 0
}

func (x *VmlinuzMetadata) GetRootDevice() int32 {
	if x != nil {
		return x.RootDevice
	}
	return 0
}

func (x *VmlinuzMetadata) GetVideoMode() string {
	if x != nil {
		return x.VideoMode
	}
	return ""
}

func (x *VmlinuzMetadata) GetOsId() string {
	if x != nil {
		return x.OsId
	}
	return ""
}

func (x *VmlinuzMetadata) GetOsVersionCodename() string {
	if x != nil {
		return x.OsVersionCodename
	}
	return ""
}

func (x *VmlinuzMetadata) GetOsVersionId() string {
	if x != nil {
		return x.OsVersionId
	}
	return ""
}

func (x *VmlinuzMetadata) GetRwRootFs() bool {
	if x != nil {
		return x.RwRootFs
	}
	return false
}

// The additional data found in Mac Applications.
type MacAppsMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BundleDisplayName        string `protobuf:"bytes,1,opt,name=bundle_display_name,json=bundleDisplayName,proto3" json:"bundle_display_name,omitempty"`
	BundleIdentifier         string `protobuf:"bytes,2,opt,name=bundle_identifier,json=bundleIdentifier,proto3" json:"bundle_identifier,omitempty"`
	BundleShortVersionString string `protobuf:"bytes,3,opt,name=bundle_short_version_string,json=bundleShortVersionString,proto3" json:"bundle_short_version_string,omitempty"`
	BundleExecutable         string `protobuf:"bytes,4,opt,name=bundle_executable,json=bundleExecutable,proto3" json:"bundle_executable,omitempty"`
	BundleName               string `protobuf:"bytes,5,opt,name=bundle_name,json=bundleName,proto3" json:"bundle_name,omitempty"`
	BundlePackageType        string `protobuf:"bytes,6,opt,name=bundle_package_type,json=bundlePackageType,proto3" json:"bundle_package_type,omitempty"`
	BundleSignature          string `protobuf:"bytes,7,opt,name=bundle_signature,json=bundleSignature,proto3" json:"bundle_signature,omitempty"`
	BundleVersion            string `protobuf:"bytes,8,opt,name=bundle_version,json=bundleVersion,proto3" json:"bundle_version,omitempty"`
	ProductId                string `protobuf:"bytes,9,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	UpdateUrl                string `protobuf:"bytes,10,opt,name=update_url,json=updateUrl,proto3" json:"update_url,omitempty"`
}

func (x *MacAppsMetadata) Reset() {
	*x = MacAppsMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MacAppsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacAppsMetadata) ProtoMessage() {}

func (x *MacAppsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacAppsMetadata.ProtoReflect.Descriptor instead.
func (*MacAppsMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{30}
}

func (x *MacAppsMetadata) GetBundleDisplayName() string {
	if x != nil {
		return x.BundleDisplayName
	}
	return ""
}

func (x *MacAppsMetadata) GetBundleIdentifier() string {
	if x != nil {
		return x.BundleIdentifier
	}
	return ""
}

func (x *MacAppsMetadata) GetBundleShortVersionString() string {
	if x != nil {
		return x.BundleShortVersionString
	}
	return ""
}

func (x *MacAppsMetadata) GetBundleExecutable() string {
	if x != nil {
		return x.BundleExecutable
	}
	return ""
}

func (x *MacAppsMetadata) GetBundleName() string {
	if x != nil {
		return x.BundleName
	}
	return ""
}

func (x *MacAppsMetadata) GetBundlePackageType() string {
	if x != nil {
		return x.BundlePackageType
	}
	return ""
}

func (x *MacAppsMetadata) GetBundleSignature() string {
	if x != nil {
		return x.BundleSignature
	}
	return ""
}

func (x *MacAppsMetadata) GetBundleVersion() string {
	if x != nil {
		return x.BundleVersion
	}
	return ""
}

func (x *MacAppsMetadata) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *MacAppsMetadata) GetUpdateUrl() string {
	if x != nil {
		return x.UpdateUrl
	}
	return ""
}

// The additional data found in Macports packages.
type MacportsPackageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageName     string `protobuf:"bytes,1,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	PackageVersion  string `protobuf:"bytes,2,opt,name=package_version,json=packageVersion,proto3" json:"package_version,omitempty"`
	PackageRevision string `protobuf:"bytes,3,opt,name=package_revision,json=packageRevision,proto3" json:"package_revision,omitempty"`
}

func (x *MacportsPackageMetadata) Reset() {
	*x = MacportsPackageMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MacportsPackageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacportsPackageMetadata) ProtoMessage() {}

func (x *MacportsPackageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacportsPackageMetadata.ProtoReflect.Descriptor instead.
func (*MacportsPackageMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{31}
}

func (x *MacportsPackageMetadata) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *MacportsPackageMetadata) GetPackageVersion() string {
	if x != nil {
		return x.PackageVersion
	}
	return ""
}

func (x *MacportsPackageMetadata) GetPackageRevision() string {
	if x != nil {
		return x.PackageRevision
	}
	return ""
}

// The additional data for packages extracted from SPDX files.
type SPDXPackageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Purl *Purl    `protobuf:"bytes,1,opt,name=purl,proto3" json:"purl,omitempty"`
	Cpes []string `protobuf:"bytes,2,rep,name=cpes,proto3" json:"cpes,omitempty"`
}

func (x *SPDXPackageMetadata) Reset() {
	*x = SPDXPackageMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SPDXPackageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SPDXPackageMetadata) ProtoMessage() {}

func (x *SPDXPackageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SPDXPackageMetadata.ProtoReflect.Descriptor instead.
func (*SPDXPackageMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{32}
}

func (x *SPDXPackageMetadata) GetPurl() *Purl {
	if x != nil {
		return x.Purl
	}
	return nil
}

func (x *SPDXPackageMetadata) GetCpes() []string {
	if x != nil {
		return x.Cpes
	}
	return nil
}

// The additional data for packages extracted from CDX files.
type CDXPackageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Purl *Purl    `protobuf:"bytes,1,opt,name=purl,proto3" json:"purl,omitempty"`
	Cpes []string `protobuf:"bytes,2,rep,name=cpes,proto3" json:"cpes,omitempty"`
}

func (x *CDXPackageMetadata) Reset() {
	*x = CDXPackageMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDXPackageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDXPackageMetadata) ProtoMessage() {}

func (x *CDXPackageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDXPackageMetadata.ProtoReflect.Descriptor instead.
func (*CDXPackageMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{33}
}

func (x *CDXPackageMetadata) GetPurl() *Purl {
	if x != nil {
		return x.Purl
	}
	return nil
}

func (x *CDXPackageMetadata) GetCpes() []string {
	if x != nil {
		return x.Cpes
	}
	return nil
}

// The additional data found in Java JAR packages.
type JavaArchiveMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArtifactId string `protobuf:"bytes,2,opt,name=artifact_id,json=artifactId,proto3" json:"artifact_id,omitempty"`
	GroupId    string `protobuf:"bytes,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Sha1       string `protobuf:"bytes,4,opt,name=sha1,proto3" json:"sha1,omitempty"`
}

func (x *JavaArchiveMetadata) Reset() {
	*x = JavaArchiveMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JavaArchiveMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JavaArchiveMetadata) ProtoMessage() {}

func (x *JavaArchiveMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JavaArchiveMetadata.ProtoReflect.Descriptor instead.
func (*JavaArchiveMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{34}
}

func (x *JavaArchiveMetadata) GetArtifactId() string {
	if x != nil {
		return x.ArtifactId
	}
	return ""
}

func (x *JavaArchiveMetadata) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *JavaArchiveMetadata) GetSha1() string {
	if x != nil {
		return x.Sha1
	}
	return ""
}

// The additional data found in Java lockfiles.
type JavaLockfileMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArtifactId   string   `protobuf:"bytes,1,opt,name=artifact_id,json=artifactId,proto3" json:"artifact_id,omitempty"`
	GroupId      string   `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	DepGroupVals []string `protobuf:"bytes,3,rep,name=dep_group_vals,json=depGroupVals,proto3" json:"dep_group_vals,omitempty"`
	IsTransitive bool     `protobuf:"varint,4,opt,name=is_transitive,json=isTransitive,proto3" json:"is_transitive,omitempty"`
}

func (x *JavaLockfileMetadata) Reset() {
	*x = JavaLockfileMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JavaLockfileMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JavaLockfileMetadata) ProtoMessage() {}

func (x *JavaLockfileMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JavaLockfileMetadata.ProtoReflect.Descriptor instead.
func (*JavaLockfileMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{35}
}

func (x *JavaLockfileMetadata) GetArtifactId() string {
	if x != nil {
		return x.ArtifactId
	}
	return ""
}

func (x *JavaLockfileMetadata) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *JavaLockfileMetadata) GetDepGroupVals() []string {
	if x != nil {
		return x.DepGroupVals
	}
	return nil
}

func (x *JavaLockfileMetadata) GetIsTransitive() bool {
	if x != nil {
		return x.IsTransitive
	}
	return false
}

// The additional data for packages extracted by an OSV extractor wrapper.
type OSVPackageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PurlType  string `protobuf:"bytes,1,opt,name=purl_type,json=purlType,proto3" json:"purl_type,omitempty"`
	Commit    string `protobuf:"bytes,2,opt,name=commit,proto3" json:"commit,omitempty"`
	Ecosystem string `protobuf:"bytes,3,opt,name=ecosystem,proto3" json:"ecosystem,omitempty"`
	CompareAs string `protobuf:"bytes,4,opt,name=compare_as,json=compareAs,proto3" json:"compare_as,omitempty"`
}

func (x *OSVPackageMetadata) Reset() {
	*x = OSVPackageMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OSVPackageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSVPackageMetadata) ProtoMessage() {}

func (x *OSVPackageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSVPackageMetadata.ProtoReflect.Descriptor instead.
func (*OSVPackageMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{36}
}

func (x *OSVPackageMetadata) GetPurlType() string {
	if x != nil {
		return x.PurlType
	}
	return ""
}

func (x *OSVPackageMetadata) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *OSVPackageMetadata) GetEcosystem() string {
	if x != nil {
		return x.Ecosystem
	}
	return ""
}

func (x *OSVPackageMetadata) GetCompareAs() string {
	if x != nil {
		return x.CompareAs
	}
	return ""
}

type PythonRequirementsMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HashCheckingModeValues []string `protobuf:"bytes,1,rep,name=hash_checking_mode_values,json=hashCheckingModeValues,proto3" json:"hash_checking_mode_values,omitempty"`
	VersionComparator      string   `protobuf:"bytes,2,opt,name=version_comparator,json=versionComparator,proto3" json:"version_comparator,omitempty"`
	Requirement            string   `protobuf:"bytes,3,opt,name=requirement,proto3" json:"requirement,omitempty"`
}

func (x *PythonRequirementsMetadata) Reset() {
	*x = PythonRequirementsMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PythonRequirementsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PythonRequirementsMetadata) ProtoMessage() {}

func (x *PythonRequirementsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PythonRequirementsMetadata.ProtoReflect.Descriptor instead.
func (*PythonRequirementsMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{37}
}

func (x *PythonRequirementsMetadata) GetHashCheckingModeValues() []string {
	if x != nil {
		return x.HashCheckingModeValues
	}
	return nil
}

func (x *PythonRequirementsMetadata) GetVersionComparator() string {
	if x != nil {
		return x.VersionComparator
	}
	return ""
}

func (x *PythonRequirementsMetadata) GetRequirement() string {
	if x != nil {
		return x.Requirement
	}
	return ""
}

type PythonSetupMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionComparator string `protobuf:"bytes,2,opt,name=version_comparator,json=versionComparator,proto3" json:"version_comparator,omitempty"`
}

func (x *PythonSetupMetadata) Reset() {
	*x = PythonSetupMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PythonSetupMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PythonSetupMetadata) ProtoMessage() {}

func (x *PythonSetupMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PythonSetupMetadata.ProtoReflect.Descriptor instead.
func (*PythonSetupMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{38}
}

func (x *PythonSetupMetadata) GetVersionComparator() string {
	if x != nil {
		return x.VersionComparator
	}
	return ""
}

// Used to report open ports on a system.
type NetportsMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port        uint32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Protocol    string `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	CommandLine string `protobuf:"bytes,3,opt,name=command_line,json=commandLine,proto3" json:"command_line,omitempty"`
}

func (x *NetportsMetadata) Reset() {
	*x = NetportsMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetportsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetportsMetadata) ProtoMessage() {}

func (x *NetportsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetportsMetadata.ProtoReflect.Descriptor instead.
func (*NetportsMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{39}
}

func (x *NetportsMetadata) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *NetportsMetadata) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *NetportsMetadata) GetCommandLine() string {
	if x != nil {
		return x.CommandLine
	}
	return ""
}

type ContainerdContainerMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceName string `protobuf:"bytes,1,opt,name=namespace_name,json=namespaceName,proto3" json:"namespace_name,omitempty"`
	ImageName     string `protobuf:"bytes,2,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	ImageDigest   string `protobuf:"bytes,3,opt,name=image_digest,json=imageDigest,proto3" json:"image_digest,omitempty"`
	Runtime       string `protobuf:"bytes,4,opt,name=runtime,proto3" json:"runtime,omitempty"`
	Pid           int32  `protobuf:"varint,5,opt,name=pid,proto3" json:"pid,omitempty"`
	Snapshotter   string `protobuf:"bytes,6,opt,name=snapshotter,proto3" json:"snapshotter,omitempty"`
	SnapshotKey   string `protobuf:"bytes,7,opt,name=snapshot_key,json=snapshotKey,proto3" json:"snapshot_key,omitempty"`
	LowerDir      string `protobuf:"bytes,8,opt,name=lower_dir,json=lowerDir,proto3" json:"lower_dir,omitempty"`
	UpperDir      string `protobuf:"bytes,9,opt,name=upper_dir,json=upperDir,proto3" json:"upper_dir,omitempty"`
	WorkDir       string `protobuf:"bytes,10,opt,name=work_dir,json=workDir,proto3" json:"work_dir,omitempty"`
	Id            string `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
	PodName       string `protobuf:"bytes,12,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	PodNamespace  string `protobuf:"bytes,13,opt,name=pod_namespace,json=podNamespace,proto3" json:"pod_namespace,omitempty"`
}

func (x *ContainerdContainerMetadata) Reset() {
	*x = ContainerdContainerMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerdContainerMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerdContainerMetadata) ProtoMessage() {}

func (x *ContainerdContainerMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerdContainerMetadata.ProtoReflect.Descriptor instead.
func (*ContainerdContainerMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{40}
}

func (x *ContainerdContainerMetadata) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *ContainerdContainerMetadata) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *ContainerdContainerMetadata) GetImageDigest() string {
	if x != nil {
		return x.ImageDigest
	}
	return ""
}

func (x *ContainerdContainerMetadata) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *ContainerdContainerMetadata) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ContainerdContainerMetadata) GetSnapshotter() string {
	if x != nil {
		return x.Snapshotter
	}
	return ""
}

func (x *ContainerdContainerMetadata) GetSnapshotKey() string {
	if x != nil {
		return x.SnapshotKey
	}
	return ""
}

func (x *ContainerdContainerMetadata) GetLowerDir() string {
	if x != nil {
		return x.LowerDir
	}
	return ""
}

func (x *ContainerdContainerMetadata) GetUpperDir() string {
	if x != nil {
		return x.UpperDir
	}
	return ""
}

func (x *ContainerdContainerMetadata) GetWorkDir() string {
	if x != nil {
		return x.WorkDir
	}
	return ""
}

func (x *ContainerdContainerMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ContainerdContainerMetadata) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *ContainerdContainerMetadata) GetPodNamespace() string {
	if x != nil {
		return x.PodNamespace
	}
	return ""
}

type ContainerdRuntimeContainerMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceName string `protobuf:"bytes,1,opt,name=namespace_name,json=namespaceName,proto3" json:"namespace_name,omitempty"`
	ImageName     string `protobuf:"bytes,2,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	ImageDigest   string `protobuf:"bytes,3,opt,name=image_digest,json=imageDigest,proto3" json:"image_digest,omitempty"`
	Runtime       string `protobuf:"bytes,4,opt,name=runtime,proto3" json:"runtime,omitempty"`
	Id            string `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	Pid           int32  `protobuf:"varint,6,opt,name=pid,proto3" json:"pid,omitempty"`
	RootfsPath    string `protobuf:"bytes,7,opt,name=rootfs_path,json=rootfsPath,proto3" json:"rootfs_path,omitempty"`
}

func (x *ContainerdRuntimeContainerMetadata) Reset() {
	*x = ContainerdRuntimeContainerMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerdRuntimeContainerMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerdRuntimeContainerMetadata) ProtoMessage() {}

func (x *ContainerdRuntimeContainerMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerdRuntimeContainerMetadata.ProtoReflect.Descriptor instead.
func (*ContainerdRuntimeContainerMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{41}
}

func (x *ContainerdRuntimeContainerMetadata) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *ContainerdRuntimeContainerMetadata) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *ContainerdRuntimeContainerMetadata) GetImageDigest() string {
	if x != nil {
		return x.ImageDigest
	}
	return ""
}

func (x *ContainerdRuntimeContainerMetadata) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *ContainerdRuntimeContainerMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ContainerdRuntimeContainerMetadata) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ContainerdRuntimeContainerMetadata) GetRootfsPath() string {
	if x != nil {
		return x.RootfsPath
	}
	return ""
}

type WindowsOSVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Product     string `protobuf:"bytes,1,opt,name=product,proto3" json:"product,omitempty"`
	FullVersion string `protobuf:"bytes,2,opt,name=full_version,json=fullVersion,proto3" json:"full_version,omitempty"`
}

func (x *WindowsOSVersion) Reset() {
	*x = WindowsOSVersion{}
	mi := &file_proto_scan_result_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WindowsOSVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowsOSVersion) ProtoMessage() {}

func (x *WindowsOSVersion) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowsOSVersion.ProtoReflect.Descriptor instead.
func (*WindowsOSVersion) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{42}
}

func (x *WindowsOSVersion) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *WindowsOSVersion) GetFullVersion() string {
	if x != nil {
		return x.FullVersion
	}
	return ""
}

// The additional data found in Homebrew packages.
type HomebrewPackageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HomebrewPackageMetadata) Reset() {
	*x = HomebrewPackageMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HomebrewPackageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomebrewPackageMetadata) ProtoMessage() {}

func (x *HomebrewPackageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomebrewPackageMetadata.ProtoReflect.Descriptor instead.
func (*HomebrewPackageMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{43}
}

// The additional data found in Chrome extensions.
type ChromeExtensionsMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	AuthorEmail          string   `protobuf:"bytes,3,opt,name=author_email,json=authorEmail,proto3" json:"author_email,omitempty"`
	HostPermissions      []string `protobuf:"bytes,4,rep,name=host_permissions,json=hostPermissions,proto3" json:"host_permissions,omitempty"`
	ManifestVersion      int32    `protobuf:"varint,5,opt,name=manifest_version,json=manifestVersion,proto3" json:"manifest_version,omitempty"`
	MinimumChromeVersion string   `protobuf:"bytes,6,opt,name=minimum_chrome_version,json=minimumChromeVersion,proto3" json:"minimum_chrome_version,omitempty"`
	Permissions          []string `protobuf:"bytes,7,rep,name=permissions,proto3" json:"permissions,omitempty"`
	UpdateUrl            string   `protobuf:"bytes,8,opt,name=update_url,json=updateUrl,proto3" json:"update_url,omitempty"`
}

func (x *ChromeExtensionsMetadata) Reset() {
	*x = ChromeExtensionsMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChromeExtensionsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeExtensionsMetadata) ProtoMessage() {}

func (x *ChromeExtensionsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeExtensionsMetadata.ProtoReflect.Descriptor instead.
func (*ChromeExtensionsMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{44}
}

func (x *ChromeExtensionsMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChromeExtensionsMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ChromeExtensionsMetadata) GetAuthorEmail() string {
	if x != nil {
		return x.AuthorEmail
	}
	return ""
}

func (x *ChromeExtensionsMetadata) GetHostPermissions() []string {
	if x != nil {
		return x.HostPermissions
	}
	return nil
}

func (x *ChromeExtensionsMetadata) GetManifestVersion() int32 {
	if x != nil {
		return x.ManifestVersion
	}
	return 0
}

func (x *ChromeExtensionsMetadata) GetMinimumChromeVersion() string {
	if x != nil {
		return x.MinimumChromeVersion
	}
	return ""
}

func (x *ChromeExtensionsMetadata) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *ChromeExtensionsMetadata) GetUpdateUrl() string {
	if x != nil {
		return x.UpdateUrl
	}
	return ""
}

// The additional data found in VSCode extensions.
type VSCodeExtensionsMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PublisherId          string `protobuf:"bytes,2,opt,name=publisher_id,json=publisherId,proto3" json:"publisher_id,omitempty"`
	PublisherDisplayName string `protobuf:"bytes,3,opt,name=publisher_display_name,json=publisherDisplayName,proto3" json:"publisher_display_name,omitempty"`
	TargetPlatform       string `protobuf:"bytes,4,opt,name=target_platform,json=targetPlatform,proto3" json:"target_platform,omitempty"`
	Updated              bool   `protobuf:"varint,5,opt,name=updated,proto3" json:"updated,omitempty"`
	IsPreReleaseVersion  bool   `protobuf:"varint,6,opt,name=is_pre_release_version,json=isPreReleaseVersion,proto3" json:"is_pre_release_version,omitempty"`
	InstalledTimestamp   int64  `protobuf:"varint,7,opt,name=installed_timestamp,json=installedTimestamp,proto3" json:"installed_timestamp,omitempty"`
}

func (x *VSCodeExtensionsMetadata) Reset() {
	*x = VSCodeExtensionsMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VSCodeExtensionsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VSCodeExtensionsMetadata) ProtoMessage() {}

func (x *VSCodeExtensionsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VSCodeExtensionsMetadata.ProtoReflect.Descriptor instead.
func (*VSCodeExtensionsMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{45}
}

func (x *VSCodeExtensionsMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VSCodeExtensionsMetadata) GetPublisherId() string {
	if x != nil {
		return x.PublisherId
	}
	return ""
}

func (x *VSCodeExtensionsMetadata) GetPublisherDisplayName() string {
	if x != nil {
		return x.PublisherDisplayName
	}
	return ""
}

func (x *VSCodeExtensionsMetadata) GetTargetPlatform() string {
	if x != nil {
		return x.TargetPlatform
	}
	return ""
}

func (x *VSCodeExtensionsMetadata) GetUpdated() bool {
	if x != nil {
		return x.Updated
	}
	return false
}

func (x *VSCodeExtensionsMetadata) GetIsPreReleaseVersion() bool {
	if x != nil {
		return x.IsPreReleaseVersion
	}
	return false
}

func (x *VSCodeExtensionsMetadata) GetInstalledTimestamp() int64 {
	if x != nil {
		return x.InstalledTimestamp
	}
	return 0
}

// The additional data found in Podman containers.
type PodmanMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExposedPorts  map[uint32]*Protocol   `protobuf:"bytes,1,rep,name=exposed_ports,json=exposedPorts,proto3" json:"exposed_ports,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Pid           int32                  `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	NamespaceName string                 `protobuf:"bytes,3,opt,name=namespace_name,json=namespaceName,proto3" json:"namespace_name,omitempty"`
	StartedTime   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=started_time,json=startedTime,proto3" json:"started_time,omitempty"`
	FinishedTime  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=finished_time,json=finishedTime,proto3" json:"finished_time,omitempty"`
	Status        string                 `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	ExitCode      int32                  `protobuf:"varint,7,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	Exited        bool                   `protobuf:"varint,8,opt,name=exited,proto3" json:"exited,omitempty"`
}

func (x *PodmanMetadata) Reset() {
	*x = PodmanMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PodmanMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodmanMetadata) ProtoMessage() {}

func (x *PodmanMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodmanMetadata.ProtoReflect.Descriptor instead.
func (*PodmanMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{46}
}

func (x *PodmanMetadata) GetExposedPorts() map[uint32]*Protocol {
	if x != nil {
		return x.ExposedPorts
	}
	return nil
}

func (x *PodmanMetadata) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *PodmanMetadata) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *PodmanMetadata) GetStartedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedTime
	}
	return nil
}

func (x *PodmanMetadata) GetFinishedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishedTime
	}
	return nil
}

func (x *PodmanMetadata) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PodmanMetadata) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *PodmanMetadata) GetExited() bool {
	if x != nil {
		return x.Exited
	}
	return false
}

type Protocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *Protocol) Reset() {
	*x = Protocol{}
	mi := &file_proto_scan_result_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Protocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Protocol) ProtoMessage() {}

func (x *Protocol) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Protocol.ProtoReflect.Descriptor instead.
func (*Protocol) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{47}
}

func (x *Protocol) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type DockerContainersMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageName   string        `protobuf:"bytes,1,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	ImageDigest string        `protobuf:"bytes,2,opt,name=image_digest,json=imageDigest,proto3" json:"image_digest,omitempty"`
	Id          string        `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Ports       []*DockerPort `protobuf:"bytes,4,rep,name=ports,proto3" json:"ports,omitempty"`
}

func (x *DockerContainersMetadata) Reset() {
	*x = DockerContainersMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DockerContainersMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerContainersMetadata) ProtoMessage() {}

func (x *DockerContainersMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerContainersMetadata.ProtoReflect.Descriptor instead.
func (*DockerContainersMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{48}
}

func (x *DockerContainersMetadata) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *DockerContainersMetadata) GetImageDigest() string {
	if x != nil {
		return x.ImageDigest
	}
	return ""
}

func (x *DockerContainersMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DockerContainersMetadata) GetPorts() []*DockerPort {
	if x != nil {
		return x.Ports
	}
	return nil
}

type AsdfMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToolName    string `protobuf:"bytes,1,opt,name=tool_name,json=toolName,proto3" json:"tool_name,omitempty"`
	ToolVersion string `protobuf:"bytes,2,opt,name=tool_version,json=toolVersion,proto3" json:"tool_version,omitempty"`
}

func (x *AsdfMetadata) Reset() {
	*x = AsdfMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AsdfMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsdfMetadata) ProtoMessage() {}

func (x *AsdfMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsdfMetadata.ProtoReflect.Descriptor instead.
func (*AsdfMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{49}
}

func (x *AsdfMetadata) GetToolName() string {
	if x != nil {
		return x.ToolName
	}
	return ""
}

func (x *AsdfMetadata) GetToolVersion() string {
	if x != nil {
		return x.ToolVersion
	}
	return ""
}

type NvmMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodejsVersion string `protobuf:"bytes,2,opt,name=nodejs_version,json=nodejsVersion,proto3" json:"nodejs_version,omitempty"`
}

func (x *NvmMetadata) Reset() {
	*x = NvmMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NvmMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvmMetadata) ProtoMessage() {}

func (x *NvmMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvmMetadata.ProtoReflect.Descriptor instead.
func (*NvmMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{50}
}

func (x *NvmMetadata) GetNodejsVersion() string {
	if x != nil {
		return x.NodejsVersion
	}
	return ""
}

type NodeVersionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodejsVersion string `protobuf:"bytes,2,opt,name=nodejs_version,json=nodejsVersion,proto3" json:"nodejs_version,omitempty"`
}

func (x *NodeVersionMetadata) Reset() {
	*x = NodeVersionMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeVersionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeVersionMetadata) ProtoMessage() {}

func (x *NodeVersionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeVersionMetadata.ProtoReflect.Descriptor instead.
func (*NodeVersionMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{51}
}

func (x *NodeVersionMetadata) GetNodejsVersion() string {
	if x != nil {
		return x.NodejsVersion
	}
	return ""
}

type DockerPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip          string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	PrivatePort uint32 `protobuf:"varint,2,opt,name=private_port,json=privatePort,proto3" json:"private_port,omitempty"`
	PublicPort  uint32 `protobuf:"varint,3,opt,name=public_port,json=publicPort,proto3" json:"public_port,omitempty"`
	Type        string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *DockerPort) Reset() {
	*x = DockerPort{}
	mi := &file_proto_scan_result_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DockerPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerPort) ProtoMessage() {}

func (x *DockerPort) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerPort.ProtoReflect.Descriptor instead.
func (*DockerPort) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{52}
}

func (x *DockerPort) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *DockerPort) GetPrivatePort() uint32 {
	if x != nil {
		return x.PrivatePort
	}
	return 0
}

func (x *DockerPort) GetPublicPort() uint32 {
	if x != nil {
		return x.PublicPort
	}
	return 0
}

func (x *DockerPort) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// The additional data found in Windows Package Manager (Winget) packages.
type WingetPackageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id       string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Version  string   `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Moniker  string   `protobuf:"bytes,4,opt,name=moniker,proto3" json:"moniker,omitempty"`
	Channel  string   `protobuf:"bytes,5,opt,name=channel,proto3" json:"channel,omitempty"`
	Tags     []string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	Commands []string `protobuf:"bytes,7,rep,name=commands,proto3" json:"commands,omitempty"`
}

func (x *WingetPackageMetadata) Reset() {
	*x = WingetPackageMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WingetPackageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WingetPackageMetadata) ProtoMessage() {}

func (x *WingetPackageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WingetPackageMetadata.ProtoReflect.Descriptor instead.
func (*WingetPackageMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{53}
}

func (x *WingetPackageMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WingetPackageMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WingetPackageMetadata) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *WingetPackageMetadata) GetMoniker() string {
	if x != nil {
		return x.Moniker
	}
	return ""
}

func (x *WingetPackageMetadata) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *WingetPackageMetadata) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *WingetPackageMetadata) GetCommands() []string {
	if x != nil {
		return x.Commands
	}
	return nil
}

// A secret (i.e. credential) found by Veles secret scanning.
type Secret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secret    *SecretData   `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
	Status    *SecretStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Locations []*Location   `protobuf:"bytes,3,rep,name=locations,proto3" json:"locations,omitempty"`
}

func (x *Secret) Reset() {
	*x = Secret{}
	mi := &file_proto_scan_result_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Secret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secret) ProtoMessage() {}

func (x *Secret) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secret.ProtoReflect.Descriptor instead.
func (*Secret) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{54}
}

func (x *Secret) GetSecret() *SecretData {
	if x != nil {
		return x.Secret
	}
	return nil
}

func (x *Secret) GetStatus() *SecretStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Secret) GetLocations() []*Location {
	if x != nil {
		return x.Locations
	}
	return nil
}

type SecretData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Secret:
	//
	//	*SecretData_Gcpsak
	//	*SecretData_AnthropicWorkspaceApiKey
	//	*SecretData_AnthropicModelApiKey
	//	*SecretData_Perplexity
	//	*SecretData_PrivateKey_
	//	*SecretData_GrokXaiApiKey
	//	*SecretData_GrokXaiManagementApiKey
	//	*SecretData_DockerHubPat_
	//	*SecretData_Digitalocean
	//	*SecretData_OpenaiApiKey
	//	*SecretData_PostmanApiKey
	//	*SecretData_PostmanCollectionAccessToken_
	//	*SecretData_AzureAccessToken_
	//	*SecretData_AzureIdentityToken_
	//	*SecretData_TinkKeyset_
	//	*SecretData_GitlabPat_
	//	*SecretData_HashicorpVaultToken
	//	*SecretData_HashicorpVaultAppRoleCredentials
	//	*SecretData_GcpApiKey
	//	*SecretData_Hugginface
	//	*SecretData_GithubAppRefreshToken_
	//	*SecretData_StripeSecretKey_
	//	*SecretData_StripeRestrictedKey_
	//	*SecretData_StripeWebhookSecret_
	//	*SecretData_GcpOauth2ClientCredentials
	//	*SecretData_GcpOauth2AccessToken
	//	*SecretData_GithubAppServerToServerToken_
	//	*SecretData_GithubClassicPersonalAccessToken_
	//	*SecretData_GithubFineGrainedPersonalAccessToken_
	//	*SecretData_GithubAppUserToServerToken_
	//	*SecretData_GithubOauthToken
	//	*SecretData_SlackAppConfigRefreshToken_
	//	*SecretData_SlackAppLevelToken_
	//	*SecretData_SlackAppConfigAccessToken_
	//	*SecretData_AzureStorageAccountAccessKey_
	//	*SecretData_HashicorpCloudPlatformCredentials
	//	*SecretData_HashicorpCloudPlatformToken
	//	*SecretData_OnepasswordSecretKey
	//	*SecretData_OnepasswordServiceToken
	//	*SecretData_OnepasswordRecoveryCode
	//	*SecretData_OnepasswordConnectToken
	//	*SecretData_Pgpass_
	//	*SecretData_Pypi
	//	*SecretData_CratesIoApiToken
	//	*SecretData_MariaDbCredentials
	Secret isSecretData_Secret `protobuf_oneof:"secret"`
}

func (x *SecretData) Reset() {
	*x = SecretData{}
	mi := &file_proto_scan_result_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData) ProtoMessage() {}

func (x *SecretData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData.ProtoReflect.Descriptor instead.
func (*SecretData) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55}
}

func (m *SecretData) GetSecret() isSecretData_Secret {
	if m != nil {
		return m.Secret
	}
	return nil
}

func (x *SecretData) GetGcpsak() *SecretData_GCPSAK {
	if x, ok := x.GetSecret().(*SecretData_Gcpsak); ok {
		return x.Gcpsak
	}
	return nil
}

func (x *SecretData) GetAnthropicWorkspaceApiKey() *SecretData_AnthropicWorkspaceAPIKey {
	if x, ok := x.GetSecret().(*SecretData_AnthropicWorkspaceApiKey); ok {
		return x.AnthropicWorkspaceApiKey
	}
	return nil
}

func (x *SecretData) GetAnthropicModelApiKey() *SecretData_AnthropicModelAPIKey {
	if x, ok := x.GetSecret().(*SecretData_AnthropicModelApiKey); ok {
		return x.AnthropicModelApiKey
	}
	return nil
}

func (x *SecretData) GetPerplexity() *SecretData_PerplexityAPIKey {
	if x, ok := x.GetSecret().(*SecretData_Perplexity); ok {
		return x.Perplexity
	}
	return nil
}

func (x *SecretData) GetPrivateKey() *SecretData_PrivateKey {
	if x, ok := x.GetSecret().(*SecretData_PrivateKey_); ok {
		return x.PrivateKey
	}
	return nil
}

func (x *SecretData) GetGrokXaiApiKey() *SecretData_GrokXAIAPIKey {
	if x, ok := x.GetSecret().(*SecretData_GrokXaiApiKey); ok {
		return x.GrokXaiApiKey
	}
	return nil
}

func (x *SecretData) GetGrokXaiManagementApiKey() *SecretData_GrokXAIManagementAPIKey {
	if x, ok := x.GetSecret().(*SecretData_GrokXaiManagementApiKey); ok {
		return x.GrokXaiManagementApiKey
	}
	return nil
}

func (x *SecretData) GetDockerHubPat() *SecretData_DockerHubPat {
	if x, ok := x.GetSecret().(*SecretData_DockerHubPat_); ok {
		return x.DockerHubPat
	}
	return nil
}

func (x *SecretData) GetDigitalocean() *SecretData_DigitalOceanAPIToken {
	if x, ok := x.GetSecret().(*SecretData_Digitalocean); ok {
		return x.Digitalocean
	}
	return nil
}

func (x *SecretData) GetOpenaiApiKey() *SecretData_OpenAIAPIKey {
	if x, ok := x.GetSecret().(*SecretData_OpenaiApiKey); ok {
		return x.OpenaiApiKey
	}
	return nil
}

func (x *SecretData) GetPostmanApiKey() *SecretData_PostmanAPIKey {
	if x, ok := x.GetSecret().(*SecretData_PostmanApiKey); ok {
		return x.PostmanApiKey
	}
	return nil
}

func (x *SecretData) GetPostmanCollectionAccessToken() *SecretData_PostmanCollectionAccessToken {
	if x, ok := x.GetSecret().(*SecretData_PostmanCollectionAccessToken_); ok {
		return x.PostmanCollectionAccessToken
	}
	return nil
}

func (x *SecretData) GetAzureAccessToken() *SecretData_AzureAccessToken {
	if x, ok := x.GetSecret().(*SecretData_AzureAccessToken_); ok {
		return x.AzureAccessToken
	}
	return nil
}

func (x *SecretData) GetAzureIdentityToken() *SecretData_AzureIdentityToken {
	if x, ok := x.GetSecret().(*SecretData_AzureIdentityToken_); ok {
		return x.AzureIdentityToken
	}
	return nil
}

func (x *SecretData) GetTinkKeyset() *SecretData_TinkKeyset {
	if x, ok := x.GetSecret().(*SecretData_TinkKeyset_); ok {
		return x.TinkKeyset
	}
	return nil
}

func (x *SecretData) GetGitlabPat() *SecretData_GitlabPat {
	if x, ok := x.GetSecret().(*SecretData_GitlabPat_); ok {
		return x.GitlabPat
	}
	return nil
}

func (x *SecretData) GetHashicorpVaultToken() *SecretData_HashiCorpVaultToken {
	if x, ok := x.GetSecret().(*SecretData_HashicorpVaultToken); ok {
		return x.HashicorpVaultToken
	}
	return nil
}

func (x *SecretData) GetHashicorpVaultAppRoleCredentials() *SecretData_HashiCorpVaultAppRoleCredentials {
	if x, ok := x.GetSecret().(*SecretData_HashicorpVaultAppRoleCredentials); ok {
		return x.HashicorpVaultAppRoleCredentials
	}
	return nil
}

func (x *SecretData) GetGcpApiKey() *SecretData_GCPAPIKey {
	if x, ok := x.GetSecret().(*SecretData_GcpApiKey); ok {
		return x.GcpApiKey
	}
	return nil
}

func (x *SecretData) GetHugginface() *SecretData_HuggingfaceAPIKey {
	if x, ok := x.GetSecret().(*SecretData_Hugginface); ok {
		return x.Hugginface
	}
	return nil
}

func (x *SecretData) GetGithubAppRefreshToken() *SecretData_GithubAppRefreshToken {
	if x, ok := x.GetSecret().(*SecretData_GithubAppRefreshToken_); ok {
		return x.GithubAppRefreshToken
	}
	return nil
}

func (x *SecretData) GetStripeSecretKey() *SecretData_StripeSecretKey {
	if x, ok := x.GetSecret().(*SecretData_StripeSecretKey_); ok {
		return x.StripeSecretKey
	}
	return nil
}

func (x *SecretData) GetStripeRestrictedKey() *SecretData_StripeRestrictedKey {
	if x, ok := x.GetSecret().(*SecretData_StripeRestrictedKey_); ok {
		return x.StripeRestrictedKey
	}
	return nil
}

func (x *SecretData) GetStripeWebhookSecret() *SecretData_StripeWebhookSecret {
	if x, ok := x.GetSecret().(*SecretData_StripeWebhookSecret_); ok {
		return x.StripeWebhookSecret
	}
	return nil
}

func (x *SecretData) GetGcpOauth2ClientCredentials() *SecretData_GCPOAuth2ClientCredentials {
	if x, ok := x.GetSecret().(*SecretData_GcpOauth2ClientCredentials); ok {
		return x.GcpOauth2ClientCredentials
	}
	return nil
}

func (x *SecretData) GetGcpOauth2AccessToken() *SecretData_GCPOAuth2AccessToken {
	if x, ok := x.GetSecret().(*SecretData_GcpOauth2AccessToken); ok {
		return x.GcpOauth2AccessToken
	}
	return nil
}

func (x *SecretData) GetGithubAppServerToServerToken() *SecretData_GithubAppServerToServerToken {
	if x, ok := x.GetSecret().(*SecretData_GithubAppServerToServerToken_); ok {
		return x.GithubAppServerToServerToken
	}
	return nil
}

func (x *SecretData) GetGithubClassicPersonalAccessToken() *SecretData_GithubClassicPersonalAccessToken {
	if x, ok := x.GetSecret().(*SecretData_GithubClassicPersonalAccessToken_); ok {
		return x.GithubClassicPersonalAccessToken
	}
	return nil
}

func (x *SecretData) GetGithubFineGrainedPersonalAccessToken() *SecretData_GithubFineGrainedPersonalAccessToken {
	if x, ok := x.GetSecret().(*SecretData_GithubFineGrainedPersonalAccessToken_); ok {
		return x.GithubFineGrainedPersonalAccessToken
	}
	return nil
}

func (x *SecretData) GetGithubAppUserToServerToken() *SecretData_GithubAppUserToServerToken {
	if x, ok := x.GetSecret().(*SecretData_GithubAppUserToServerToken_); ok {
		return x.GithubAppUserToServerToken
	}
	return nil
}

func (x *SecretData) GetGithubOauthToken() *SecretData_GithubOAuthToken {
	if x, ok := x.GetSecret().(*SecretData_GithubOauthToken); ok {
		return x.GithubOauthToken
	}
	return nil
}

func (x *SecretData) GetSlackAppConfigRefreshToken() *SecretData_SlackAppConfigRefreshToken {
	if x, ok := x.GetSecret().(*SecretData_SlackAppConfigRefreshToken_); ok {
		return x.SlackAppConfigRefreshToken
	}
	return nil
}

func (x *SecretData) GetSlackAppLevelToken() *SecretData_SlackAppLevelToken {
	if x, ok := x.GetSecret().(*SecretData_SlackAppLevelToken_); ok {
		return x.SlackAppLevelToken
	}
	return nil
}

func (x *SecretData) GetSlackAppConfigAccessToken() *SecretData_SlackAppConfigAccessToken {
	if x, ok := x.GetSecret().(*SecretData_SlackAppConfigAccessToken_); ok {
		return x.SlackAppConfigAccessToken
	}
	return nil
}

func (x *SecretData) GetAzureStorageAccountAccessKey() *SecretData_AzureStorageAccountAccessKey {
	if x, ok := x.GetSecret().(*SecretData_AzureStorageAccountAccessKey_); ok {
		return x.AzureStorageAccountAccessKey
	}
	return nil
}

func (x *SecretData) GetHashicorpCloudPlatformCredentials() *SecretData_HashiCorpCloudPlatformCredentials {
	if x, ok := x.GetSecret().(*SecretData_HashicorpCloudPlatformCredentials); ok {
		return x.HashicorpCloudPlatformCredentials
	}
	return nil
}

func (x *SecretData) GetHashicorpCloudPlatformToken() *SecretData_HashiCorpCloudPlatformToken {
	if x, ok := x.GetSecret().(*SecretData_HashicorpCloudPlatformToken); ok {
		return x.HashicorpCloudPlatformToken
	}
	return nil
}

func (x *SecretData) GetOnepasswordSecretKey() *SecretData_OnePasswordSecretKey {
	if x, ok := x.GetSecret().(*SecretData_OnepasswordSecretKey); ok {
		return x.OnepasswordSecretKey
	}
	return nil
}

func (x *SecretData) GetOnepasswordServiceToken() *SecretData_OnePasswordServiceToken {
	if x, ok := x.GetSecret().(*SecretData_OnepasswordServiceToken); ok {
		return x.OnepasswordServiceToken
	}
	return nil
}

func (x *SecretData) GetOnepasswordRecoveryCode() *SecretData_OnePasswordRecoveryCode {
	if x, ok := x.GetSecret().(*SecretData_OnepasswordRecoveryCode); ok {
		return x.OnepasswordRecoveryCode
	}
	return nil
}

func (x *SecretData) GetOnepasswordConnectToken() *SecretData_OnePasswordConnectToken {
	if x, ok := x.GetSecret().(*SecretData_OnepasswordConnectToken); ok {
		return x.OnepasswordConnectToken
	}
	return nil
}

func (x *SecretData) GetPgpass() *SecretData_Pgpass {
	if x, ok := x.GetSecret().(*SecretData_Pgpass_); ok {
		return x.Pgpass
	}
	return nil
}

func (x *SecretData) GetPypi() *SecretData_PyPIAPIToken {
	if x, ok := x.GetSecret().(*SecretData_Pypi); ok {
		return x.Pypi
	}
	return nil
}

func (x *SecretData) GetCratesIoApiToken() *SecretData_CratesIOAPIToken {
	if x, ok := x.GetSecret().(*SecretData_CratesIoApiToken); ok {
		return x.CratesIoApiToken
	}
	return nil
}

func (x *SecretData) GetMariaDbCredentials() *SecretData_MariaDBCredentials {
	if x, ok := x.GetSecret().(*SecretData_MariaDbCredentials); ok {
		return x.MariaDbCredentials
	}
	return nil
}

type isSecretData_Secret interface {
	isSecretData_Secret()
}

type SecretData_Gcpsak struct {
	Gcpsak *SecretData_GCPSAK `protobuf:"bytes,1,opt,name=gcpsak,proto3,oneof"`
}

type SecretData_AnthropicWorkspaceApiKey struct {
	AnthropicWorkspaceApiKey *SecretData_AnthropicWorkspaceAPIKey `protobuf:"bytes,2,opt,name=anthropic_workspace_api_key,json=anthropicWorkspaceApiKey,proto3,oneof"`
}

type SecretData_AnthropicModelApiKey struct {
	AnthropicModelApiKey *SecretData_AnthropicModelAPIKey `protobuf:"bytes,3,opt,name=anthropic_model_api_key,json=anthropicModelApiKey,proto3,oneof"`
}

type SecretData_Perplexity struct {
	Perplexity *SecretData_PerplexityAPIKey `protobuf:"bytes,4,opt,name=perplexity,proto3,oneof"`
}

type SecretData_PrivateKey_ struct {
	PrivateKey *SecretData_PrivateKey `protobuf:"bytes,5,opt,name=private_key,json=privateKey,proto3,oneof"`
}

type SecretData_GrokXaiApiKey struct {
	GrokXaiApiKey *SecretData_GrokXAIAPIKey `protobuf:"bytes,6,opt,name=grok_xai_api_key,json=grokXaiApiKey,proto3,oneof"`
}

type SecretData_GrokXaiManagementApiKey struct {
	GrokXaiManagementApiKey *SecretData_GrokXAIManagementAPIKey `protobuf:"bytes,7,opt,name=grok_xai_management_api_key,json=grokXaiManagementApiKey,proto3,oneof"`
}

type SecretData_DockerHubPat_ struct {
	DockerHubPat *SecretData_DockerHubPat `protobuf:"bytes,8,opt,name=docker_hub_pat,json=dockerHubPat,proto3,oneof"`
}

type SecretData_Digitalocean struct {
	Digitalocean *SecretData_DigitalOceanAPIToken `protobuf:"bytes,9,opt,name=digitalocean,proto3,oneof"`
}

type SecretData_OpenaiApiKey struct {
	OpenaiApiKey *SecretData_OpenAIAPIKey `protobuf:"bytes,10,opt,name=openai_api_key,json=openaiApiKey,proto3,oneof"`
}

type SecretData_PostmanApiKey struct {
	PostmanApiKey *SecretData_PostmanAPIKey `protobuf:"bytes,11,opt,name=postman_api_key,json=postmanApiKey,proto3,oneof"`
}

type SecretData_PostmanCollectionAccessToken_ struct {
	PostmanCollectionAccessToken *SecretData_PostmanCollectionAccessToken `protobuf:"bytes,12,opt,name=postman_collection_access_token,json=postmanCollectionAccessToken,proto3,oneof"`
}

type SecretData_AzureAccessToken_ struct {
	AzureAccessToken *SecretData_AzureAccessToken `protobuf:"bytes,13,opt,name=azure_access_token,json=azureAccessToken,proto3,oneof"`
}

type SecretData_AzureIdentityToken_ struct {
	AzureIdentityToken *SecretData_AzureIdentityToken `protobuf:"bytes,14,opt,name=azure_identity_token,json=azureIdentityToken,proto3,oneof"`
}

type SecretData_TinkKeyset_ struct {
	TinkKeyset *SecretData_TinkKeyset `protobuf:"bytes,15,opt,name=tink_keyset,json=tinkKeyset,proto3,oneof"`
}

type SecretData_GitlabPat_ struct {
	GitlabPat *SecretData_GitlabPat `protobuf:"bytes,16,opt,name=gitlab_pat,json=gitlabPat,proto3,oneof"`
}

type SecretData_HashicorpVaultToken struct {
	HashicorpVaultToken *SecretData_HashiCorpVaultToken `protobuf:"bytes,17,opt,name=hashicorp_vault_token,json=hashicorpVaultToken,proto3,oneof"`
}

type SecretData_HashicorpVaultAppRoleCredentials struct {
	HashicorpVaultAppRoleCredentials *SecretData_HashiCorpVaultAppRoleCredentials `protobuf:"bytes,18,opt,name=hashicorp_vault_app_role_credentials,json=hashicorpVaultAppRoleCredentials,proto3,oneof"`
}

type SecretData_GcpApiKey struct {
	GcpApiKey *SecretData_GCPAPIKey `protobuf:"bytes,19,opt,name=gcp_api_key,json=gcpApiKey,proto3,oneof"`
}

type SecretData_Hugginface struct {
	Hugginface *SecretData_HuggingfaceAPIKey `protobuf:"bytes,20,opt,name=hugginface,proto3,oneof"`
}

type SecretData_GithubAppRefreshToken_ struct {
	GithubAppRefreshToken *SecretData_GithubAppRefreshToken `protobuf:"bytes,21,opt,name=github_app_refresh_token,json=githubAppRefreshToken,proto3,oneof"`
}

type SecretData_StripeSecretKey_ struct {
	StripeSecretKey *SecretData_StripeSecretKey `protobuf:"bytes,22,opt,name=stripe_secret_key,json=stripeSecretKey,proto3,oneof"`
}

type SecretData_StripeRestrictedKey_ struct {
	StripeRestrictedKey *SecretData_StripeRestrictedKey `protobuf:"bytes,23,opt,name=stripe_restricted_key,json=stripeRestrictedKey,proto3,oneof"`
}

type SecretData_StripeWebhookSecret_ struct {
	StripeWebhookSecret *SecretData_StripeWebhookSecret `protobuf:"bytes,24,opt,name=stripe_webhook_secret,json=stripeWebhookSecret,proto3,oneof"`
}

type SecretData_GcpOauth2ClientCredentials struct {
	GcpOauth2ClientCredentials *SecretData_GCPOAuth2ClientCredentials `protobuf:"bytes,25,opt,name=gcp_oauth2_client_credentials,json=gcpOauth2ClientCredentials,proto3,oneof"`
}

type SecretData_GcpOauth2AccessToken struct {
	GcpOauth2AccessToken *SecretData_GCPOAuth2AccessToken `protobuf:"bytes,26,opt,name=gcp_oauth2_access_token,json=gcpOauth2AccessToken,proto3,oneof"`
}

type SecretData_GithubAppServerToServerToken_ struct {
	GithubAppServerToServerToken *SecretData_GithubAppServerToServerToken `protobuf:"bytes,27,opt,name=github_app_server_to_server_token,json=githubAppServerToServerToken,proto3,oneof"`
}

type SecretData_GithubClassicPersonalAccessToken_ struct {
	GithubClassicPersonalAccessToken *SecretData_GithubClassicPersonalAccessToken `protobuf:"bytes,28,opt,name=github_classic_personal_access_token,json=githubClassicPersonalAccessToken,proto3,oneof"`
}

type SecretData_GithubFineGrainedPersonalAccessToken_ struct {
	GithubFineGrainedPersonalAccessToken *SecretData_GithubFineGrainedPersonalAccessToken `protobuf:"bytes,29,opt,name=github_fine_grained_personal_access_token,json=githubFineGrainedPersonalAccessToken,proto3,oneof"`
}

type SecretData_GithubAppUserToServerToken_ struct {
	GithubAppUserToServerToken *SecretData_GithubAppUserToServerToken `protobuf:"bytes,30,opt,name=github_app_user_to_server_token,json=githubAppUserToServerToken,proto3,oneof"`
}

type SecretData_GithubOauthToken struct {
	GithubOauthToken *SecretData_GithubOAuthToken `protobuf:"bytes,31,opt,name=github_oauth_token,json=githubOauthToken,proto3,oneof"`
}

type SecretData_SlackAppConfigRefreshToken_ struct {
	SlackAppConfigRefreshToken *SecretData_SlackAppConfigRefreshToken `protobuf:"bytes,33,opt,name=slack_app_config_refresh_token,json=slackAppConfigRefreshToken,proto3,oneof"`
}

type SecretData_SlackAppLevelToken_ struct {
	SlackAppLevelToken *SecretData_SlackAppLevelToken `protobuf:"bytes,34,opt,name=slack_app_level_token,json=slackAppLevelToken,proto3,oneof"`
}

type SecretData_SlackAppConfigAccessToken_ struct {
	SlackAppConfigAccessToken *SecretData_SlackAppConfigAccessToken `protobuf:"bytes,35,opt,name=slack_app_config_access_token,json=slackAppConfigAccessToken,proto3,oneof"`
}

type SecretData_AzureStorageAccountAccessKey_ struct {
	AzureStorageAccountAccessKey *SecretData_AzureStorageAccountAccessKey `protobuf:"bytes,36,opt,name=azure_storage_account_access_key,json=azureStorageAccountAccessKey,proto3,oneof"`
}

type SecretData_HashicorpCloudPlatformCredentials struct {
	HashicorpCloudPlatformCredentials *SecretData_HashiCorpCloudPlatformCredentials `protobuf:"bytes,37,opt,name=hashicorp_cloud_platform_credentials,json=hashicorpCloudPlatformCredentials,proto3,oneof"`
}

type SecretData_HashicorpCloudPlatformToken struct {
	HashicorpCloudPlatformToken *SecretData_HashiCorpCloudPlatformToken `protobuf:"bytes,38,opt,name=hashicorp_cloud_platform_token,json=hashicorpCloudPlatformToken,proto3,oneof"`
}

type SecretData_OnepasswordSecretKey struct {
	OnepasswordSecretKey *SecretData_OnePasswordSecretKey `protobuf:"bytes,39,opt,name=onepassword_secret_key,json=onepasswordSecretKey,proto3,oneof"`
}

type SecretData_OnepasswordServiceToken struct {
	OnepasswordServiceToken *SecretData_OnePasswordServiceToken `protobuf:"bytes,40,opt,name=onepassword_service_token,json=onepasswordServiceToken,proto3,oneof"`
}

type SecretData_OnepasswordRecoveryCode struct {
	OnepasswordRecoveryCode *SecretData_OnePasswordRecoveryCode `protobuf:"bytes,41,opt,name=onepassword_recovery_code,json=onepasswordRecoveryCode,proto3,oneof"`
}

type SecretData_OnepasswordConnectToken struct {
	OnepasswordConnectToken *SecretData_OnePasswordConnectToken `protobuf:"bytes,42,opt,name=onepassword_connect_token,json=onepasswordConnectToken,proto3,oneof"`
}

type SecretData_Pgpass_ struct {
	Pgpass *SecretData_Pgpass `protobuf:"bytes,43,opt,name=pgpass,proto3,oneof"`
}

type SecretData_Pypi struct {
	Pypi *SecretData_PyPIAPIToken `protobuf:"bytes,44,opt,name=pypi,proto3,oneof"`
}

type SecretData_CratesIoApiToken struct {
	CratesIoApiToken *SecretData_CratesIOAPIToken `protobuf:"bytes,45,opt,name=crates_io_api_token,json=cratesIoApiToken,proto3,oneof"`
}

type SecretData_MariaDbCredentials struct {
	MariaDbCredentials *SecretData_MariaDBCredentials `protobuf:"bytes,46,opt,name=maria_db_credentials,json=mariaDbCredentials,proto3,oneof"`
}

func (*SecretData_Gcpsak) isSecretData_Secret() {}

func (*SecretData_AnthropicWorkspaceApiKey) isSecretData_Secret() {}

func (*SecretData_AnthropicModelApiKey) isSecretData_Secret() {}

func (*SecretData_Perplexity) isSecretData_Secret() {}

func (*SecretData_PrivateKey_) isSecretData_Secret() {}

func (*SecretData_GrokXaiApiKey) isSecretData_Secret() {}

func (*SecretData_GrokXaiManagementApiKey) isSecretData_Secret() {}

func (*SecretData_DockerHubPat_) isSecretData_Secret() {}

func (*SecretData_Digitalocean) isSecretData_Secret() {}

func (*SecretData_OpenaiApiKey) isSecretData_Secret() {}

func (*SecretData_PostmanApiKey) isSecretData_Secret() {}

func (*SecretData_PostmanCollectionAccessToken_) isSecretData_Secret() {}

func (*SecretData_AzureAccessToken_) isSecretData_Secret() {}

func (*SecretData_AzureIdentityToken_) isSecretData_Secret() {}

func (*SecretData_TinkKeyset_) isSecretData_Secret() {}

func (*SecretData_GitlabPat_) isSecretData_Secret() {}

func (*SecretData_HashicorpVaultToken) isSecretData_Secret() {}

func (*SecretData_HashicorpVaultAppRoleCredentials) isSecretData_Secret() {}

func (*SecretData_GcpApiKey) isSecretData_Secret() {}

func (*SecretData_Hugginface) isSecretData_Secret() {}

func (*SecretData_GithubAppRefreshToken_) isSecretData_Secret() {}

func (*SecretData_StripeSecretKey_) isSecretData_Secret() {}

func (*SecretData_StripeRestrictedKey_) isSecretData_Secret() {}

func (*SecretData_StripeWebhookSecret_) isSecretData_Secret() {}

func (*SecretData_GcpOauth2ClientCredentials) isSecretData_Secret() {}

func (*SecretData_GcpOauth2AccessToken) isSecretData_Secret() {}

func (*SecretData_GithubAppServerToServerToken_) isSecretData_Secret() {}

func (*SecretData_GithubClassicPersonalAccessToken_) isSecretData_Secret() {}

func (*SecretData_GithubFineGrainedPersonalAccessToken_) isSecretData_Secret() {}

func (*SecretData_GithubAppUserToServerToken_) isSecretData_Secret() {}

func (*SecretData_GithubOauthToken) isSecretData_Secret() {}

func (*SecretData_SlackAppConfigRefreshToken_) isSecretData_Secret() {}

func (*SecretData_SlackAppLevelToken_) isSecretData_Secret() {}

func (*SecretData_SlackAppConfigAccessToken_) isSecretData_Secret() {}

func (*SecretData_AzureStorageAccountAccessKey_) isSecretData_Secret() {}

func (*SecretData_HashicorpCloudPlatformCredentials) isSecretData_Secret() {}

func (*SecretData_HashicorpCloudPlatformToken) isSecretData_Secret() {}

func (*SecretData_OnepasswordSecretKey) isSecretData_Secret() {}

func (*SecretData_OnepasswordServiceToken) isSecretData_Secret() {}

func (*SecretData_OnepasswordRecoveryCode) isSecretData_Secret() {}

func (*SecretData_OnepasswordConnectToken) isSecretData_Secret() {}

func (*SecretData_Pgpass_) isSecretData_Secret() {}

func (*SecretData_Pypi) isSecretData_Secret() {}

func (*SecretData_CratesIoApiToken) isSecretData_Secret() {}

func (*SecretData_MariaDbCredentials) isSecretData_Secret() {}

type SecretStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      SecretStatus_SecretStatusEnum `protobuf:"varint,1,opt,name=status,proto3,enum=scalibr.SecretStatus_SecretStatusEnum" json:"status,omitempty"`
	LastUpdated *timestamppb.Timestamp        `protobuf:"bytes,2,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
}

func (x *SecretStatus) Reset() {
	*x = SecretStatus{}
	mi := &file_proto_scan_result_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretStatus) ProtoMessage() {}

func (x *SecretStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretStatus.ProtoReflect.Descriptor instead.
func (*SecretStatus) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{56}
}

func (x *SecretStatus) GetStatus() SecretStatus_SecretStatusEnum {
	if x != nil {
		return x.Status
	}
	return SecretStatus_UNSPECIFIED
}

func (x *SecretStatus) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Location:
	//
	//	*Location_Filepath
	//	*Location_FilepathWithLayerDetails
	//	*Location_EnvironmentVariable
	//	*Location_ContainerCommand
	Location isLocation_Location `protobuf_oneof:"location"`
}

func (x *Location) Reset() {
	*x = Location{}
	mi := &file_proto_scan_result_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{57}
}

func (m *Location) GetLocation() isLocation_Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (x *Location) GetFilepath() *Filepath {
	if x, ok := x.GetLocation().(*Location_Filepath); ok {
		return x.Filepath
	}
	return nil
}

func (x *Location) GetFilepathWithLayerDetails() *FilepathWithLayerDetails {
	if x, ok := x.GetLocation().(*Location_FilepathWithLayerDetails); ok {
		return x.FilepathWithLayerDetails
	}
	return nil
}

func (x *Location) GetEnvironmentVariable() *EnvironmentVariable {
	if x, ok := x.GetLocation().(*Location_EnvironmentVariable); ok {
		return x.EnvironmentVariable
	}
	return nil
}

func (x *Location) GetContainerCommand() *ContainerCommand {
	if x, ok := x.GetLocation().(*Location_ContainerCommand); ok {
		return x.ContainerCommand
	}
	return nil
}

type isLocation_Location interface {
	isLocation_Location()
}

type Location_Filepath struct {
	Filepath *Filepath `protobuf:"bytes,1,opt,name=filepath,proto3,oneof"`
}

type Location_FilepathWithLayerDetails struct {
	FilepathWithLayerDetails *FilepathWithLayerDetails `protobuf:"bytes,2,opt,name=filepath_with_layer_details,json=filepathWithLayerDetails,proto3,oneof"`
}

type Location_EnvironmentVariable struct {
	EnvironmentVariable *EnvironmentVariable `protobuf:"bytes,3,opt,name=environment_variable,json=environmentVariable,proto3,oneof"`
}

type Location_ContainerCommand struct {
	ContainerCommand *ContainerCommand `protobuf:"bytes,4,opt,name=container_command,json=containerCommand,proto3,oneof"`
}

func (*Location_Filepath) isLocation_Location() {}

func (*Location_FilepathWithLayerDetails) isLocation_Location() {}

func (*Location_EnvironmentVariable) isLocation_Location() {}

func (*Location_ContainerCommand) isLocation_Location() {}

type Filepath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *Filepath) Reset() {
	*x = Filepath{}
	mi := &file_proto_scan_result_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Filepath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filepath) ProtoMessage() {}

func (x *Filepath) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filepath.ProtoReflect.Descriptor instead.
func (*Filepath) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{58}
}

func (x *Filepath) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type FilepathWithLayerDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path         string        `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	LayerDetails *LayerDetails `protobuf:"bytes,2,opt,name=layer_details,json=layerDetails,proto3" json:"layer_details,omitempty"`
}

func (x *FilepathWithLayerDetails) Reset() {
	*x = FilepathWithLayerDetails{}
	mi := &file_proto_scan_result_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilepathWithLayerDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilepathWithLayerDetails) ProtoMessage() {}

func (x *FilepathWithLayerDetails) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilepathWithLayerDetails.ProtoReflect.Descriptor instead.
func (*FilepathWithLayerDetails) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{59}
}

func (x *FilepathWithLayerDetails) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FilepathWithLayerDetails) GetLayerDetails() *LayerDetails {
	if x != nil {
		return x.LayerDetails
	}
	return nil
}

type EnvironmentVariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *EnvironmentVariable) Reset() {
	*x = EnvironmentVariable{}
	mi := &file_proto_scan_result_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentVariable) ProtoMessage() {}

func (x *EnvironmentVariable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentVariable.ProtoReflect.Descriptor instead.
func (*EnvironmentVariable) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{60}
}

func (x *EnvironmentVariable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ContainerCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
}

func (x *ContainerCommand) Reset() {
	*x = ContainerCommand{}
	mi := &file_proto_scan_result_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerCommand) ProtoMessage() {}

func (x *ContainerCommand) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerCommand.ProtoReflect.Descriptor instead.
func (*ContainerCommand) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{61}
}

func (x *ContainerCommand) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

type ContainerImageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// Layers are ordered from the earliest to the latest.
	LayerMetadata []*LayerMetadata `protobuf:"bytes,2,rep,name=layer_metadata,json=layerMetadata,proto3" json:"layer_metadata,omitempty"`
	// The base images that make up the chain.
	// The first base image is always empty, acting as a placeholder for the
	// scanned image itself. If the scanned image is a base image, there will be
	// no layers pointing to the first base image.
	//
	// The base images are ordered from the biggest base image containing all base
	// images to the smallest. e.g. [empty, postgresql, alpine]
	BaseImageChains []*BaseImageChain `protobuf:"bytes,3,rep,name=base_image_chains,json=baseImageChains,proto3" json:"base_image_chains,omitempty"`
	// Key value map of OS info from /etc/os-release.
	OsInfo map[string]string `protobuf:"bytes,4,rep,name=os_info,json=osInfo,proto3" json:"os_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ContainerImageMetadata) Reset() {
	*x = ContainerImageMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerImageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerImageMetadata) ProtoMessage() {}

func (x *ContainerImageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerImageMetadata.ProtoReflect.Descriptor instead.
func (*ContainerImageMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{62}
}

func (x *ContainerImageMetadata) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ContainerImageMetadata) GetLayerMetadata() []*LayerMetadata {
	if x != nil {
		return x.LayerMetadata
	}
	return nil
}

func (x *ContainerImageMetadata) GetBaseImageChains() []*BaseImageChain {
	if x != nil {
		return x.BaseImageChains
	}
	return nil
}

func (x *ContainerImageMetadata) GetOsInfo() map[string]string {
	if x != nil {
		return x.OsInfo
	}
	return nil
}

type BaseImageChain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of potential base images (repositories that have a matching ChainID).
	BaseImages []*BaseImageDetails `protobuf:"bytes,1,rep,name=base_images,json=baseImages,proto3" json:"base_images,omitempty"`
	// Chain ID of the last layer in the image.
	ChainId string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (x *BaseImageChain) Reset() {
	*x = BaseImageChain{}
	mi := &file_proto_scan_result_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseImageChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseImageChain) ProtoMessage() {}

func (x *BaseImageChain) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseImageChain.ProtoReflect.Descriptor instead.
func (*BaseImageChain) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{63}
}

func (x *BaseImageChain) GetBaseImages() []*BaseImageDetails {
	if x != nil {
		return x.BaseImages
	}
	return nil
}

func (x *BaseImageChain) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

type BaseImageDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the image. (e.g. `debian`, `circleci/node`)
	Repository string `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	// Name of the registry. (e.g. `docker.io`, `ghcr.io`)
	Registry string `protobuf:"bytes,2,opt,name=registry,proto3" json:"registry,omitempty"`
	// Name of the plugin used to extract the base image.
	Plugin string `protobuf:"bytes,3,opt,name=plugin,proto3" json:"plugin,omitempty"`
}

func (x *BaseImageDetails) Reset() {
	*x = BaseImageDetails{}
	mi := &file_proto_scan_result_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseImageDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseImageDetails) ProtoMessage() {}

func (x *BaseImageDetails) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseImageDetails.ProtoReflect.Descriptor instead.
func (*BaseImageDetails) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{64}
}

func (x *BaseImageDetails) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *BaseImageDetails) GetRegistry() string {
	if x != nil {
		return x.Registry
	}
	return ""
}

func (x *BaseImageDetails) GetPlugin() string {
	if x != nil {
		return x.Plugin
	}
	return ""
}

type LayerMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The index of the layer within the ContainerImageMetadata.layer_metadata
	// field.
	Index   int32  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	DiffId  string `protobuf:"bytes,2,opt,name=diff_id,json=diffId,proto3" json:"diff_id,omitempty"`
	ChainId string `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// The command that was used to build the layer.
	Command string `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	// Whether the layer is empty (currently always false).
	IsEmpty bool `protobuf:"varint,5,opt,name=is_empty,json=isEmpty,proto3" json:"is_empty,omitempty"`
	// The index of the base image match within the
	// ContainerImageMetadata.base_image_chains field.
	BaseImageIndex int32 `protobuf:"varint,6,opt,name=base_image_index,json=baseImageIndex,proto3" json:"base_image_index,omitempty"`
}

func (x *LayerMetadata) Reset() {
	*x = LayerMetadata{}
	mi := &file_proto_scan_result_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LayerMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LayerMetadata) ProtoMessage() {}

func (x *LayerMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LayerMetadata.ProtoReflect.Descriptor instead.
func (*LayerMetadata) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{65}
}

func (x *LayerMetadata) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *LayerMetadata) GetDiffId() string {
	if x != nil {
		return x.DiffId
	}
	return ""
}

func (x *LayerMetadata) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *LayerMetadata) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *LayerMetadata) GetIsEmpty() bool {
	if x != nil {
		return x.IsEmpty
	}
	return false
}

func (x *LayerMetadata) GetBaseImageIndex() int32 {
	if x != nil {
		return x.BaseImageIndex
	}
	return 0
}

type Package_ContainerImageMetadataIndexes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The index of ContainerImageMetadata in Inventory.ContainerImageMetadata
	// list.
	ContainerImageIndex int32 `protobuf:"varint,1,opt,name=container_image_index,json=containerImageIndex,proto3" json:"container_image_index,omitempty"`
	// The index of LayerMetadata in ContainerImageMetadata.LayerMetadata list.
	LayerIndex int32 `protobuf:"varint,2,opt,name=layer_index,json=layerIndex,proto3" json:"layer_index,omitempty"`
}

func (x *Package_ContainerImageMetadataIndexes) Reset() {
	*x = Package_ContainerImageMetadataIndexes{}
	mi := &file_proto_scan_result_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Package_ContainerImageMetadataIndexes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package_ContainerImageMetadataIndexes) ProtoMessage() {}

func (x *Package_ContainerImageMetadataIndexes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package_ContainerImageMetadataIndexes.ProtoReflect.Descriptor instead.
func (*Package_ContainerImageMetadataIndexes) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Package_ContainerImageMetadataIndexes) GetContainerImageIndex() int32 {
	if x != nil {
		return x.ContainerImageIndex
	}
	return 0
}

func (x *Package_ContainerImageMetadataIndexes) GetLayerIndex() int32 {
	if x != nil {
		return x.LayerIndex
	}
	return 0
}

type SecretData_GCPSAK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Always filled.
	PrivateKeyId string `protobuf:"bytes,1,opt,name=private_key_id,json=privateKeyId,proto3" json:"private_key_id,omitempty"`
	ClientEmail  string `protobuf:"bytes,2,opt,name=client_email,json=clientEmail,proto3" json:"client_email,omitempty"`
	Signature    []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"` // derived from the private_key for validation
	// Filled only when explicitly requested.
	Type                    string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	ProjectId               string `protobuf:"bytes,5,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClientId                string `protobuf:"bytes,6,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	AuthUri                 string `protobuf:"bytes,7,opt,name=auth_uri,json=authUri,proto3" json:"auth_uri,omitempty"`
	TokenUri                string `protobuf:"bytes,8,opt,name=token_uri,json=tokenUri,proto3" json:"token_uri,omitempty"`
	AuthProviderX509CertUrl string `protobuf:"bytes,9,opt,name=auth_provider_x509_cert_url,json=authProviderX509CertUrl,proto3" json:"auth_provider_x509_cert_url,omitempty"`
	ClientX509CertUrl       string `protobuf:"bytes,10,opt,name=client_x509_cert_url,json=clientX509CertUrl,proto3" json:"client_x509_cert_url,omitempty"`
	UniverseDomain          string `protobuf:"bytes,11,opt,name=universe_domain,json=universeDomain,proto3" json:"universe_domain,omitempty"`
	// Should not be filled out unless very explicitly requested accepting the
	// risk that this might accidentally leak the key.
	PrivateKey string `protobuf:"bytes,12,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
}

func (x *SecretData_GCPSAK) Reset() {
	*x = SecretData_GCPSAK{}
	mi := &file_proto_scan_result_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_GCPSAK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_GCPSAK) ProtoMessage() {}

func (x *SecretData_GCPSAK) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_GCPSAK.ProtoReflect.Descriptor instead.
func (*SecretData_GCPSAK) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 0}
}

func (x *SecretData_GCPSAK) GetPrivateKeyId() string {
	if x != nil {
		return x.PrivateKeyId
	}
	return ""
}

func (x *SecretData_GCPSAK) GetClientEmail() string {
	if x != nil {
		return x.ClientEmail
	}
	return ""
}

func (x *SecretData_GCPSAK) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SecretData_GCPSAK) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SecretData_GCPSAK) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *SecretData_GCPSAK) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *SecretData_GCPSAK) GetAuthUri() string {
	if x != nil {
		return x.AuthUri
	}
	return ""
}

func (x *SecretData_GCPSAK) GetTokenUri() string {
	if x != nil {
		return x.TokenUri
	}
	return ""
}

func (x *SecretData_GCPSAK) GetAuthProviderX509CertUrl() string {
	if x != nil {
		return x.AuthProviderX509CertUrl
	}
	return ""
}

func (x *SecretData_GCPSAK) GetClientX509CertUrl() string {
	if x != nil {
		return x.ClientX509CertUrl
	}
	return ""
}

func (x *SecretData_GCPSAK) GetUniverseDomain() string {
	if x != nil {
		return x.UniverseDomain
	}
	return ""
}

func (x *SecretData_GCPSAK) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

type SecretData_AnthropicWorkspaceAPIKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Anthropic Workspace API key (contains "admin01").
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SecretData_AnthropicWorkspaceAPIKey) Reset() {
	*x = SecretData_AnthropicWorkspaceAPIKey{}
	mi := &file_proto_scan_result_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_AnthropicWorkspaceAPIKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_AnthropicWorkspaceAPIKey) ProtoMessage() {}

func (x *SecretData_AnthropicWorkspaceAPIKey) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_AnthropicWorkspaceAPIKey.ProtoReflect.Descriptor instead.
func (*SecretData_AnthropicWorkspaceAPIKey) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 1}
}

func (x *SecretData_AnthropicWorkspaceAPIKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type SecretData_AnthropicModelAPIKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Anthropic Model API key (regular API key for model access).
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SecretData_AnthropicModelAPIKey) Reset() {
	*x = SecretData_AnthropicModelAPIKey{}
	mi := &file_proto_scan_result_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_AnthropicModelAPIKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_AnthropicModelAPIKey) ProtoMessage() {}

func (x *SecretData_AnthropicModelAPIKey) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_AnthropicModelAPIKey.ProtoReflect.Descriptor instead.
func (*SecretData_AnthropicModelAPIKey) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 2}
}

func (x *SecretData_AnthropicModelAPIKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type SecretData_PerplexityAPIKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SecretData_PerplexityAPIKey) Reset() {
	*x = SecretData_PerplexityAPIKey{}
	mi := &file_proto_scan_result_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_PerplexityAPIKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_PerplexityAPIKey) ProtoMessage() {}

func (x *SecretData_PerplexityAPIKey) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_PerplexityAPIKey.ProtoReflect.Descriptor instead.
func (*SecretData_PerplexityAPIKey) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 3}
}

func (x *SecretData_PerplexityAPIKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type SecretData_GrokXAIAPIKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SecretData_GrokXAIAPIKey) Reset() {
	*x = SecretData_GrokXAIAPIKey{}
	mi := &file_proto_scan_result_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_GrokXAIAPIKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_GrokXAIAPIKey) ProtoMessage() {}

func (x *SecretData_GrokXAIAPIKey) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_GrokXAIAPIKey.ProtoReflect.Descriptor instead.
func (*SecretData_GrokXAIAPIKey) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 4}
}

func (x *SecretData_GrokXAIAPIKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type SecretData_GrokXAIManagementAPIKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SecretData_GrokXAIManagementAPIKey) Reset() {
	*x = SecretData_GrokXAIManagementAPIKey{}
	mi := &file_proto_scan_result_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_GrokXAIManagementAPIKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_GrokXAIManagementAPIKey) ProtoMessage() {}

func (x *SecretData_GrokXAIManagementAPIKey) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_GrokXAIManagementAPIKey.ProtoReflect.Descriptor instead.
func (*SecretData_GrokXAIManagementAPIKey) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 5}
}

func (x *SecretData_GrokXAIManagementAPIKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type SecretData_AzureStorageAccountAccessKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SecretData_AzureStorageAccountAccessKey) Reset() {
	*x = SecretData_AzureStorageAccountAccessKey{}
	mi := &file_proto_scan_result_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_AzureStorageAccountAccessKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_AzureStorageAccountAccessKey) ProtoMessage() {}

func (x *SecretData_AzureStorageAccountAccessKey) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_AzureStorageAccountAccessKey.ProtoReflect.Descriptor instead.
func (*SecretData_AzureStorageAccountAccessKey) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 6}
}

func (x *SecretData_AzureStorageAccountAccessKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type SecretData_PrivateKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block string `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"` // PEM/OpenSSH private key block
	Der   []byte `protobuf:"bytes,2,opt,name=der,proto3" json:"der,omitempty"`     // DER-encoded key material
}

func (x *SecretData_PrivateKey) Reset() {
	*x = SecretData_PrivateKey{}
	mi := &file_proto_scan_result_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_PrivateKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_PrivateKey) ProtoMessage() {}

func (x *SecretData_PrivateKey) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_PrivateKey.ProtoReflect.Descriptor instead.
func (*SecretData_PrivateKey) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 7}
}

func (x *SecretData_PrivateKey) GetBlock() string {
	if x != nil {
		return x.Block
	}
	return ""
}

func (x *SecretData_PrivateKey) GetDer() []byte {
	if x != nil {
		return x.Der
	}
	return nil
}

type SecretData_AzureAccessToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *SecretData_AzureAccessToken) Reset() {
	*x = SecretData_AzureAccessToken{}
	mi := &file_proto_scan_result_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_AzureAccessToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_AzureAccessToken) ProtoMessage() {}

func (x *SecretData_AzureAccessToken) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_AzureAccessToken.ProtoReflect.Descriptor instead.
func (*SecretData_AzureAccessToken) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 8}
}

func (x *SecretData_AzureAccessToken) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type SecretData_Pgpass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Port     string `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	Database string `protobuf:"bytes,3,opt,name=database,proto3" json:"database,omitempty"`
	Username string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *SecretData_Pgpass) Reset() {
	*x = SecretData_Pgpass{}
	mi := &file_proto_scan_result_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_Pgpass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_Pgpass) ProtoMessage() {}

func (x *SecretData_Pgpass) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_Pgpass.ProtoReflect.Descriptor instead.
func (*SecretData_Pgpass) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 9}
}

func (x *SecretData_Pgpass) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *SecretData_Pgpass) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *SecretData_Pgpass) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *SecretData_Pgpass) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SecretData_Pgpass) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type SecretData_MariaDBCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host     string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port     string `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	User     string `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	Section  string `protobuf:"bytes,6,opt,name=section,proto3" json:"section,omitempty"`
}

func (x *SecretData_MariaDBCredentials) Reset() {
	*x = SecretData_MariaDBCredentials{}
	mi := &file_proto_scan_result_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_MariaDBCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_MariaDBCredentials) ProtoMessage() {}

func (x *SecretData_MariaDBCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_MariaDBCredentials.ProtoReflect.Descriptor instead.
func (*SecretData_MariaDBCredentials) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 10}
}

func (x *SecretData_MariaDBCredentials) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SecretData_MariaDBCredentials) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *SecretData_MariaDBCredentials) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *SecretData_MariaDBCredentials) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SecretData_MariaDBCredentials) GetSection() string {
	if x != nil {
		return x.Section
	}
	return ""
}

type SecretData_AzureIdentityToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *SecretData_AzureIdentityToken) Reset() {
	*x = SecretData_AzureIdentityToken{}
	mi := &file_proto_scan_result_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_AzureIdentityToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_AzureIdentityToken) ProtoMessage() {}

func (x *SecretData_AzureIdentityToken) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_AzureIdentityToken.ProtoReflect.Descriptor instead.
func (*SecretData_AzureIdentityToken) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 11}
}

func (x *SecretData_AzureIdentityToken) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type SecretData_OpenAIAPIKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SecretData_OpenAIAPIKey) Reset() {
	*x = SecretData_OpenAIAPIKey{}
	mi := &file_proto_scan_result_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_OpenAIAPIKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_OpenAIAPIKey) ProtoMessage() {}

func (x *SecretData_OpenAIAPIKey) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_OpenAIAPIKey.ProtoReflect.Descriptor instead.
func (*SecretData_OpenAIAPIKey) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 12}
}

func (x *SecretData_OpenAIAPIKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type SecretData_DockerHubPat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pat      string `protobuf:"bytes,1,opt,name=pat,proto3" json:"pat,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *SecretData_DockerHubPat) Reset() {
	*x = SecretData_DockerHubPat{}
	mi := &file_proto_scan_result_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_DockerHubPat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_DockerHubPat) ProtoMessage() {}

func (x *SecretData_DockerHubPat) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_DockerHubPat.ProtoReflect.Descriptor instead.
func (*SecretData_DockerHubPat) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 13}
}

func (x *SecretData_DockerHubPat) GetPat() string {
	if x != nil {
		return x.Pat
	}
	return ""
}

func (x *SecretData_DockerHubPat) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type SecretData_GitlabPat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pat string `protobuf:"bytes,1,opt,name=pat,proto3" json:"pat,omitempty"`
}

func (x *SecretData_GitlabPat) Reset() {
	*x = SecretData_GitlabPat{}
	mi := &file_proto_scan_result_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_GitlabPat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_GitlabPat) ProtoMessage() {}

func (x *SecretData_GitlabPat) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_GitlabPat.ProtoReflect.Descriptor instead.
func (*SecretData_GitlabPat) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 14}
}

func (x *SecretData_GitlabPat) GetPat() string {
	if x != nil {
		return x.Pat
	}
	return ""
}

type SecretData_SlackAppLevelToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *SecretData_SlackAppLevelToken) Reset() {
	*x = SecretData_SlackAppLevelToken{}
	mi := &file_proto_scan_result_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_SlackAppLevelToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_SlackAppLevelToken) ProtoMessage() {}

func (x *SecretData_SlackAppLevelToken) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_SlackAppLevelToken.ProtoReflect.Descriptor instead.
func (*SecretData_SlackAppLevelToken) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 15}
}

func (x *SecretData_SlackAppLevelToken) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type SecretData_SlackAppConfigAccessToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *SecretData_SlackAppConfigAccessToken) Reset() {
	*x = SecretData_SlackAppConfigAccessToken{}
	mi := &file_proto_scan_result_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_SlackAppConfigAccessToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_SlackAppConfigAccessToken) ProtoMessage() {}

func (x *SecretData_SlackAppConfigAccessToken) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_SlackAppConfigAccessToken.ProtoReflect.Descriptor instead.
func (*SecretData_SlackAppConfigAccessToken) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 16}
}

func (x *SecretData_SlackAppConfigAccessToken) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type SecretData_SlackAppConfigRefreshToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *SecretData_SlackAppConfigRefreshToken) Reset() {
	*x = SecretData_SlackAppConfigRefreshToken{}
	mi := &file_proto_scan_result_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_SlackAppConfigRefreshToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_SlackAppConfigRefreshToken) ProtoMessage() {}

func (x *SecretData_SlackAppConfigRefreshToken) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_SlackAppConfigRefreshToken.ProtoReflect.Descriptor instead.
func (*SecretData_SlackAppConfigRefreshToken) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 17}
}

func (x *SecretData_SlackAppConfigRefreshToken) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type SecretData_PostmanAPIKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SecretData_PostmanAPIKey) Reset() {
	*x = SecretData_PostmanAPIKey{}
	mi := &file_proto_scan_result_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_PostmanAPIKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_PostmanAPIKey) ProtoMessage() {}

func (x *SecretData_PostmanAPIKey) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_PostmanAPIKey.ProtoReflect.Descriptor instead.
func (*SecretData_PostmanAPIKey) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 18}
}

func (x *SecretData_PostmanAPIKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type SecretData_PostmanCollectionAccessToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SecretData_PostmanCollectionAccessToken) Reset() {
	*x = SecretData_PostmanCollectionAccessToken{}
	mi := &file_proto_scan_result_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_PostmanCollectionAccessToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_PostmanCollectionAccessToken) ProtoMessage() {}

func (x *SecretData_PostmanCollectionAccessToken) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_PostmanCollectionAccessToken.ProtoReflect.Descriptor instead.
func (*SecretData_PostmanCollectionAccessToken) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 19}
}

func (x *SecretData_PostmanCollectionAccessToken) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type SecretData_DigitalOceanAPIToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SecretData_DigitalOceanAPIToken) Reset() {
	*x = SecretData_DigitalOceanAPIToken{}
	mi := &file_proto_scan_result_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_DigitalOceanAPIToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_DigitalOceanAPIToken) ProtoMessage() {}

func (x *SecretData_DigitalOceanAPIToken) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_DigitalOceanAPIToken.ProtoReflect.Descriptor instead.
func (*SecretData_DigitalOceanAPIToken) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 20}
}

func (x *SecretData_DigitalOceanAPIToken) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type SecretData_CratesIOAPIToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *SecretData_CratesIOAPIToken) Reset() {
	*x = SecretData_CratesIOAPIToken{}
	mi := &file_proto_scan_result_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_CratesIOAPIToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_CratesIOAPIToken) ProtoMessage() {}

func (x *SecretData_CratesIOAPIToken) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_CratesIOAPIToken.ProtoReflect.Descriptor instead.
func (*SecretData_CratesIOAPIToken) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 21}
}

func (x *SecretData_CratesIOAPIToken) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type SecretData_GithubAppRefreshToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *SecretData_GithubAppRefreshToken) Reset() {
	*x = SecretData_GithubAppRefreshToken{}
	mi := &file_proto_scan_result_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_GithubAppRefreshToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_GithubAppRefreshToken) ProtoMessage() {}

func (x *SecretData_GithubAppRefreshToken) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_GithubAppRefreshToken.ProtoReflect.Descriptor instead.
func (*SecretData_GithubAppRefreshToken) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 22}
}

func (x *SecretData_GithubAppRefreshToken) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type SecretData_GithubAppServerToServerToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *SecretData_GithubAppServerToServerToken) Reset() {
	*x = SecretData_GithubAppServerToServerToken{}
	mi := &file_proto_scan_result_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_GithubAppServerToServerToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_GithubAppServerToServerToken) ProtoMessage() {}

func (x *SecretData_GithubAppServerToServerToken) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_GithubAppServerToServerToken.ProtoReflect.Descriptor instead.
func (*SecretData_GithubAppServerToServerToken) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 23}
}

func (x *SecretData_GithubAppServerToServerToken) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type SecretData_GithubClassicPersonalAccessToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *SecretData_GithubClassicPersonalAccessToken) Reset() {
	*x = SecretData_GithubClassicPersonalAccessToken{}
	mi := &file_proto_scan_result_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_GithubClassicPersonalAccessToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_GithubClassicPersonalAccessToken) ProtoMessage() {}

func (x *SecretData_GithubClassicPersonalAccessToken) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_GithubClassicPersonalAccessToken.ProtoReflect.Descriptor instead.
func (*SecretData_GithubClassicPersonalAccessToken) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 24}
}

func (x *SecretData_GithubClassicPersonalAccessToken) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type SecretData_GithubFineGrainedPersonalAccessToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *SecretData_GithubFineGrainedPersonalAccessToken) Reset() {
	*x = SecretData_GithubFineGrainedPersonalAccessToken{}
	mi := &file_proto_scan_result_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_GithubFineGrainedPersonalAccessToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_GithubFineGrainedPersonalAccessToken) ProtoMessage() {}

func (x *SecretData_GithubFineGrainedPersonalAccessToken) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_GithubFineGrainedPersonalAccessToken.ProtoReflect.Descriptor instead.
func (*SecretData_GithubFineGrainedPersonalAccessToken) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 25}
}

func (x *SecretData_GithubFineGrainedPersonalAccessToken) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type SecretData_GithubOAuthToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *SecretData_GithubOAuthToken) Reset() {
	*x = SecretData_GithubOAuthToken{}
	mi := &file_proto_scan_result_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_GithubOAuthToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_GithubOAuthToken) ProtoMessage() {}

func (x *SecretData_GithubOAuthToken) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_GithubOAuthToken.ProtoReflect.Descriptor instead.
func (*SecretData_GithubOAuthToken) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 26}
}

func (x *SecretData_GithubOAuthToken) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type SecretData_GithubAppUserToServerToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *SecretData_GithubAppUserToServerToken) Reset() {
	*x = SecretData_GithubAppUserToServerToken{}
	mi := &file_proto_scan_result_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_GithubAppUserToServerToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_GithubAppUserToServerToken) ProtoMessage() {}

func (x *SecretData_GithubAppUserToServerToken) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_GithubAppUserToServerToken.ProtoReflect.Descriptor instead.
func (*SecretData_GithubAppUserToServerToken) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 27}
}

func (x *SecretData_GithubAppUserToServerToken) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type SecretData_PyPIAPIToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *SecretData_PyPIAPIToken) Reset() {
	*x = SecretData_PyPIAPIToken{}
	mi := &file_proto_scan_result_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_PyPIAPIToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_PyPIAPIToken) ProtoMessage() {}

func (x *SecretData_PyPIAPIToken) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_PyPIAPIToken.ProtoReflect.Descriptor instead.
func (*SecretData_PyPIAPIToken) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 28}
}

func (x *SecretData_PyPIAPIToken) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type SecretData_TinkKeyset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"` // JSON encoded Tink keyset
}

func (x *SecretData_TinkKeyset) Reset() {
	*x = SecretData_TinkKeyset{}
	mi := &file_proto_scan_result_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_TinkKeyset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_TinkKeyset) ProtoMessage() {}

func (x *SecretData_TinkKeyset) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_TinkKeyset.ProtoReflect.Descriptor instead.
func (*SecretData_TinkKeyset) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 29}
}

func (x *SecretData_TinkKeyset) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type SecretData_HashiCorpVaultToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *SecretData_HashiCorpVaultToken) Reset() {
	*x = SecretData_HashiCorpVaultToken{}
	mi := &file_proto_scan_result_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_HashiCorpVaultToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_HashiCorpVaultToken) ProtoMessage() {}

func (x *SecretData_HashiCorpVaultToken) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_HashiCorpVaultToken.ProtoReflect.Descriptor instead.
func (*SecretData_HashiCorpVaultToken) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 30}
}

func (x *SecretData_HashiCorpVaultToken) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type SecretData_HashiCorpVaultAppRoleCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId   string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	SecretId string `protobuf:"bytes,2,opt,name=secret_id,json=secretId,proto3" json:"secret_id,omitempty"`
	Id       string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"` // General ID field for uncertain UUID types when context is unclear
}

func (x *SecretData_HashiCorpVaultAppRoleCredentials) Reset() {
	*x = SecretData_HashiCorpVaultAppRoleCredentials{}
	mi := &file_proto_scan_result_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_HashiCorpVaultAppRoleCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_HashiCorpVaultAppRoleCredentials) ProtoMessage() {}

func (x *SecretData_HashiCorpVaultAppRoleCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_HashiCorpVaultAppRoleCredentials.ProtoReflect.Descriptor instead.
func (*SecretData_HashiCorpVaultAppRoleCredentials) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 31}
}

func (x *SecretData_HashiCorpVaultAppRoleCredentials) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *SecretData_HashiCorpVaultAppRoleCredentials) GetSecretId() string {
	if x != nil {
		return x.SecretId
	}
	return ""
}

func (x *SecretData_HashiCorpVaultAppRoleCredentials) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SecretData_GCPAPIKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SecretData_GCPAPIKey) Reset() {
	*x = SecretData_GCPAPIKey{}
	mi := &file_proto_scan_result_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_GCPAPIKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_GCPAPIKey) ProtoMessage() {}

func (x *SecretData_GCPAPIKey) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_GCPAPIKey.ProtoReflect.Descriptor instead.
func (*SecretData_GCPAPIKey) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 32}
}

func (x *SecretData_GCPAPIKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type SecretData_HuggingfaceAPIKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key              string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Role             string   `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	FineGrainedScope []string `protobuf:"bytes,3,rep,name=fine_grained_scope,json=fineGrainedScope,proto3" json:"fine_grained_scope,omitempty"`
}

func (x *SecretData_HuggingfaceAPIKey) Reset() {
	*x = SecretData_HuggingfaceAPIKey{}
	mi := &file_proto_scan_result_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_HuggingfaceAPIKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_HuggingfaceAPIKey) ProtoMessage() {}

func (x *SecretData_HuggingfaceAPIKey) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_HuggingfaceAPIKey.ProtoReflect.Descriptor instead.
func (*SecretData_HuggingfaceAPIKey) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 33}
}

func (x *SecretData_HuggingfaceAPIKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SecretData_HuggingfaceAPIKey) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *SecretData_HuggingfaceAPIKey) GetFineGrainedScope() []string {
	if x != nil {
		return x.FineGrainedScope
	}
	return nil
}

type SecretData_HashiCorpCloudPlatformCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId     string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret string `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
}

func (x *SecretData_HashiCorpCloudPlatformCredentials) Reset() {
	*x = SecretData_HashiCorpCloudPlatformCredentials{}
	mi := &file_proto_scan_result_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_HashiCorpCloudPlatformCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_HashiCorpCloudPlatformCredentials) ProtoMessage() {}

func (x *SecretData_HashiCorpCloudPlatformCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_HashiCorpCloudPlatformCredentials.ProtoReflect.Descriptor instead.
func (*SecretData_HashiCorpCloudPlatformCredentials) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 34}
}

func (x *SecretData_HashiCorpCloudPlatformCredentials) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *SecretData_HashiCorpCloudPlatformCredentials) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

type SecretData_HashiCorpCloudPlatformToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// Optional identity enrichment fields populated when available
	OrganizationId string   `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	ProjectId      string   `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	PrincipalId    string   `protobuf:"bytes,4,opt,name=principal_id,json=principalId,proto3" json:"principal_id,omitempty"`
	PrincipalType  string   `protobuf:"bytes,5,opt,name=principal_type,json=principalType,proto3" json:"principal_type,omitempty"`
	ServiceName    string   `protobuf:"bytes,6,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	UserId         string   `protobuf:"bytes,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail      string   `protobuf:"bytes,8,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	GroupIds       []string `protobuf:"bytes,9,rep,name=group_ids,json=groupIds,proto3" json:"group_ids,omitempty"`
}

func (x *SecretData_HashiCorpCloudPlatformToken) Reset() {
	*x = SecretData_HashiCorpCloudPlatformToken{}
	mi := &file_proto_scan_result_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_HashiCorpCloudPlatformToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_HashiCorpCloudPlatformToken) ProtoMessage() {}

func (x *SecretData_HashiCorpCloudPlatformToken) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_HashiCorpCloudPlatformToken.ProtoReflect.Descriptor instead.
func (*SecretData_HashiCorpCloudPlatformToken) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 35}
}

func (x *SecretData_HashiCorpCloudPlatformToken) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SecretData_HashiCorpCloudPlatformToken) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *SecretData_HashiCorpCloudPlatformToken) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *SecretData_HashiCorpCloudPlatformToken) GetPrincipalId() string {
	if x != nil {
		return x.PrincipalId
	}
	return ""
}

func (x *SecretData_HashiCorpCloudPlatformToken) GetPrincipalType() string {
	if x != nil {
		return x.PrincipalType
	}
	return ""
}

func (x *SecretData_HashiCorpCloudPlatformToken) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *SecretData_HashiCorpCloudPlatformToken) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SecretData_HashiCorpCloudPlatformToken) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *SecretData_HashiCorpCloudPlatformToken) GetGroupIds() []string {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

type SecretData_StripeSecretKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SecretData_StripeSecretKey) Reset() {
	*x = SecretData_StripeSecretKey{}
	mi := &file_proto_scan_result_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_StripeSecretKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_StripeSecretKey) ProtoMessage() {}

func (x *SecretData_StripeSecretKey) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_StripeSecretKey.ProtoReflect.Descriptor instead.
func (*SecretData_StripeSecretKey) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 36}
}

func (x *SecretData_StripeSecretKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type SecretData_StripeRestrictedKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SecretData_StripeRestrictedKey) Reset() {
	*x = SecretData_StripeRestrictedKey{}
	mi := &file_proto_scan_result_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_StripeRestrictedKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_StripeRestrictedKey) ProtoMessage() {}

func (x *SecretData_StripeRestrictedKey) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_StripeRestrictedKey.ProtoReflect.Descriptor instead.
func (*SecretData_StripeRestrictedKey) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 37}
}

func (x *SecretData_StripeRestrictedKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type SecretData_StripeWebhookSecret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SecretData_StripeWebhookSecret) Reset() {
	*x = SecretData_StripeWebhookSecret{}
	mi := &file_proto_scan_result_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_StripeWebhookSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_StripeWebhookSecret) ProtoMessage() {}

func (x *SecretData_StripeWebhookSecret) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_StripeWebhookSecret.ProtoReflect.Descriptor instead.
func (*SecretData_StripeWebhookSecret) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 38}
}

func (x *SecretData_StripeWebhookSecret) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type SecretData_GCPOAuth2ClientCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// GCP OAuth2 client ID in format:
	// `12345678901-abcdefghijklmnopqrstuvwxyz.apps.googleusercontent.com`
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// GCP OAuth2 client secret, typically 24+ character alphanumeric string
	// prefixed with `GOCSPX-`
	Secret string `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *SecretData_GCPOAuth2ClientCredentials) Reset() {
	*x = SecretData_GCPOAuth2ClientCredentials{}
	mi := &file_proto_scan_result_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_GCPOAuth2ClientCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_GCPOAuth2ClientCredentials) ProtoMessage() {}

func (x *SecretData_GCPOAuth2ClientCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_GCPOAuth2ClientCredentials.ProtoReflect.Descriptor instead.
func (*SecretData_GCPOAuth2ClientCredentials) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 39}
}

func (x *SecretData_GCPOAuth2ClientCredentials) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SecretData_GCPOAuth2ClientCredentials) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type SecretData_GCPOAuth2AccessToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// GCP OAuth2 access token, typically in format:
	// "ya29.[alphanumeric_string]"
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *SecretData_GCPOAuth2AccessToken) Reset() {
	*x = SecretData_GCPOAuth2AccessToken{}
	mi := &file_proto_scan_result_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_GCPOAuth2AccessToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_GCPOAuth2AccessToken) ProtoMessage() {}

func (x *SecretData_GCPOAuth2AccessToken) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_GCPOAuth2AccessToken.ProtoReflect.Descriptor instead.
func (*SecretData_GCPOAuth2AccessToken) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 40}
}

func (x *SecretData_GCPOAuth2AccessToken) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type SecretData_OnePasswordConnectToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device UUID from the token JSON.
	DeviceUuid string `protobuf:"bytes,1,opt,name=device_uuid,json=deviceUuid,proto3" json:"device_uuid,omitempty"`
	// Version field from the token JSON.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Encrypted payload data (from encCredentials.data).
	EncryptedData string `protobuf:"bytes,3,opt,name=encrypted_data,json=encryptedData,proto3" json:"encrypted_data,omitempty"`
	// Key ID used to encrypt the credentials (encCredentials.kid).
	EncryptionKeyId string `protobuf:"bytes,4,opt,name=encryption_key_id,json=encryptionKeyId,proto3" json:"encryption_key_id,omitempty"`
	// Initialization vector (encCredentials.iv).
	Iv string `protobuf:"bytes,5,opt,name=iv,proto3" json:"iv,omitempty"`
	// Unique key kid (uniqueKey.kid).
	UniqueKeyId string `protobuf:"bytes,6,opt,name=unique_key_id,json=uniqueKeyId,proto3" json:"unique_key_id,omitempty"`
	// Verifier salt (verifier.salt).
	VerifierSalt string `protobuf:"bytes,7,opt,name=verifier_salt,json=verifierSalt,proto3" json:"verifier_salt,omitempty"`
	// Verifier local hash (verifier.localHash).
	VerifierLocalHash string `protobuf:"bytes,8,opt,name=verifier_local_hash,json=verifierLocalHash,proto3" json:"verifier_local_hash,omitempty"`
}

func (x *SecretData_OnePasswordConnectToken) Reset() {
	*x = SecretData_OnePasswordConnectToken{}
	mi := &file_proto_scan_result_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_OnePasswordConnectToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_OnePasswordConnectToken) ProtoMessage() {}

func (x *SecretData_OnePasswordConnectToken) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_OnePasswordConnectToken.ProtoReflect.Descriptor instead.
func (*SecretData_OnePasswordConnectToken) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 41}
}

func (x *SecretData_OnePasswordConnectToken) GetDeviceUuid() string {
	if x != nil {
		return x.DeviceUuid
	}
	return ""
}

func (x *SecretData_OnePasswordConnectToken) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SecretData_OnePasswordConnectToken) GetEncryptedData() string {
	if x != nil {
		return x.EncryptedData
	}
	return ""
}

func (x *SecretData_OnePasswordConnectToken) GetEncryptionKeyId() string {
	if x != nil {
		return x.EncryptionKeyId
	}
	return ""
}

func (x *SecretData_OnePasswordConnectToken) GetIv() string {
	if x != nil {
		return x.Iv
	}
	return ""
}

func (x *SecretData_OnePasswordConnectToken) GetUniqueKeyId() string {
	if x != nil {
		return x.UniqueKeyId
	}
	return ""
}

func (x *SecretData_OnePasswordConnectToken) GetVerifierSalt() string {
	if x != nil {
		return x.VerifierSalt
	}
	return ""
}

func (x *SecretData_OnePasswordConnectToken) GetVerifierLocalHash() string {
	if x != nil {
		return x.VerifierLocalHash
	}
	return ""
}

type SecretData_OnePasswordSecretKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SecretData_OnePasswordSecretKey) Reset() {
	*x = SecretData_OnePasswordSecretKey{}
	mi := &file_proto_scan_result_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_OnePasswordSecretKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_OnePasswordSecretKey) ProtoMessage() {}

func (x *SecretData_OnePasswordSecretKey) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_OnePasswordSecretKey.ProtoReflect.Descriptor instead.
func (*SecretData_OnePasswordSecretKey) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 42}
}

func (x *SecretData_OnePasswordSecretKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type SecretData_OnePasswordServiceToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SecretData_OnePasswordServiceToken) Reset() {
	*x = SecretData_OnePasswordServiceToken{}
	mi := &file_proto_scan_result_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_OnePasswordServiceToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_OnePasswordServiceToken) ProtoMessage() {}

func (x *SecretData_OnePasswordServiceToken) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_OnePasswordServiceToken.ProtoReflect.Descriptor instead.
func (*SecretData_OnePasswordServiceToken) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 43}
}

func (x *SecretData_OnePasswordServiceToken) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type SecretData_OnePasswordRecoveryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SecretData_OnePasswordRecoveryCode) Reset() {
	*x = SecretData_OnePasswordRecoveryCode{}
	mi := &file_proto_scan_result_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretData_OnePasswordRecoveryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData_OnePasswordRecoveryCode) ProtoMessage() {}

func (x *SecretData_OnePasswordRecoveryCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scan_result_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData_OnePasswordRecoveryCode.ProtoReflect.Descriptor instead.
func (*SecretData_OnePasswordRecoveryCode) Descriptor() ([]byte, []int) {
	return file_proto_scan_result_proto_rawDescGZIP(), []int{55, 44}
}

func (x *SecretData_OnePasswordRecoveryCode) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

var File_proto_scan_result_proto protoreflect.FileDescriptor

var file_proto_scan_result_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x63, 0x61, 0x6c, 0x69,
	0x62, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xce, 0x03, 0x0a, 0x0a, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x16, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x15, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x13, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x02, 0x18, 0x01, 0x52, 0x12,
	0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x22, 0x83, 0x02, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x42, 0x0a, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x66, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x46, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x46, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12,
	0x59, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc6, 0x01, 0x0a, 0x0a, 0x53,
	0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x63, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x0e,
	0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f,
	0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x03, 0x22, 0x69, 0x0a, 0x0c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x63, 0x61, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd0,
	0x1d, 0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x70, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x2e, 0x50, 0x75, 0x72, 0x6c, 0x52, 0x04, 0x70, 0x75, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x31, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x49, 0x0a, 0x0f, 0x70, 0x79, 0x74, 0x68,
	0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x50, 0x79, 0x74, 0x68,
	0x6f, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x59, 0x0a, 0x13, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x4a, 0x61, 0x76, 0x61, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4a, 0x53, 0x4f, 0x4e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x12, 0x6a, 0x61, 0x76, 0x61,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40,
	0x0a, 0x0c, 0x61, 0x70, 0x6b, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x41,
	0x50, 0x4b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x70, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x43, 0x0a, 0x0d, 0x64, 0x70, 0x6b, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x2e, 0x44, 0x50, 0x4b, 0x47, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x70, 0x6b, 0x67, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0c, 0x72, 0x70, 0x6d, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x52, 0x50, 0x4d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x70, 0x6d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x6f, 0x73, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x43, 0x4f, 0x53, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f,
	0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x11, 0x64, 0x65, 0x70,
	0x73, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x44,
	0x45, 0x50, 0x53, 0x4a, 0x53, 0x4f, 0x4e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x10, 0x64, 0x65, 0x70, 0x73, 0x6a, 0x73, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0d, 0x73, 0x70, 0x64, 0x78, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x50, 0x44, 0x58, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x70, 0x64, 0x78,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x15, 0x6a, 0x61, 0x76, 0x61,
	0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x2e, 0x4a, 0x61, 0x76, 0x61, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x13, 0x6a, 0x61, 0x76, 0x61, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x55, 0x0a, 0x16,
	0x6a, 0x61, 0x76, 0x61, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x4a, 0x61, 0x76, 0x61, 0x4c, 0x6f, 0x63, 0x6b, 0x66,
	0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x14, 0x6a,
	0x61, 0x76, 0x61, 0x4c, 0x6f, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x0f, 0x70, 0x61, 0x63, 0x6d, 0x61, 0x6e, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x50, 0x41, 0x43, 0x4d, 0x41, 0x4e, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0e,
	0x70, 0x61, 0x63, 0x6d, 0x61, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40,
	0x0a, 0x0c, 0x6e, 0x69, 0x78, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x4e,
	0x69, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x69, 0x78, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x55, 0x0a, 0x16, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x14, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x10, 0x76, 0x6d, 0x6c, 0x69, 0x6e,
	0x75, 0x7a, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x56, 0x6d, 0x6c, 0x69,
	0x6e, 0x75, 0x7a, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0f, 0x76,
	0x6d, 0x6c, 0x69, 0x6e, 0x75, 0x7a, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4c,
	0x0a, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69,
	0x62, 0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x67, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x6f, 0x72,
	0x74, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0c,
	0x6f, 0x73, 0x76, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x4f, 0x53, 0x56,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x0b, 0x6f, 0x73, 0x76, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x48,
	0x0a, 0x11, 0x6e, 0x65, 0x74, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x63, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x67, 0x0a, 0x1c, 0x70, 0x79, 0x74, 0x68,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x1a, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x52, 0x0a, 0x15, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x75,
	0x70, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x50, 0x79, 0x74, 0x68, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x13, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x6a, 0x0a, 0x1d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x43, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69,
	0x62, 0x72, 0x2e, 0x53, 0x4e, 0x41, 0x50, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a, 0x10, 0x66, 0x6c, 0x61, 0x74, 0x70, 0x61,
	0x6b, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x70,
	0x61, 0x6b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x6c, 0x61, 0x74, 0x70, 0x61, 0x6b, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x11, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x70, 0x70, 0x73,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x4d, 0x61, 0x63, 0x41, 0x70, 0x70,
	0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x63,
	0x41, 0x70, 0x70, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x80, 0x01, 0x0a,
	0x25, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x64, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x22, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x40, 0x0a, 0x0c, 0x63, 0x64, 0x78, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e,
	0x43, 0x44, 0x58, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x64, 0x78, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x5a, 0x0a, 0x1b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x5f, 0x6f, 0x73, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x4f, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x18, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x4f, 0x73, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4f, 0x0a,
	0x11, 0x68, 0x6f, 0x6d, 0x65, 0x62, 0x72, 0x65, 0x77, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69,
	0x62, 0x72, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x62, 0x72, 0x65, 0x77, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x10, 0x68, 0x6f,
	0x6d, 0x65, 0x62, 0x72, 0x65, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x61,
	0x0a, 0x1a, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x2f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x43, 0x68, 0x72,
	0x6f, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x18, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x61, 0x0a, 0x1a, 0x76, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e,
	0x56, 0x53, 0x43, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x18, 0x76, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0f, 0x70, 0x6f, 0x64, 0x6d, 0x61, 0x6e, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x50, 0x6f, 0x64, 0x6d, 0x61, 0x6e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x6f, 0x64, 0x6d, 0x61, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x61, 0x0a, 0x1a, 0x64, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x18, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4f, 0x0a, 0x11, 0x6d,
	0x61, 0x63, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x2e, 0x4d, 0x61, 0x63, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x61, 0x63, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x0f,
	0x77, 0x69, 0x6e, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e,
	0x57, 0x69, 0x6e, 0x67, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0e, 0x77, 0x69, 0x6e, 0x67, 0x65, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x0d, 0x61, 0x73, 0x64, 0x66, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x41, 0x73, 0x64, 0x66, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x73, 0x64, 0x66, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0c, 0x6e, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x63,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x4e, 0x76, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x76, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x51, 0x0a, 0x14, 0x6e, 0x6f, 0x64, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x13,
	0x6e, 0x6f, 0x64, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x5a, 0x0a, 0x16, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1c, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x75, 0x6d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x15, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x5b, 0x0a, 0x16, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x18, 0x33, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x15, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x34, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x7c, 0x0a, 0x20, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x73, 0x48, 0x01, 0x52, 0x1d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x74, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x60, 0x0a, 0x0e,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f,
	0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x4f, 0x53, 0x5f, 0x50,
	0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x53, 0x49,
	0x44, 0x45, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x10, 0x03, 0x42, 0x0a,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x4a,
	0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x23, 0x10,
	0x24, 0x22, 0x42, 0x0a, 0x14, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x96, 0x01, 0x0a, 0x0c, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x07,
	0x64, 0x69, 0x66, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x69, 0x66, 0x66, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6e,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x22, 0xfa,
	0x01, 0x0a, 0x1b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x69,
	0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x56, 0x65, 0x78, 0x4a, 0x75, 0x73, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x10, 0x76, 0x75, 0x6c, 0x6e, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x56, 0x75, 0x6c, 0x6e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x76,
	0x75, 0x6c, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x2c,
	0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x76, 0x75,
	0x6c, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x56, 0x75, 0x6c, 0x6e, 0x73, 0x42, 0x0d, 0x0a, 0x0b,
	0x76, 0x75, 0x6c, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x33, 0x0a, 0x0f, 0x56,
	0x75, 0x6c, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x22, 0x76, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x70, 0x6c, 0x6f,
	0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x6a, 0x75, 0x73, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x56, 0x65, 0x78, 0x4a, 0x75, 0x73, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6a, 0x75, 0x73, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc8, 0x01, 0x0a, 0x04, 0x50, 0x75, 0x72,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x63, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x70,
	0x61, 0x74, 0x68, 0x22, 0x33, 0x0a, 0x09, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xfe, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x03, 0x61,
	0x64, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69,
	0x62, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x52, 0x03, 0x61, 0x64, 0x76, 0x12, 0x3c,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x5b, 0x0a, 0x16, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69,
	0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x15, 0x65, 0x78,
	0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x73, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0xd2, 0x01, 0x0a, 0x16, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x41, 0x64, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x03, 0x73, 0x65, 0x76,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x03, 0x73,
	0x65, 0x76, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x22, 0x48,
	0x0a, 0x0a, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x45, 0x0a, 0x1b, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4a, 0x04, 0x08,
	0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22,
	0x52, 0x0a, 0x15, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x22, 0xb3, 0x01, 0x0a, 0x1d, 0x4a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0xe4, 0x01, 0x0a, 0x12, 0x41, 0x50,
	0x4b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x6f, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x73, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x73, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x22, 0x0a,
	0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x22, 0xee, 0x02, 0x0a, 0x13, 0x44, 0x50, 0x4b, 0x47, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x05,
	0x6f, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x73, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xcf, 0x02, 0x0a, 0x12, 0x52, 0x50, 0x4d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x70, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x70, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x12, 0x13, 0x0a, 0x05, 0x6f, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6f, 0x73, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x73,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x73, 0x5f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6f, 0x73, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x74, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x73, 0x50, 0x72, 0x65, 0x74, 0x74, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x12, 0x43, 0x4f, 0x53, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x73, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x80,
	0x02, 0x0a, 0x15, 0x50, 0x41, 0x43, 0x4d, 0x41, 0x4e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x6f, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x73, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x73, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a,
	0x13, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31,
	0x0a, 0x14, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x22, 0x93, 0x02, 0x0a, 0x12, 0x4e, 0x69, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x13,
	0x0a, 0x05, 0x6f, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f,
	0x73, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x73, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x10, 0x44, 0x45, 0x50, 0x53, 0x4a,
	0x53, 0x4f, 0x4e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xfc, 0x01, 0x0a, 0x13,
	0x53, 0x4e, 0x41, 0x50, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x12, 0x13, 0x0a, 0x05, 0x6f, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6f, 0x73, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f,
	0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x16, 0x50,
	0x6f, 0x72, 0x74, 0x61, 0x67, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x13, 0x0a, 0x05, 0x6f, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6f, 0x73, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f,
	0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xb6, 0x02, 0x0a, 0x16, 0x46,
	0x6c, 0x61, 0x74, 0x70, 0x61, 0x6b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x05,
	0x6f, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x73, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x73, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x22, 0xe8, 0x02, 0x0a, 0x14, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x6d, 0x61,
	0x67, 0x69, 0x63, 0x12, 0x49, 0x0a, 0x21, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x13,
	0x0a, 0x05, 0x6f, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f,
	0x73, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x73, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x8e,
	0x03, 0x0a, 0x0f, 0x56, 0x6d, 0x6c, 0x69, 0x6e, 0x75, 0x7a, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x77, 0x61, 0x70, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x77,
	0x61, 0x70, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x6f, 0x74,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72,
	0x6f, 0x6f, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x6f, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x73, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x73, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x72, 0x77, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x66, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x77, 0x52, 0x6f, 0x6f, 0x74, 0x46, 0x73, 0x22,
	0xbb, 0x03, 0x0a, 0x0f, 0x4d, 0x61, 0x63, 0x41, 0x70, 0x70, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x3d, 0x0a, 0x1b, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x2b, 0x0a, 0x11, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x90, 0x01,
	0x0a, 0x17, 0x4d, 0x61, 0x63, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x4c, 0x0a, 0x13, 0x53, 0x50, 0x44, 0x58, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x04, 0x70, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e,
	0x50, 0x75, 0x72, 0x6c, 0x52, 0x04, 0x70, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x70,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x63, 0x70, 0x65, 0x73, 0x22, 0x4b,
	0x0a, 0x12, 0x43, 0x44, 0x58, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x04, 0x70, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x50, 0x75, 0x72,
	0x6c, 0x52, 0x04, 0x70, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x70, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x63, 0x70, 0x65, 0x73, 0x22, 0x65, 0x0a, 0x13, 0x4a,
	0x61, 0x76, 0x61, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x68, 0x61, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x68,
	0x61, 0x31, 0x22, 0x9d, 0x01, 0x0a, 0x14, 0x4a, 0x61, 0x76, 0x61, 0x4c, 0x6f, 0x63, 0x6b, 0x66,
	0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x64, 0x65, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x61, 0x6c, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x12, 0x4f, 0x53, 0x56, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x72,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75,
	0x72, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x41, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x1a,
	0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x19, 0x68, 0x61,
	0x73, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x68,
	0x61, 0x73, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x44, 0x0a, 0x13, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a,
	0x12, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x65, 0x0a, 0x10,
	0x4e, 0x65, 0x74, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c,
	0x69, 0x6e, 0x65, 0x22, 0x9c, 0x03, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x69, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70,
	0x70, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x70, 0x70, 0x65, 0x72, 0x44, 0x69, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x64, 0x69, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x44,
	0x69, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x22, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x64, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x6f, 0x6f, 0x74, 0x66, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x6f, 0x74, 0x66, 0x73, 0x50, 0x61, 0x74, 0x68, 0x22,
	0x4f, 0x0a, 0x10, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x4f, 0x53, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x75, 0x6c, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x19, 0x0a, 0x17, 0x48, 0x6f, 0x6d, 0x65, 0x62, 0x72, 0x65, 0x77, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc0, 0x02, 0x0a, 0x18,
	0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x29, 0x0a, 0x10, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x6f, 0x73,
	0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x5f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x22, 0xac,
	0x02, 0x0a, 0x18, 0x56, 0x53, 0x43, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x16, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x70, 0x72,
	0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x50, 0x72, 0x65, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xba, 0x03,
	0x0a, 0x0e, 0x50, 0x6f, 0x64, 0x6d, 0x61, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x4e, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x2e, 0x50, 0x6f, 0x64, 0x6d, 0x61, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70,
	0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x78, 0x69, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x65, 0x78, 0x69, 0x74, 0x65, 0x64, 0x1a, 0x52, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65,
	0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x20, 0x0a, 0x08, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x97, 0x01, 0x0a,
	0x18, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x4e, 0x0a, 0x0c, 0x41, 0x73, 0x64, 0x66, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x6f, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x6f, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x34, 0x0a, 0x0b, 0x4e, 0x76, 0x6d, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x6a, 0x73, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x6f, 0x64, 0x65, 0x6a, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x13,
	0x4e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x6a, 0x73, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x6f, 0x64,
	0x65, 0x6a, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x74, 0x0a, 0x0a, 0x44, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xb9, 0x01, 0x0a, 0x15, 0x57, 0x69, 0x6e, 0x67, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x6e, 0x69,
	0x6b, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x6e, 0x69, 0x6b,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22, 0x95, 0x01, 0x0a,
	0x06, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0xfb, 0x3b, 0x0a, 0x0a, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x06, 0x67, 0x63, 0x70, 0x73, 0x61, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x43, 0x50, 0x53, 0x41, 0x4b, 0x48,
	0x00, 0x52, 0x06, 0x67, 0x63, 0x70, 0x73, 0x61, 0x6b, 0x12, 0x6d, 0x0a, 0x1b, 0x61, 0x6e, 0x74,
	0x68, 0x72, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x41, 0x6e, 0x74, 0x68, 0x72, 0x6f, 0x70, 0x69, 0x63, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x18,
	0x61, 0x6e, 0x74, 0x68, 0x72, 0x6f, 0x70, 0x69, 0x63, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x61, 0x0a, 0x17, 0x61, 0x6e, 0x74, 0x68,
	0x72, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x61, 0x70, 0x69, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x63, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41,
	0x6e, 0x74, 0x68, 0x72, 0x6f, 0x70, 0x69, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41, 0x50, 0x49,
	0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x14, 0x61, 0x6e, 0x74, 0x68, 0x72, 0x6f, 0x70, 0x69, 0x63,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x46, 0x0a, 0x0a, 0x70,
	0x65, 0x72, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x65, 0x72, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x41,
	0x50, 0x49, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x70, 0x6c, 0x65, 0x78,
	0x69, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69,
	0x62, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x4c, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x6b, 0x5f, 0x78,
	0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x6f, 0x6b, 0x58, 0x41, 0x49, 0x41, 0x50, 0x49,
	0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x6b, 0x58, 0x61, 0x69, 0x41, 0x70,
	0x69, 0x4b, 0x65, 0x79, 0x12, 0x6b, 0x0a, 0x1b, 0x67, 0x72, 0x6f, 0x6b, 0x5f, 0x78, 0x61, 0x69,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x63, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x47,
	0x72, 0x6f, 0x6b, 0x58, 0x41, 0x49, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x17, 0x67, 0x72, 0x6f, 0x6b, 0x58, 0x61,
	0x69, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x69, 0x4b, 0x65,
	0x79, 0x12, 0x48, 0x0a, 0x0e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x68, 0x75, 0x62, 0x5f,
	0x70, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x63, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x48, 0x75, 0x62, 0x50, 0x61, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x64,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x48, 0x75, 0x62, 0x50, 0x61, 0x74, 0x12, 0x4e, 0x0a, 0x0c, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x4f, 0x63,
	0x65, 0x61, 0x6e, 0x41, 0x50, 0x49, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x12, 0x48, 0x0a, 0x0e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x49, 0x41,
	0x50, 0x49, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x41,
	0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x4b, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x6d, 0x61, 0x6e,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x6d, 0x61, 0x6e, 0x41, 0x50, 0x49, 0x4b, 0x65,
	0x79, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x6d, 0x61, 0x6e, 0x41, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x12, 0x79, 0x0a, 0x1f, 0x70, 0x6f, 0x73, 0x74, 0x6d, 0x61, 0x6e, 0x5f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x63,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x6d, 0x61, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x00, 0x52,
	0x1c, 0x70, 0x6f, 0x73, 0x74, 0x6d, 0x61, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x54, 0x0a,
	0x12, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x63, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41,
	0x7a, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48,
	0x00, 0x52, 0x10, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x5a, 0x0a, 0x14, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x61, 0x7a, 0x75,
	0x72, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x41, 0x0a, 0x0b, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x6e, 0x6b, 0x4b, 0x65,
	0x79, 0x73, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x69, 0x6e, 0x6b, 0x4b, 0x65, 0x79, 0x73,
	0x65, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x5f, 0x70, 0x61, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x50, 0x61, 0x74, 0x48, 0x00, 0x52, 0x09, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x50,
	0x61, 0x74, 0x12, 0x5d, 0x0a, 0x15, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x5f,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x69, 0x43, 0x6f, 0x72, 0x70,
	0x56, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x86, 0x01, 0x0a, 0x24, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x5f,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x69, 0x43, 0x6f, 0x72, 0x70, 0x56,
	0x61, 0x75, 0x6c, 0x74, 0x41, 0x70, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x20, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x70, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x67, 0x63,
	0x70, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x43, 0x50, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x48, 0x00,
	0x52, 0x09, 0x67, 0x63, 0x70, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x0a, 0x68,
	0x75, 0x67, 0x67, 0x69, 0x6e, 0x66, 0x61, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x48, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x63, 0x65,
	0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x68, 0x75, 0x67, 0x67, 0x69, 0x6e,
	0x66, 0x61, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x18, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x41, 0x70, 0x70, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x48, 0x00, 0x52, 0x15, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x51, 0x0a, 0x11, 0x73, 0x74,
	0x72, 0x69, 0x70, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x70,
	0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x74,
	0x72, 0x69, 0x70, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x5d, 0x0a,
	0x15, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x65, 0x64, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x13, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x5d, 0x0a, 0x15,
	0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x63,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x48, 0x00, 0x52, 0x13, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x73, 0x0a, 0x1d, 0x67,
	0x63, 0x70, 0x5f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x43, 0x50, 0x4f, 0x41, 0x75, 0x74, 0x68,
	0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x48, 0x00, 0x52, 0x1a, 0x67, 0x63, 0x70, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x12, 0x61, 0x0a, 0x17, 0x67, 0x63, 0x70, 0x5f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x43, 0x50, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x67,
	0x63, 0x70, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x7b, 0x0a, 0x21, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x48, 0x00, 0x52, 0x1c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x86, 0x01, 0x0a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x63, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x63, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x20, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x93, 0x01, 0x0a, 0x29, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x5f, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x46, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x46, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x75, 0x0a, 0x1f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69,
	0x62, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x1a, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x54, 0x0a, 0x12, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x5f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x4f, 0x41,
	0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x74, 0x0a, 0x1e,
	0x73, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x41,
	0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x41, 0x70, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x5b, 0x0a, 0x15, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x41, 0x70, 0x70, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x73, 0x6c, 0x61,
	0x63, 0x6b, 0x41, 0x70, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x71, 0x0a, 0x1d, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x61, 0x63,
	0x6b, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x19, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x41, 0x70,
	0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x7a, 0x0a, 0x20, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x48, 0x00,
	0x52, 0x1c, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x88,
	0x01, 0x0a, 0x24, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x5f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x69, 0x43, 0x6f, 0x72, 0x70, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x21, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x76, 0x0a, 0x1e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x69, 0x43, 0x6f, 0x72, 0x70,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x48, 0x00, 0x52, 0x1b, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x60, 0x0a, 0x16, 0x6f, 0x6e, 0x65, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x6e, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x14, 0x6f,
	0x6e, 0x65, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x69, 0x0a, 0x19, 0x6f, 0x6e, 0x65, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x6e, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x6f, 0x6e, 0x65, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x69,
	0x0a, 0x19, 0x6f, 0x6e, 0x65, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x6e, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00,
	0x52, 0x17, 0x6f, 0x6e, 0x65, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x69, 0x0a, 0x19, 0x6f, 0x6e, 0x65,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x4f, 0x6e, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x6f, 0x6e, 0x65,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x06, 0x70, 0x67, 0x70, 0x61, 0x73, 0x73, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x67, 0x70, 0x61, 0x73, 0x73,
	0x48, 0x00, 0x52, 0x06, 0x70, 0x67, 0x70, 0x61, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x04, 0x70, 0x79,
	0x70, 0x69, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69,
	0x62, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x79,
	0x50, 0x49, 0x41, 0x50, 0x49, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x70, 0x79,
	0x70, 0x69, 0x12, 0x55, 0x0a, 0x13, 0x63, 0x72, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x69, 0x6f, 0x5f,
	0x61, 0x70, 0x69, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x61, 0x74, 0x65, 0x73, 0x49, 0x4f, 0x41, 0x50, 0x49,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x63, 0x72, 0x61, 0x74, 0x65, 0x73, 0x49,
	0x6f, 0x41, 0x70, 0x69, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x5a, 0x0a, 0x14, 0x6d, 0x61, 0x72,
	0x69, 0x61, 0x5f, 0x64, 0x62, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x72,
	0x69, 0x61, 0x44, 0x42, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x48,
	0x00, 0x52, 0x12, 0x6d, 0x61, 0x72, 0x69, 0x61, 0x44, 0x62, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x1a, 0xb0, 0x03, 0x0a, 0x06, 0x47, 0x43, 0x50, 0x53, 0x41, 0x4b,
	0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x75, 0x72, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x55,
	0x72, 0x69, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x72, 0x69, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x72, 0x69, 0x12,
	0x3c, 0x0a, 0x1b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x78, 0x35, 0x30, 0x39, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x61, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x58, 0x35, 0x30, 0x39, 0x43, 0x65, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x2f, 0x0a,
	0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x78, 0x35, 0x30, 0x39, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x58, 0x35, 0x30, 0x39, 0x43, 0x65, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x27,
	0x0a, 0x0f, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x1a, 0x2c, 0x0a, 0x18, 0x41, 0x6e, 0x74, 0x68,
	0x72, 0x6f, 0x70, 0x69, 0x63, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x50,
	0x49, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a, 0x28, 0x0a, 0x14, 0x41, 0x6e, 0x74, 0x68, 0x72, 0x6f,
	0x70, 0x69, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x1a, 0x24, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x41, 0x50,
	0x49, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a, 0x21, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x6b, 0x58, 0x41,
	0x49, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a, 0x2b, 0x0a, 0x17, 0x47, 0x72, 0x6f,
	0x6b, 0x58, 0x41, 0x49, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x50,
	0x49, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a, 0x30, 0x0a, 0x1c, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a, 0x34, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x64, 0x65, 0x72, 0x1a, 0x28,
	0x0a, 0x10, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x8c, 0x01, 0x0a, 0x06, 0x50, 0x67, 0x70,
	0x61, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x86, 0x01, 0x0a, 0x12, 0x4d, 0x61, 0x72, 0x69,
	0x61, 0x44, 0x42, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x2a, 0x0a, 0x12, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x20, 0x0a, 0x0c,
	0x4f, 0x70, 0x65, 0x6e, 0x41, 0x49, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a, 0x3c,
	0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x48, 0x75, 0x62, 0x50, 0x61, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x61, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x1d, 0x0a, 0x09,
	0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x50, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x61, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x61, 0x74, 0x1a, 0x2a, 0x0a, 0x12, 0x53,
	0x6c, 0x61, 0x63, 0x6b, 0x41, 0x70, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x31, 0x0a, 0x19, 0x53, 0x6c, 0x61, 0x63, 0x6b,
	0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x32, 0x0a, 0x1a, 0x53, 0x6c,
	0x61, 0x63, 0x6b, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x21,
	0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x74, 0x6d, 0x61, 0x6e, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x1a, 0x30, 0x0a, 0x1c, 0x50, 0x6f, 0x73, 0x74, 0x6d, 0x61, 0x6e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x1a, 0x28, 0x0a, 0x14, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x4f, 0x63,
	0x65, 0x61, 0x6e, 0x41, 0x50, 0x49, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a, 0x28, 0x0a,
	0x10, 0x43, 0x72, 0x61, 0x74, 0x65, 0x73, 0x49, 0x4f, 0x41, 0x50, 0x49, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x2d, 0x0a, 0x15, 0x47, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x41, 0x70, 0x70, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x34, 0x0a, 0x1c, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x38, 0x0a, 0x20,
	0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x3c, 0x0a, 0x24, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x46, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x28, 0x0a, 0x10, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x4f, 0x41,
	0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x32,
	0x0a, 0x1a, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x1a, 0x24, 0x0a, 0x0c, 0x50, 0x79, 0x50, 0x49, 0x41, 0x50, 0x49, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x26, 0x0a, 0x0a, 0x54, 0x69, 0x6e, 0x6b,
	0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x1a, 0x2b, 0x0a, 0x13, 0x48, 0x61, 0x73, 0x68, 0x69, 0x43, 0x6f, 0x72, 0x70, 0x56, 0x61, 0x75,
	0x6c, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x68, 0x0a,
	0x20, 0x48, 0x61, 0x73, 0x68, 0x69, 0x43, 0x6f, 0x72, 0x70, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x41,
	0x70, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x1d, 0x0a, 0x09, 0x47, 0x43, 0x50, 0x41, 0x50,
	0x49, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a, 0x67, 0x0a, 0x11, 0x48, 0x75, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x66, 0x61, 0x63, 0x65, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x66,
	0x69, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x1a,
	0x65, 0x0a, 0x21, 0x48, 0x61, 0x73, 0x68, 0x69, 0x43, 0x6f, 0x72, 0x70, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x1a, 0xbd, 0x02, 0x0a, 0x1b, 0x48, 0x61, 0x73, 0x68, 0x69,
	0x43, 0x6f, 0x72, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x0f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x1a, 0x23, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a, 0x27, 0x0a, 0x13, 0x53,
	0x74, 0x72, 0x69, 0x70, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x4b,
	0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x1a, 0x27, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a, 0x44, 0x0a,
	0x1a, 0x47, 0x43, 0x50, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x1a, 0x2c, 0x0a, 0x14, 0x47, 0x43, 0x50, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x1a, 0xb0, 0x02, 0x0a, 0x17, 0x4f, 0x6e, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x2a, 0x0a, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x76, 0x12, 0x22, 0x0a, 0x0d, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x73, 0x61, 0x6c, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x53, 0x61, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x48, 0x61, 0x73, 0x68, 0x1a, 0x28, 0x0a, 0x14, 0x4f, 0x6e, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a, 0x2b,
	0x0a, 0x17, 0x4f, 0x6e, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a, 0x2b, 0x0a, 0x17, 0x4f,
	0x6e, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x22, 0xf8, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x22, 0x69, 0x0a, 0x10, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x03,
	0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x22, 0xc8, 0x02,
	0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x48,
	0x00, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x12, 0x62, 0x0a, 0x1b, 0x66,
	0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x70,
	0x61, 0x74, 0x68, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x18, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x57,
	0x69, 0x74, 0x68, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x51, 0x0a, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x13, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x0a, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1e, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x6a, 0x0a, 0x18, 0x46, 0x69, 0x6c, 0x65,
	0x70, 0x61, 0x74, 0x68, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x0d, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x22, 0x29, 0x0a, 0x13, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x2c, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0xb3, 0x02,
	0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3d,
	0x0a, 0x0e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0d,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a,
	0x11, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69,
	0x62, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x52, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x73, 0x12, 0x44, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x39, 0x0a, 0x0b, 0x4f, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x67, 0x0a, 0x0e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x10,
	0x42, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x22, 0xb8, 0x01, 0x0a, 0x0d, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x07,
	0x64, 0x69, 0x66, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x69, 0x66, 0x66, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x2a,
	0xf7, 0x01, 0x0a, 0x10, 0x56, 0x65, 0x78, 0x4a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x1d, 0x56, 0x45, 0x58, 0x5f, 0x4a, 0x55, 0x53, 0x54,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x50, 0x4f,
	0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54,
	0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e,
	0x54, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x58,
	0x45, 0x43, 0x55, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x03, 0x12, 0x35, 0x0a, 0x31,
	0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x42, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f,
	0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x53, 0x41, 0x52,
	0x59, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4d, 0x49,
	0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x05, 0x2a, 0x62, 0x0a, 0x0c, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44,
	0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x2a, 0x47, 0x0a,
	0x0d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4c,
	0x4f, 0x43, 0x41, 0x4c, 0x10, 0x03, 0x42, 0x3f, 0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x73, 0x63,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x67,
	0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_scan_result_proto_rawDescOnce sync.Once
	file_proto_scan_result_proto_rawDescData = file_proto_scan_result_proto_rawDesc
)

func file_proto_scan_result_proto_rawDescGZIP() []byte {
	file_proto_scan_result_proto_rawDescOnce.Do(func() {
		file_proto_scan_result_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_scan_result_proto_rawDescData)
	})
	return file_proto_scan_result_proto_rawDescData
}

var file_proto_scan_result_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_proto_scan_result_proto_msgTypes = make([]protoimpl.MessageInfo, 114)
var file_proto_scan_result_proto_goTypes = []any{
	(VexJustification)(0),                         // 0: scalibr.VexJustification
	(SeverityEnum)(0),                             // 1: scalibr.SeverityEnum
	(PackageSource)(0),                            // 2: scalibr.PackageSource
	(ScanStatus_ScanStatusEnum)(0),                // 3: scalibr.ScanStatus.ScanStatusEnum
	(Package_AnnotationEnum)(0),                   // 4: scalibr.Package.AnnotationEnum
	(SecretStatus_SecretStatusEnum)(0),            // 5: scalibr.SecretStatus.SecretStatusEnum
	(*ScanResult)(nil),                            // 6: scalibr.ScanResult
	(*Inventory)(nil),                             // 7: scalibr.Inventory
	(*ScanStatus)(nil),                            // 8: scalibr.ScanStatus
	(*PluginStatus)(nil),                          // 9: scalibr.PluginStatus
	(*Package)(nil),                               // 10: scalibr.Package
	(*SourceCodeIdentifier)(nil),                  // 11: scalibr.SourceCodeIdentifier
	(*LayerDetails)(nil),                          // 12: scalibr.LayerDetails
	(*PackageExploitabilitySignal)(nil),           // 13: scalibr.PackageExploitabilitySignal
	(*VulnIdentifiers)(nil),                       // 14: scalibr.VulnIdentifiers
	(*FindingExploitabilitySignal)(nil),           // 15: scalibr.FindingExploitabilitySignal
	(*Purl)(nil),                                  // 16: scalibr.Purl
	(*Qualifier)(nil),                             // 17: scalibr.Qualifier
	(*GenericFinding)(nil),                        // 18: scalibr.GenericFinding
	(*GenericFindingAdvisory)(nil),                // 19: scalibr.GenericFindingAdvisory
	(*AdvisoryId)(nil),                            // 20: scalibr.AdvisoryId
	(*GenericFindingTargetDetails)(nil),           // 21: scalibr.GenericFindingTargetDetails
	(*PythonPackageMetadata)(nil),                 // 22: scalibr.PythonPackageMetadata
	(*JavascriptPackageJSONMetadata)(nil),         // 23: scalibr.JavascriptPackageJSONMetadata
	(*APKPackageMetadata)(nil),                    // 24: scalibr.APKPackageMetadata
	(*DPKGPackageMetadata)(nil),                   // 25: scalibr.DPKGPackageMetadata
	(*RPMPackageMetadata)(nil),                    // 26: scalibr.RPMPackageMetadata
	(*COSPackageMetadata)(nil),                    // 27: scalibr.COSPackageMetadata
	(*PACMANPackageMetadata)(nil),                 // 28: scalibr.PACMANPackageMetadata
	(*NixPackageMetadata)(nil),                    // 29: scalibr.NixPackageMetadata
	(*DEPSJSONMetadata)(nil),                      // 30: scalibr.DEPSJSONMetadata
	(*SNAPPackageMetadata)(nil),                   // 31: scalibr.SNAPPackageMetadata
	(*PortagePackageMetadata)(nil),                // 32: scalibr.PortagePackageMetadata
	(*FlatpakPackageMetadata)(nil),                // 33: scalibr.FlatpakPackageMetadata
	(*KernelModuleMetadata)(nil),                  // 34: scalibr.KernelModuleMetadata
	(*VmlinuzMetadata)(nil),                       // 35: scalibr.VmlinuzMetadata
	(*MacAppsMetadata)(nil),                       // 36: scalibr.MacAppsMetadata
	(*MacportsPackageMetadata)(nil),               // 37: scalibr.MacportsPackageMetadata
	(*SPDXPackageMetadata)(nil),                   // 38: scalibr.SPDXPackageMetadata
	(*CDXPackageMetadata)(nil),                    // 39: scalibr.CDXPackageMetadata
	(*JavaArchiveMetadata)(nil),                   // 40: scalibr.JavaArchiveMetadata
	(*JavaLockfileMetadata)(nil),                  // 41: scalibr.JavaLockfileMetadata
	(*OSVPackageMetadata)(nil),                    // 42: scalibr.OSVPackageMetadata
	(*PythonRequirementsMetadata)(nil),            // 43: scalibr.PythonRequirementsMetadata
	(*PythonSetupMetadata)(nil),                   // 44: scalibr.PythonSetupMetadata
	(*NetportsMetadata)(nil),                      // 45: scalibr.NetportsMetadata
	(*ContainerdContainerMetadata)(nil),           // 46: scalibr.ContainerdContainerMetadata
	(*ContainerdRuntimeContainerMetadata)(nil),    // 47: scalibr.ContainerdRuntimeContainerMetadata
	(*WindowsOSVersion)(nil),                      // 48: scalibr.WindowsOSVersion
	(*HomebrewPackageMetadata)(nil),               // 49: scalibr.HomebrewPackageMetadata
	(*ChromeExtensionsMetadata)(nil),              // 50: scalibr.ChromeExtensionsMetadata
	(*VSCodeExtensionsMetadata)(nil),              // 51: scalibr.VSCodeExtensionsMetadata
	(*PodmanMetadata)(nil),                        // 52: scalibr.PodmanMetadata
	(*Protocol)(nil),                              // 53: scalibr.Protocol
	(*DockerContainersMetadata)(nil),              // 54: scalibr.DockerContainersMetadata
	(*AsdfMetadata)(nil),                          // 55: scalibr.AsdfMetadata
	(*NvmMetadata)(nil),                           // 56: scalibr.NvmMetadata
	(*NodeVersionMetadata)(nil),                   // 57: scalibr.NodeVersionMetadata
	(*DockerPort)(nil),                            // 58: scalibr.DockerPort
	(*WingetPackageMetadata)(nil),                 // 59: scalibr.WingetPackageMetadata
	(*Secret)(nil),                                // 60: scalibr.Secret
	(*SecretData)(nil),                            // 61: scalibr.SecretData
	(*SecretStatus)(nil),                          // 62: scalibr.SecretStatus
	(*Location)(nil),                              // 63: scalibr.Location
	(*Filepath)(nil),                              // 64: scalibr.Filepath
	(*FilepathWithLayerDetails)(nil),              // 65: scalibr.FilepathWithLayerDetails
	(*EnvironmentVariable)(nil),                   // 66: scalibr.EnvironmentVariable
	(*ContainerCommand)(nil),                      // 67: scalibr.ContainerCommand
	(*ContainerImageMetadata)(nil),                // 68: scalibr.ContainerImageMetadata
	(*BaseImageChain)(nil),                        // 69: scalibr.BaseImageChain
	(*BaseImageDetails)(nil),                      // 70: scalibr.BaseImageDetails
	(*LayerMetadata)(nil),                         // 71: scalibr.LayerMetadata
	(*Package_ContainerImageMetadataIndexes)(nil), // 72: scalibr.Package.ContainerImageMetadataIndexes
	nil,                       // 73: scalibr.PodmanMetadata.ExposedPortsEntry
	(*SecretData_GCPSAK)(nil), // 74: scalibr.SecretData.GCPSAK
	(*SecretData_AnthropicWorkspaceAPIKey)(nil),             // 75: scalibr.SecretData.AnthropicWorkspaceAPIKey
	(*SecretData_AnthropicModelAPIKey)(nil),                 // 76: scalibr.SecretData.AnthropicModelAPIKey
	(*SecretData_PerplexityAPIKey)(nil),                     // 77: scalibr.SecretData.PerplexityAPIKey
	(*SecretData_GrokXAIAPIKey)(nil),                        // 78: scalibr.SecretData.GrokXAIAPIKey
	(*SecretData_GrokXAIManagementAPIKey)(nil),              // 79: scalibr.SecretData.GrokXAIManagementAPIKey
	(*SecretData_AzureStorageAccountAccessKey)(nil),         // 80: scalibr.SecretData.AzureStorageAccountAccessKey
	(*SecretData_PrivateKey)(nil),                           // 81: scalibr.SecretData.PrivateKey
	(*SecretData_AzureAccessToken)(nil),                     // 82: scalibr.SecretData.AzureAccessToken
	(*SecretData_Pgpass)(nil),                               // 83: scalibr.SecretData.Pgpass
	(*SecretData_MariaDBCredentials)(nil),                   // 84: scalibr.SecretData.MariaDBCredentials
	(*SecretData_AzureIdentityToken)(nil),                   // 85: scalibr.SecretData.AzureIdentityToken
	(*SecretData_OpenAIAPIKey)(nil),                         // 86: scalibr.SecretData.OpenAIAPIKey
	(*SecretData_DockerHubPat)(nil),                         // 87: scalibr.SecretData.DockerHubPat
	(*SecretData_GitlabPat)(nil),                            // 88: scalibr.SecretData.GitlabPat
	(*SecretData_SlackAppLevelToken)(nil),                   // 89: scalibr.SecretData.SlackAppLevelToken
	(*SecretData_SlackAppConfigAccessToken)(nil),            // 90: scalibr.SecretData.SlackAppConfigAccessToken
	(*SecretData_SlackAppConfigRefreshToken)(nil),           // 91: scalibr.SecretData.SlackAppConfigRefreshToken
	(*SecretData_PostmanAPIKey)(nil),                        // 92: scalibr.SecretData.PostmanAPIKey
	(*SecretData_PostmanCollectionAccessToken)(nil),         // 93: scalibr.SecretData.PostmanCollectionAccessToken
	(*SecretData_DigitalOceanAPIToken)(nil),                 // 94: scalibr.SecretData.DigitalOceanAPIToken
	(*SecretData_CratesIOAPIToken)(nil),                     // 95: scalibr.SecretData.CratesIOAPIToken
	(*SecretData_GithubAppRefreshToken)(nil),                // 96: scalibr.SecretData.GithubAppRefreshToken
	(*SecretData_GithubAppServerToServerToken)(nil),         // 97: scalibr.SecretData.GithubAppServerToServerToken
	(*SecretData_GithubClassicPersonalAccessToken)(nil),     // 98: scalibr.SecretData.GithubClassicPersonalAccessToken
	(*SecretData_GithubFineGrainedPersonalAccessToken)(nil), // 99: scalibr.SecretData.GithubFineGrainedPersonalAccessToken
	(*SecretData_GithubOAuthToken)(nil),                     // 100: scalibr.SecretData.GithubOAuthToken
	(*SecretData_GithubAppUserToServerToken)(nil),           // 101: scalibr.SecretData.GithubAppUserToServerToken
	(*SecretData_PyPIAPIToken)(nil),                         // 102: scalibr.SecretData.PyPIAPIToken
	(*SecretData_TinkKeyset)(nil),                           // 103: scalibr.SecretData.TinkKeyset
	(*SecretData_HashiCorpVaultToken)(nil),                  // 104: scalibr.SecretData.HashiCorpVaultToken
	(*SecretData_HashiCorpVaultAppRoleCredentials)(nil),     // 105: scalibr.SecretData.HashiCorpVaultAppRoleCredentials
	(*SecretData_GCPAPIKey)(nil),                            // 106: scalibr.SecretData.GCPAPIKey
	(*SecretData_HuggingfaceAPIKey)(nil),                    // 107: scalibr.SecretData.HuggingfaceAPIKey
	(*SecretData_HashiCorpCloudPlatformCredentials)(nil),    // 108: scalibr.SecretData.HashiCorpCloudPlatformCredentials
	(*SecretData_HashiCorpCloudPlatformToken)(nil),          // 109: scalibr.SecretData.HashiCorpCloudPlatformToken
	(*SecretData_StripeSecretKey)(nil),                      // 110: scalibr.SecretData.StripeSecretKey
	(*SecretData_StripeRestrictedKey)(nil),                  // 111: scalibr.SecretData.StripeRestrictedKey
	(*SecretData_StripeWebhookSecret)(nil),                  // 112: scalibr.SecretData.StripeWebhookSecret
	(*SecretData_GCPOAuth2ClientCredentials)(nil),           // 113: scalibr.SecretData.GCPOAuth2ClientCredentials
	(*SecretData_GCPOAuth2AccessToken)(nil),                 // 114: scalibr.SecretData.GCPOAuth2AccessToken
	(*SecretData_OnePasswordConnectToken)(nil),              // 115: scalibr.SecretData.OnePasswordConnectToken
	(*SecretData_OnePasswordSecretKey)(nil),                 // 116: scalibr.SecretData.OnePasswordSecretKey
	(*SecretData_OnePasswordServiceToken)(nil),              // 117: scalibr.SecretData.OnePasswordServiceToken
	(*SecretData_OnePasswordRecoveryCode)(nil),              // 118: scalibr.SecretData.OnePasswordRecoveryCode
	nil,                           // 119: scalibr.ContainerImageMetadata.OsInfoEntry
	(*timestamppb.Timestamp)(nil), // 120: google.protobuf.Timestamp
}
var file_proto_scan_result_proto_depIdxs = []int32{
	120, // 0: scalibr.ScanResult.start_time:type_name -> google.protobuf.Timestamp
	120, // 1: scalibr.ScanResult.end_time:type_name -> google.protobuf.Timestamp
	8,   // 2: scalibr.ScanResult.status:type_name -> scalibr.ScanStatus
	9,   // 3: scalibr.ScanResult.plugin_status:type_name -> scalibr.PluginStatus
	10,  // 4: scalibr.ScanResult.inventories_deprecated:type_name -> scalibr.Package
	18,  // 5: scalibr.ScanResult.findings_deprecated:type_name -> scalibr.GenericFinding
	7,   // 6: scalibr.ScanResult.inventory:type_name -> scalibr.Inventory
	10,  // 7: scalibr.Inventory.packages:type_name -> scalibr.Package
	18,  // 8: scalibr.Inventory.generic_findings:type_name -> scalibr.GenericFinding
	60,  // 9: scalibr.Inventory.secrets:type_name -> scalibr.Secret
	68,  // 10: scalibr.Inventory.container_image_metadata:type_name -> scalibr.ContainerImageMetadata
	3,   // 11: scalibr.ScanStatus.status:type_name -> scalibr.ScanStatus.ScanStatusEnum
	8,   // 12: scalibr.PluginStatus.status:type_name -> scalibr.ScanStatus
	11,  // 13: scalibr.Package.source_code:type_name -> scalibr.SourceCodeIdentifier
	16,  // 14: scalibr.Package.purl:type_name -> scalibr.Purl
	22,  // 15: scalibr.Package.python_metadata:type_name -> scalibr.PythonPackageMetadata
	23,  // 16: scalibr.Package.javascript_metadata:type_name -> scalibr.JavascriptPackageJSONMetadata
	24,  // 17: scalibr.Package.apk_metadata:type_name -> scalibr.APKPackageMetadata
	25,  // 18: scalibr.Package.dpkg_metadata:type_name -> scalibr.DPKGPackageMetadata
	26,  // 19: scalibr.Package.rpm_metadata:type_name -> scalibr.RPMPackageMetadata
	27,  // 20: scalibr.Package.cos_metadata:type_name -> scalibr.COSPackageMetadata
	30,  // 21: scalibr.Package.depsjson_metadata:type_name -> scalibr.DEPSJSONMetadata
	38,  // 22: scalibr.Package.spdx_metadata:type_name -> scalibr.SPDXPackageMetadata
	40,  // 23: scalibr.Package.java_archive_metadata:type_name -> scalibr.JavaArchiveMetadata
	41,  // 24: scalibr.Package.java_lockfile_metadata:type_name -> scalibr.JavaLockfileMetadata
	28,  // 25: scalibr.Package.pacman_metadata:type_name -> scalibr.PACMANPackageMetadata
	29,  // 26: scalibr.Package.nix_metadata:type_name -> scalibr.NixPackageMetadata
	34,  // 27: scalibr.Package.kernel_module_metadata:type_name -> scalibr.KernelModuleMetadata
	35,  // 28: scalibr.Package.vmlinuz_metadata:type_name -> scalibr.VmlinuzMetadata
	32,  // 29: scalibr.Package.portage_metadata:type_name -> scalibr.PortagePackageMetadata
	42,  // 30: scalibr.Package.osv_metadata:type_name -> scalibr.OSVPackageMetadata
	45,  // 31: scalibr.Package.netports_metadata:type_name -> scalibr.NetportsMetadata
	43,  // 32: scalibr.Package.python_requirements_metadata:type_name -> scalibr.PythonRequirementsMetadata
	44,  // 33: scalibr.Package.python_setup_metadata:type_name -> scalibr.PythonSetupMetadata
	46,  // 34: scalibr.Package.containerd_container_metadata:type_name -> scalibr.ContainerdContainerMetadata
	31,  // 35: scalibr.Package.snap_metadata:type_name -> scalibr.SNAPPackageMetadata
	33,  // 36: scalibr.Package.flatpak_metadata:type_name -> scalibr.FlatpakPackageMetadata
	36,  // 37: scalibr.Package.mac_apps_metadata:type_name -> scalibr.MacAppsMetadata
	47,  // 38: scalibr.Package.containerd_runtime_container_metadata:type_name -> scalibr.ContainerdRuntimeContainerMetadata
	39,  // 39: scalibr.Package.cdx_metadata:type_name -> scalibr.CDXPackageMetadata
	48,  // 40: scalibr.Package.windows_os_version_metadata:type_name -> scalibr.WindowsOSVersion
	49,  // 41: scalibr.Package.homebrew_metadata:type_name -> scalibr.HomebrewPackageMetadata
	50,  // 42: scalibr.Package.chrome_extensions_metadata:type_name -> scalibr.ChromeExtensionsMetadata
	51,  // 43: scalibr.Package.vscode_extensions_metadata:type_name -> scalibr.VSCodeExtensionsMetadata
	52,  // 44: scalibr.Package.podman_metadata:type_name -> scalibr.PodmanMetadata
	54,  // 45: scalibr.Package.docker_containers_metadata:type_name -> scalibr.DockerContainersMetadata
	37,  // 46: scalibr.Package.macports_metadata:type_name -> scalibr.MacportsPackageMetadata
	59,  // 47: scalibr.Package.winget_metadata:type_name -> scalibr.WingetPackageMetadata
	55,  // 48: scalibr.Package.asdf_metadata:type_name -> scalibr.AsdfMetadata
	56,  // 49: scalibr.Package.nvm_metadata:type_name -> scalibr.NvmMetadata
	57,  // 50: scalibr.Package.nodeversion_metadata:type_name -> scalibr.NodeVersionMetadata
	4,   // 51: scalibr.Package.annotations_deprecated:type_name -> scalibr.Package.AnnotationEnum
	13,  // 52: scalibr.Package.exploitability_signals:type_name -> scalibr.PackageExploitabilitySignal
	72,  // 53: scalibr.Package.container_image_metadata_indexes:type_name -> scalibr.Package.ContainerImageMetadataIndexes
	0,   // 54: scalibr.PackageExploitabilitySignal.justification:type_name -> scalibr.VexJustification
	14,  // 55: scalibr.PackageExploitabilitySignal.vuln_identifiers:type_name -> scalibr.VulnIdentifiers
	0,   // 56: scalibr.FindingExploitabilitySignal.justification:type_name -> scalibr.VexJustification
	17,  // 57: scalibr.Purl.qualifiers:type_name -> scalibr.Qualifier
	19,  // 58: scalibr.GenericFinding.adv:type_name -> scalibr.GenericFindingAdvisory
	21,  // 59: scalibr.GenericFinding.target:type_name -> scalibr.GenericFindingTargetDetails
	15,  // 60: scalibr.GenericFinding.exploitability_signals:type_name -> scalibr.FindingExploitabilitySignal
	20,  // 61: scalibr.GenericFindingAdvisory.id:type_name -> scalibr.AdvisoryId
	1,   // 62: scalibr.GenericFindingAdvisory.sev:type_name -> scalibr.SeverityEnum
	2,   // 63: scalibr.JavascriptPackageJSONMetadata.source:type_name -> scalibr.PackageSource
	16,  // 64: scalibr.SPDXPackageMetadata.purl:type_name -> scalibr.Purl
	16,  // 65: scalibr.CDXPackageMetadata.purl:type_name -> scalibr.Purl
	73,  // 66: scalibr.PodmanMetadata.exposed_ports:type_name -> scalibr.PodmanMetadata.ExposedPortsEntry
	120, // 67: scalibr.PodmanMetadata.started_time:type_name -> google.protobuf.Timestamp
	120, // 68: scalibr.PodmanMetadata.finished_time:type_name -> google.protobuf.Timestamp
	58,  // 69: scalibr.DockerContainersMetadata.ports:type_name -> scalibr.DockerPort
	61,  // 70: scalibr.Secret.secret:type_name -> scalibr.SecretData
	62,  // 71: scalibr.Secret.status:type_name -> scalibr.SecretStatus
	63,  // 72: scalibr.Secret.locations:type_name -> scalibr.Location
	74,  // 73: scalibr.SecretData.gcpsak:type_name -> scalibr.SecretData.GCPSAK
	75,  // 74: scalibr.SecretData.anthropic_workspace_api_key:type_name -> scalibr.SecretData.AnthropicWorkspaceAPIKey
	76,  // 75: scalibr.SecretData.anthropic_model_api_key:type_name -> scalibr.SecretData.AnthropicModelAPIKey
	77,  // 76: scalibr.SecretData.perplexity:type_name -> scalibr.SecretData.PerplexityAPIKey
	81,  // 77: scalibr.SecretData.private_key:type_name -> scalibr.SecretData.PrivateKey
	78,  // 78: scalibr.SecretData.grok_xai_api_key:type_name -> scalibr.SecretData.GrokXAIAPIKey
	79,  // 79: scalibr.SecretData.grok_xai_management_api_key:type_name -> scalibr.SecretData.GrokXAIManagementAPIKey
	87,  // 80: scalibr.SecretData.docker_hub_pat:type_name -> scalibr.SecretData.DockerHubPat
	94,  // 81: scalibr.SecretData.digitalocean:type_name -> scalibr.SecretData.DigitalOceanAPIToken
	86,  // 82: scalibr.SecretData.openai_api_key:type_name -> scalibr.SecretData.OpenAIAPIKey
	92,  // 83: scalibr.SecretData.postman_api_key:type_name -> scalibr.SecretData.PostmanAPIKey
	93,  // 84: scalibr.SecretData.postman_collection_access_token:type_name -> scalibr.SecretData.PostmanCollectionAccessToken
	82,  // 85: scalibr.SecretData.azure_access_token:type_name -> scalibr.SecretData.AzureAccessToken
	85,  // 86: scalibr.SecretData.azure_identity_token:type_name -> scalibr.SecretData.AzureIdentityToken
	103, // 87: scalibr.SecretData.tink_keyset:type_name -> scalibr.SecretData.TinkKeyset
	88,  // 88: scalibr.SecretData.gitlab_pat:type_name -> scalibr.SecretData.GitlabPat
	104, // 89: scalibr.SecretData.hashicorp_vault_token:type_name -> scalibr.SecretData.HashiCorpVaultToken
	105, // 90: scalibr.SecretData.hashicorp_vault_app_role_credentials:type_name -> scalibr.SecretData.HashiCorpVaultAppRoleCredentials
	106, // 91: scalibr.SecretData.gcp_api_key:type_name -> scalibr.SecretData.GCPAPIKey
	107, // 92: scalibr.SecretData.hugginface:type_name -> scalibr.SecretData.HuggingfaceAPIKey
	96,  // 93: scalibr.SecretData.github_app_refresh_token:type_name -> scalibr.SecretData.GithubAppRefreshToken
	110, // 94: scalibr.SecretData.stripe_secret_key:type_name -> scalibr.SecretData.StripeSecretKey
	111, // 95: scalibr.SecretData.stripe_restricted_key:type_name -> scalibr.SecretData.StripeRestrictedKey
	112, // 96: scalibr.SecretData.stripe_webhook_secret:type_name -> scalibr.SecretData.StripeWebhookSecret
	113, // 97: scalibr.SecretData.gcp_oauth2_client_credentials:type_name -> scalibr.SecretData.GCPOAuth2ClientCredentials
	114, // 98: scalibr.SecretData.gcp_oauth2_access_token:type_name -> scalibr.SecretData.GCPOAuth2AccessToken
	97,  // 99: scalibr.SecretData.github_app_server_to_server_token:type_name -> scalibr.SecretData.GithubAppServerToServerToken
	98,  // 100: scalibr.SecretData.github_classic_personal_access_token:type_name -> scalibr.SecretData.GithubClassicPersonalAccessToken
	99,  // 101: scalibr.SecretData.github_fine_grained_personal_access_token:type_name -> scalibr.SecretData.GithubFineGrainedPersonalAccessToken
	101, // 102: scalibr.SecretData.github_app_user_to_server_token:type_name -> scalibr.SecretData.GithubAppUserToServerToken
	100, // 103: scalibr.SecretData.github_oauth_token:type_name -> scalibr.SecretData.GithubOAuthToken
	91,  // 104: scalibr.SecretData.slack_app_config_refresh_token:type_name -> scalibr.SecretData.SlackAppConfigRefreshToken
	89,  // 105: scalibr.SecretData.slack_app_level_token:type_name -> scalibr.SecretData.SlackAppLevelToken
	90,  // 106: scalibr.SecretData.slack_app_config_access_token:type_name -> scalibr.SecretData.SlackAppConfigAccessToken
	80,  // 107: scalibr.SecretData.azure_storage_account_access_key:type_name -> scalibr.SecretData.AzureStorageAccountAccessKey
	108, // 108: scalibr.SecretData.hashicorp_cloud_platform_credentials:type_name -> scalibr.SecretData.HashiCorpCloudPlatformCredentials
	109, // 109: scalibr.SecretData.hashicorp_cloud_platform_token:type_name -> scalibr.SecretData.HashiCorpCloudPlatformToken
	116, // 110: scalibr.SecretData.onepassword_secret_key:type_name -> scalibr.SecretData.OnePasswordSecretKey
	117, // 111: scalibr.SecretData.onepassword_service_token:type_name -> scalibr.SecretData.OnePasswordServiceToken
	118, // 112: scalibr.SecretData.onepassword_recovery_code:type_name -> scalibr.SecretData.OnePasswordRecoveryCode
	115, // 113: scalibr.SecretData.onepassword_connect_token:type_name -> scalibr.SecretData.OnePasswordConnectToken
	83,  // 114: scalibr.SecretData.pgpass:type_name -> scalibr.SecretData.Pgpass
	102, // 115: scalibr.SecretData.pypi:type_name -> scalibr.SecretData.PyPIAPIToken
	95,  // 116: scalibr.SecretData.crates_io_api_token:type_name -> scalibr.SecretData.CratesIOAPIToken
	84,  // 117: scalibr.SecretData.maria_db_credentials:type_name -> scalibr.SecretData.MariaDBCredentials
	5,   // 118: scalibr.SecretStatus.status:type_name -> scalibr.SecretStatus.SecretStatusEnum
	120, // 119: scalibr.SecretStatus.last_updated:type_name -> google.protobuf.Timestamp
	64,  // 120: scalibr.Location.filepath:type_name -> scalibr.Filepath
	65,  // 121: scalibr.Location.filepath_with_layer_details:type_name -> scalibr.FilepathWithLayerDetails
	66,  // 122: scalibr.Location.environment_variable:type_name -> scalibr.EnvironmentVariable
	67,  // 123: scalibr.Location.container_command:type_name -> scalibr.ContainerCommand
	12,  // 124: scalibr.FilepathWithLayerDetails.layer_details:type_name -> scalibr.LayerDetails
	71,  // 125: scalibr.ContainerImageMetadata.layer_metadata:type_name -> scalibr.LayerMetadata
	69,  // 126: scalibr.ContainerImageMetadata.base_image_chains:type_name -> scalibr.BaseImageChain
	119, // 127: scalibr.ContainerImageMetadata.os_info:type_name -> scalibr.ContainerImageMetadata.OsInfoEntry
	70,  // 128: scalibr.BaseImageChain.base_images:type_name -> scalibr.BaseImageDetails
	53,  // 129: scalibr.PodmanMetadata.ExposedPortsEntry.value:type_name -> scalibr.Protocol
	130, // [130:130] is the sub-list for method output_type
	130, // [130:130] is the sub-list for method input_type
	130, // [130:130] is the sub-list for extension type_name
	130, // [130:130] is the sub-list for extension extendee
	0,   // [0:130] is the sub-list for field type_name
}

func init() { file_proto_scan_result_proto_init() }
func file_proto_scan_result_proto_init() {
	if File_proto_scan_result_proto != nil {
		return
	}
	file_proto_scan_result_proto_msgTypes[4].OneofWrappers = []any{
		(*Package_PythonMetadata)(nil),
		(*Package_JavascriptMetadata)(nil),
		(*Package_ApkMetadata)(nil),
		(*Package_DpkgMetadata)(nil),
		(*Package_RpmMetadata)(nil),
		(*Package_CosMetadata)(nil),
		(*Package_DepsjsonMetadata)(nil),
		(*Package_SpdxMetadata)(nil),
		(*Package_JavaArchiveMetadata)(nil),
		(*Package_JavaLockfileMetadata)(nil),
		(*Package_PacmanMetadata)(nil),
		(*Package_NixMetadata)(nil),
		(*Package_KernelModuleMetadata)(nil),
		(*Package_VmlinuzMetadata)(nil),
		(*Package_PortageMetadata)(nil),
		(*Package_OsvMetadata)(nil),
		(*Package_NetportsMetadata)(nil),
		(*Package_PythonRequirementsMetadata)(nil),
		(*Package_PythonSetupMetadata)(nil),
		(*Package_ContainerdContainerMetadata)(nil),
		(*Package_SnapMetadata)(nil),
		(*Package_FlatpakMetadata)(nil),
		(*Package_MacAppsMetadata)(nil),
		(*Package_ContainerdRuntimeContainerMetadata)(nil),
		(*Package_CdxMetadata)(nil),
		(*Package_WindowsOsVersionMetadata)(nil),
		(*Package_HomebrewMetadata)(nil),
		(*Package_ChromeExtensionsMetadata)(nil),
		(*Package_VscodeExtensionsMetadata)(nil),
		(*Package_PodmanMetadata)(nil),
		(*Package_DockerContainersMetadata)(nil),
		(*Package_MacportsMetadata)(nil),
		(*Package_WingetMetadata)(nil),
		(*Package_AsdfMetadata)(nil),
		(*Package_NvmMetadata)(nil),
		(*Package_NodeversionMetadata)(nil),
	}
	file_proto_scan_result_proto_msgTypes[7].OneofWrappers = []any{
		(*PackageExploitabilitySignal_VulnIdentifiers)(nil),
		(*PackageExploitabilitySignal_MatchesAllVulns)(nil),
	}
	file_proto_scan_result_proto_msgTypes[55].OneofWrappers = []any{
		(*SecretData_Gcpsak)(nil),
		(*SecretData_AnthropicWorkspaceApiKey)(nil),
		(*SecretData_AnthropicModelApiKey)(nil),
		(*SecretData_Perplexity)(nil),
		(*SecretData_PrivateKey_)(nil),
		(*SecretData_GrokXaiApiKey)(nil),
		(*SecretData_GrokXaiManagementApiKey)(nil),
		(*SecretData_DockerHubPat_)(nil),
		(*SecretData_Digitalocean)(nil),
		(*SecretData_OpenaiApiKey)(nil),
		(*SecretData_PostmanApiKey)(nil),
		(*SecretData_PostmanCollectionAccessToken_)(nil),
		(*SecretData_AzureAccessToken_)(nil),
		(*SecretData_AzureIdentityToken_)(nil),
		(*SecretData_TinkKeyset_)(nil),
		(*SecretData_GitlabPat_)(nil),
		(*SecretData_HashicorpVaultToken)(nil),
		(*SecretData_HashicorpVaultAppRoleCredentials)(nil),
		(*SecretData_GcpApiKey)(nil),
		(*SecretData_Hugginface)(nil),
		(*SecretData_GithubAppRefreshToken_)(nil),
		(*SecretData_StripeSecretKey_)(nil),
		(*SecretData_StripeRestrictedKey_)(nil),
		(*SecretData_StripeWebhookSecret_)(nil),
		(*SecretData_GcpOauth2ClientCredentials)(nil),
		(*SecretData_GcpOauth2AccessToken)(nil),
		(*SecretData_GithubAppServerToServerToken_)(nil),
		(*SecretData_GithubClassicPersonalAccessToken_)(nil),
		(*SecretData_GithubFineGrainedPersonalAccessToken_)(nil),
		(*SecretData_GithubAppUserToServerToken_)(nil),
		(*SecretData_GithubOauthToken)(nil),
		(*SecretData_SlackAppConfigRefreshToken_)(nil),
		(*SecretData_SlackAppLevelToken_)(nil),
		(*SecretData_SlackAppConfigAccessToken_)(nil),
		(*SecretData_AzureStorageAccountAccessKey_)(nil),
		(*SecretData_HashicorpCloudPlatformCredentials)(nil),
		(*SecretData_HashicorpCloudPlatformToken)(nil),
		(*SecretData_OnepasswordSecretKey)(nil),
		(*SecretData_OnepasswordServiceToken)(nil),
		(*SecretData_OnepasswordRecoveryCode)(nil),
		(*SecretData_OnepasswordConnectToken)(nil),
		(*SecretData_Pgpass_)(nil),
		(*SecretData_Pypi)(nil),
		(*SecretData_CratesIoApiToken)(nil),
		(*SecretData_MariaDbCredentials)(nil),
	}
	file_proto_scan_result_proto_msgTypes[57].OneofWrappers = []any{
		(*Location_Filepath)(nil),
		(*Location_FilepathWithLayerDetails)(nil),
		(*Location_EnvironmentVariable)(nil),
		(*Location_ContainerCommand)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_scan_result_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   114,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_scan_result_proto_goTypes,
		DependencyIndexes: file_proto_scan_result_proto_depIdxs,
		EnumInfos:         file_proto_scan_result_proto_enumTypes,
		MessageInfos:      file_proto_scan_result_proto_msgTypes,
	}.Build()
	File_proto_scan_result_proto = out.File
	file_proto_scan_result_proto_rawDesc = nil
	file_proto_scan_result_proto_goTypes = nil
	file_proto_scan_result_proto_depIdxs = nil
}
